{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Waitlist Companion™ - Mental Health Support Application\n\n## Overview\n\nWaitlist Companion™ is a comprehensive mental health support application designed to provide interim care for patients waiting for NHS mental health services. The application features an anxiety support program with personalized modules, weekly mental health assessments, crisis intervention capabilities, and progress tracking with clinical handoff reports.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with Shadcn/UI component library following the \"new-york\" design system\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation for type-safe form schemas\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js REST API\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database interactions\n- **Schema Validation**: Zod schemas shared between client and server\n- **File Structure**: Monorepo with separate client, server, and shared directories\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM configuration\n- **Schema Design**: Comprehensive mental health data model including:\n  - User management with NHS number support\n  - Onboarding assessments with risk scoring\n  - Weekly PHQ-4 based mental health check-ins\n  - Modular anxiety support program tracking\n  - Progress reports for clinical handoff\n- **Storage Strategy**: In-memory storage implementation for development with interface for easy database integration\n\n### Authentication and Authorization\n- **Approach**: Simplified email-based authentication for MVP\n- **Session Management**: Basic session handling without complex JWT implementation\n- **User Context**: Stored user state managed through React Query\n\n### Risk Assessment System\n- **Scoring Algorithm**: PHQ-4 based assessment with additional risk factors\n- **Risk Levels**: Four-tier system (low, moderate, high, crisis)\n- **Escalation Logic**: Automatic flagging for high-risk and crisis situations\n- **Clinical Integration**: Structured data for healthcare provider handoff\n\n### Module System\n- **Progressive Unlocking**: Week-based anxiety support modules with completion tracking\n- **Content Delivery**: Estimated time tracking and activity completion monitoring\n- **Engagement Metrics**: Minutes completed and progress percentage calculations\n\n## External Dependencies\n\n### UI Components and Styling\n- **Radix UI**: Comprehensive headless component library for accessibility\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Type-safe component variant management\n\n### Database and ORM\n- **Neon Database**: PostgreSQL hosting with serverless capabilities\n- **Drizzle ORM**: Type-safe database toolkit with migration support\n- **Drizzle Kit**: Database schema management and migration tools\n\n### Form and Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: TypeScript-first schema validation\n- **Hookform Resolvers**: Integration between React Hook Form and Zod\n\n### Development Tools\n- **Vite**: Fast build tool with HMR and TypeScript support\n- **Replit Integration**: Development environment plugins for runtime error handling\n- **PostCSS**: CSS processing with Tailwind integration\n\n### Reporting and Analytics\n- **jsPDF**: Client-side PDF generation for progress reports\n- **Date-fns**: Date manipulation for temporal data handling\n\n### Session Management\n- **Connect PG Simple**: PostgreSQL session store for Express sessions\n- **Express Session**: Server-side session management\n\nThe architecture prioritizes clinical safety through comprehensive risk assessment, seamless healthcare provider integration via structured reporting, and user engagement through progressive module unlocking and regular check-ins.","size_bytes":4160},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertOnboardingResponseSchema, insertWeeklyAssessmentSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User registration/login (simplified for MVP)\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const existingUser = await storage.getUserByEmail(userData.email);\n      \n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists\" });\n      }\n\n      const user = await storage.createUser(userData);\n      await storage.initializeAnxietyModules(user.id);\n      \n      res.json({ user });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/login\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      res.json({ user });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/users/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      res.json({ user });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Onboarding\n  app.post(\"/api/onboarding\", async (req, res) => {\n    try {\n      const { userId, responses } = req.body;\n      const riskScore = calculateRiskScore(responses);\n      const baselineAnxietyLevel = determineRiskLevel(riskScore);\n\n      const onboardingData = insertOnboardingResponseSchema.parse({\n        userId,\n        responses,\n        riskScore,\n        baselineAnxietyLevel,\n      });\n\n      const response = await storage.createOnboardingResponse(onboardingData);\n      res.json({ response });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/onboarding/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const response = await storage.getOnboardingResponse(userId);\n      res.json({ response });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Weekly assessments\n  app.post(\"/api/assessments\", async (req, res) => {\n    try {\n      const { userId, weekNumber, responses } = req.body;\n      const riskScore = calculateRiskScore(responses);\n      const riskLevel = determineRiskLevel(riskScore);\n      const needsEscalation = riskLevel === \"crisis\" || riskLevel === \"high\";\n\n      const assessmentData = insertWeeklyAssessmentSchema.parse({\n        userId,\n        weekNumber,\n        responses,\n        riskScore,\n        riskLevel,\n        needsEscalation,\n      });\n\n      const assessment = await storage.createWeeklyAssessment(assessmentData);\n      res.json({ assessment });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/assessments/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const assessments = await storage.getWeeklyAssessments(userId);\n      res.json({ assessments });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/assessments/:userId/latest\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const assessment = await storage.getLatestWeeklyAssessment(userId);\n      res.json({ assessment });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Anxiety modules\n  app.get(\"/api/modules/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      let modules = await storage.getAnxietyModules(userId);\n      \n      // Initialize modules if none exist\n      if (modules.length === 0) {\n        await storage.initializeAnxietyModules(userId);\n        modules = await storage.getAnxietyModules(userId);\n      }\n      \n      res.json({ modules });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/modules/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const module = await storage.updateAnxietyModule(id, updates);\n      res.json({ module });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Dashboard data\n  app.get(\"/api/dashboard/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      const modules = await storage.getAnxietyModules(userId);\n      const latestAssessment = await storage.getLatestWeeklyAssessment(userId);\n      const onboarding = await storage.getOnboardingResponse(userId);\n\n      const totalMinutes = modules.reduce((sum, module) => sum + (module.minutesCompleted || 0), 0);\n      const totalEstimatedMinutes = modules.reduce((sum, module) => sum + module.estimatedMinutes, 0);\n      const completionRate = totalEstimatedMinutes > 0 ? Math.round((totalMinutes / totalEstimatedMinutes) * 100) : 0;\n      \n      const currentWeek = modules.filter(m => !m.isLocked && m.completedAt).length + 1;\n      \n      const dashboardData = {\n        currentWeek: Math.min(currentWeek, 6),\n        riskLevel: latestAssessment?.riskLevel || onboarding?.baselineAnxietyLevel || \"unknown\",\n        completionRate,\n        totalMinutes,\n        nextCheckInDue: latestAssessment ? \n          new Date(latestAssessment.completedAt!.getTime() + 7 * 24 * 60 * 60 * 1000) : \n          new Date(),\n      };\n\n      res.json({ dashboardData });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Progress report generation\n  app.post(\"/api/reports\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      const user = await storage.getUser(userId);\n      const onboarding = await storage.getOnboardingResponse(userId);\n      const assessments = await storage.getWeeklyAssessments(userId);\n      const modules = await storage.getAnxietyModules(userId);\n\n      if (!user || !onboarding) {\n        return res.status(404).json({ error: \"User data not found\" });\n      }\n\n      const reportData = {\n        user,\n        onboarding,\n        assessments,\n        modules,\n        generatedAt: new Date(),\n      };\n\n      const report = await storage.createProgressReport({\n        userId,\n        reportData,\n      });\n\n      res.json({ report });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Risk calculation functions (shared with frontend)\nfunction calculateRiskScore(responses: any): number {\n  // PHQ-4 based scoring (0-12 scale)\n  // Questions about anxiety and depression frequency\n  let score = 0;\n  \n  if (responses.anxietyFrequency !== undefined) score += parseInt(responses.anxietyFrequency);\n  if (responses.worryFrequency !== undefined) score += parseInt(responses.worryFrequency);\n  if (responses.depressionFrequency !== undefined) score += parseInt(responses.depressionFrequency);\n  if (responses.anhedoniaFrequency !== undefined) score += parseInt(responses.anhedoniaFrequency);\n  \n  // Additional factors\n  if (responses.sleepQuality === \"poor\") score += 1;\n  if (responses.suicidalThoughts === \"yes\") score += 5; // Major escalation factor\n  if (responses.selfHarm === \"yes\") score += 3;\n  if (responses.substanceUse === \"increased\") score += 2;\n  \n  return Math.min(score, 15); // Cap at 15 for our scale\n}\n\nfunction determineRiskLevel(score: number): string {\n  if (score >= 12) return \"crisis\";\n  if (score >= 8) return \"high\";\n  if (score >= 5) return \"moderate\";\n  return \"low\";\n}\n","size_bytes":8074},"server/storage.ts":{"content":"import { type User, type InsertUser, type OnboardingResponse, type InsertOnboardingResponse, type WeeklyAssessment, type InsertWeeklyAssessment, type AnxietyModule, type InsertAnxietyModule, type ProgressReport, type InsertProgressReport } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // Onboarding\n  createOnboardingResponse(response: InsertOnboardingResponse): Promise<OnboardingResponse>;\n  getOnboardingResponse(userId: string): Promise<OnboardingResponse | undefined>;\n\n  // Weekly assessments\n  createWeeklyAssessment(assessment: InsertWeeklyAssessment): Promise<WeeklyAssessment>;\n  getWeeklyAssessments(userId: string): Promise<WeeklyAssessment[]>;\n  getLatestWeeklyAssessment(userId: string): Promise<WeeklyAssessment | undefined>;\n\n  // Anxiety modules\n  createAnxietyModule(module: InsertAnxietyModule): Promise<AnxietyModule>;\n  getAnxietyModules(userId: string): Promise<AnxietyModule[]>;\n  updateAnxietyModule(id: string, updates: Partial<AnxietyModule>): Promise<AnxietyModule>;\n  initializeAnxietyModules(userId: string): Promise<void>;\n\n  // Progress reports\n  createProgressReport(report: InsertProgressReport): Promise<ProgressReport>;\n  getProgressReports(userId: string): Promise<ProgressReport[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private onboardingResponses: Map<string, OnboardingResponse>;\n  private weeklyAssessments: Map<string, WeeklyAssessment>;\n  private anxietyModules: Map<string, AnxietyModule>;\n  private progressReports: Map<string, ProgressReport>;\n\n  constructor() {\n    this.users = new Map();\n    this.onboardingResponses = new Map();\n    this.weeklyAssessments = new Map();\n    this.anxietyModules = new Map();\n    this.progressReports = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date(),\n      nhsNumber: insertUser.nhsNumber || null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error(\"User not found\");\n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async createOnboardingResponse(insertResponse: InsertOnboardingResponse): Promise<OnboardingResponse> {\n    const id = randomUUID();\n    const response: OnboardingResponse = { ...insertResponse, id, completedAt: new Date() };\n    this.onboardingResponses.set(id, response);\n    return response;\n  }\n\n  async getOnboardingResponse(userId: string): Promise<OnboardingResponse | undefined> {\n    return Array.from(this.onboardingResponses.values()).find(response => response.userId === userId);\n  }\n\n  async createWeeklyAssessment(insertAssessment: InsertWeeklyAssessment): Promise<WeeklyAssessment> {\n    const id = randomUUID();\n    const assessment: WeeklyAssessment = { \n      ...insertAssessment, \n      id, \n      completedAt: new Date(),\n      needsEscalation: insertAssessment.needsEscalation || false\n    };\n    this.weeklyAssessments.set(id, assessment);\n    return assessment;\n  }\n\n  async getWeeklyAssessments(userId: string): Promise<WeeklyAssessment[]> {\n    return Array.from(this.weeklyAssessments.values())\n      .filter(assessment => assessment.userId === userId)\n      .sort((a, b) => b.weekNumber - a.weekNumber);\n  }\n\n  async getLatestWeeklyAssessment(userId: string): Promise<WeeklyAssessment | undefined> {\n    const assessments = await this.getWeeklyAssessments(userId);\n    return assessments[0];\n  }\n\n  async createAnxietyModule(insertModule: InsertAnxietyModule): Promise<AnxietyModule> {\n    const id = randomUUID();\n    const module: AnxietyModule = { \n      ...insertModule, \n      id, \n      completedAt: null, \n      lastAccessedAt: null,\n      activitiesCompleted: insertModule.activitiesCompleted || 0,\n      minutesCompleted: insertModule.minutesCompleted || 0,\n      isLocked: insertModule.isLocked !== undefined ? insertModule.isLocked : true,\n      contentData: insertModule.contentData || null,\n      userProgress: insertModule.userProgress || null\n    };\n    this.anxietyModules.set(id, module);\n    return module;\n  }\n\n  async getAnxietyModules(userId: string): Promise<AnxietyModule[]> {\n    return Array.from(this.anxietyModules.values())\n      .filter(module => module.userId === userId)\n      .sort((a, b) => a.weekNumber - b.weekNumber);\n  }\n\n  async updateAnxietyModule(id: string, updates: Partial<AnxietyModule>): Promise<AnxietyModule> {\n    const module = this.anxietyModules.get(id);\n    if (!module) throw new Error(\"Module not found\");\n    const updatedModule = { ...module, ...updates, lastAccessedAt: new Date() };\n    this.anxietyModules.set(id, updatedModule);\n    return updatedModule;\n  }\n\n  async initializeAnxietyModules(userId: string): Promise<void> {\n    const defaultModules = [\n      {\n        userId,\n        weekNumber: 1,\n        title: \"Understanding Anxiety\",\n        description: \"Learn what anxiety is, how it affects your body and mind, and why it happens. Build your foundation for recovery.\",\n        estimatedMinutes: 45,\n        activitiesTotal: 4,\n        activitiesCompleted: 0,\n        minutesCompleted: 0,\n        isLocked: false,\n      },\n      {\n        userId,\n        weekNumber: 2,\n        title: \"Breathing & Relaxation\",\n        description: \"Master practical breathing techniques and progressive muscle relaxation to manage physical anxiety symptoms.\",\n        estimatedMinutes: 38,\n        activitiesTotal: 5,\n        activitiesCompleted: 0,\n        minutesCompleted: 0,\n        isLocked: false,\n      },\n      {\n        userId,\n        weekNumber: 3,\n        title: \"Cognitive Strategies\",\n        description: \"Learn to identify and challenge anxious thoughts with cognitive behavioral techniques.\",\n        estimatedMinutes: 40,\n        activitiesTotal: 3,\n        activitiesCompleted: 0,\n        minutesCompleted: 0,\n        isLocked: false,\n      },\n      {\n        userId,\n        weekNumber: 4,\n        title: \"Mindfulness & Grounding\",\n        description: \"Develop mindfulness skills and grounding techniques to stay present during anxious moments.\",\n        estimatedMinutes: 35,\n        activitiesTotal: 4,\n        activitiesCompleted: 0,\n        minutesCompleted: 0,\n        isLocked: false,\n      },\n      {\n        userId,\n        weekNumber: 5,\n        title: \"Behavioral Activation\",\n        description: \"Build healthy routines and gradually expose yourself to anxiety-provoking situations in a safe way.\",\n        estimatedMinutes: 42,\n        activitiesTotal: 4,\n        activitiesCompleted: 0,\n        minutesCompleted: 0,\n        isLocked: false,\n      },\n      {\n        userId,\n        weekNumber: 6,\n        title: \"Relapse Prevention\",\n        description: \"Create your personal toolkit for maintaining progress and preparing for NHS transition.\",\n        estimatedMinutes: 30,\n        activitiesTotal: 3,\n        activitiesCompleted: 0,\n        minutesCompleted: 0,\n        isLocked: false,\n      },\n    ];\n\n    for (const moduleData of defaultModules) {\n      await this.createAnxietyModule(moduleData);\n    }\n  }\n\n  async createProgressReport(insertReport: InsertProgressReport): Promise<ProgressReport> {\n    const id = randomUUID();\n    const report: ProgressReport = { ...insertReport, id, generatedAt: new Date() };\n    this.progressReports.set(id, report);\n    return report;\n  }\n\n  async getProgressReports(userId: string): Promise<ProgressReport[]> {\n    return Array.from(this.progressReports.values())\n      .filter(report => report.userId === userId)\n      .sort((a, b) => b.generatedAt!.getTime() - a.generatedAt!.getTime());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":8342},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  nhsNumber: text(\"nhs_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const onboardingResponses = pgTable(\"onboarding_responses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  responses: jsonb(\"responses\").notNull(), // Store all questionnaire responses\n  riskScore: integer(\"risk_score\").notNull(),\n  baselineAnxietyLevel: text(\"baseline_anxiety_level\").notNull(),\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n});\n\nexport const weeklyAssessments = pgTable(\"weekly_assessments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  weekNumber: integer(\"week_number\").notNull(),\n  responses: jsonb(\"responses\").notNull(), // PHQ-4 and additional questions\n  riskScore: integer(\"risk_score\").notNull(),\n  riskLevel: text(\"risk_level\").notNull(), // \"low\", \"moderate\", \"high\", \"crisis\"\n  needsEscalation: boolean(\"needs_escalation\").default(false),\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n});\n\nexport const anxietyModules = pgTable(\"anxiety_modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  weekNumber: integer(\"week_number\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  estimatedMinutes: integer(\"estimated_minutes\").notNull(),\n  activitiesTotal: integer(\"activities_total\").notNull(),\n  activitiesCompleted: integer(\"activities_completed\").default(0),\n  minutesCompleted: integer(\"minutes_completed\").default(0),\n  isLocked: boolean(\"is_locked\").default(true),\n  completedAt: timestamp(\"completed_at\"),\n  lastAccessedAt: timestamp(\"last_accessed_at\"),\n  contentData: jsonb(\"content_data\"), // Detailed module content, activities, and exercises\n  userProgress: jsonb(\"user_progress\"), // User notes, reflections, completed activities\n});\n\nexport const moduleActivities = pgTable(\"module_activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  moduleId: varchar(\"module_id\").references(() => anxietyModules.id).notNull(),\n  activityType: text(\"activity_type\").notNull(), // \"reading\", \"exercise\", \"reflection\", \"breathing\", \"worksheet\"\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  content: jsonb(\"content\").notNull(), // Activity-specific content and instructions\n  estimatedMinutes: integer(\"estimated_minutes\").notNull(),\n  orderIndex: integer(\"order_index\").notNull(),\n  isCompleted: boolean(\"is_completed\").default(false),\n  completedAt: timestamp(\"completed_at\"),\n  userResponse: jsonb(\"user_response\"), // User inputs, answers, reflections\n});\n\nexport const progressReports = pgTable(\"progress_reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  reportData: jsonb(\"report_data\").notNull(),\n  generatedAt: timestamp(\"generated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport const insertOnboardingResponseSchema = createInsertSchema(onboardingResponses).omit({ id: true, completedAt: true });\nexport const insertWeeklyAssessmentSchema = createInsertSchema(weeklyAssessments).omit({ id: true, completedAt: true });\nexport const insertAnxietyModuleSchema = createInsertSchema(anxietyModules).omit({ id: true, completedAt: true, lastAccessedAt: true });\nexport const insertModuleActivitySchema = createInsertSchema(moduleActivities).omit({ id: true, completedAt: true });\nexport const insertProgressReportSchema = createInsertSchema(progressReports).omit({ id: true, generatedAt: true });\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type OnboardingResponse = typeof onboardingResponses.$inferSelect;\nexport type InsertOnboardingResponse = z.infer<typeof insertOnboardingResponseSchema>;\nexport type WeeklyAssessment = typeof weeklyAssessments.$inferSelect;\nexport type InsertWeeklyAssessment = z.infer<typeof insertWeeklyAssessmentSchema>;\nexport type AnxietyModule = typeof anxietyModules.$inferSelect;\nexport type InsertAnxietyModule = z.infer<typeof insertAnxietyModuleSchema>;\nexport type ModuleActivity = typeof moduleActivities.$inferSelect;\nexport type InsertModuleActivity = z.infer<typeof insertModuleActivitySchema>;\nexport type ProgressReport = typeof progressReports.$inferSelect;\nexport type InsertProgressReport = z.infer<typeof insertProgressReportSchema>;\n","size_bytes":5080},"client/src/App.tsx":{"content":"import { lazy, Suspense } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Onboarding from \"@/pages/onboarding\";\nimport AnxietyTrack from \"@/pages/anxiety-track\";\nimport CheckIns from \"@/pages/check-ins\";\nimport Resources from \"@/pages/resources\";\nimport Settings from \"@/pages/settings\";\n\nconst ModuleDetail = lazy(() => import(\"@/pages/module-detail\"));\n\nfunction ModuleDetailWithSuspense() {\n  return (\n    <Suspense fallback={<div className=\"min-h-screen flex items-center justify-center\">Loading module...</div>}>\n      <ModuleDetail />\n    </Suspense>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/onboarding\" component={Onboarding} />\n      <Route path=\"/anxiety-track\" component={AnxietyTrack} />\n      <Route path=\"/anxiety-track/module/:weekNumber\" component={ModuleDetailWithSuspense} />\n      <Route path=\"/check-ins\" component={CheckIns} />\n      <Route path=\"/resources\" component={Resources} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1631},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(180, 7%, 97%);\n  --sidebar-foreground: hsl(222, 84%, 5%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(211, 51%, 93%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(205, 25%, 91%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 1px 2px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 1px 2px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 2px 4px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 4px 6px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 8px 10px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 7%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 7%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(142, 70%, 45%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.progress-ring {\n  transform: rotate(-90deg);\n}\n\n.progress-ring circle {\n  stroke-dasharray: 251.3;\n  stroke-dashoffset: 251.3;\n  transition: stroke-dashoffset 0.5s ease;\n}\n\n.crisis-banner {\n  background: linear-gradient(135deg, hsl(0, 84%, 60%) 0%, hsl(0, 70%, 50%) 100%);\n}\n\n.tab-content {\n  display: none;\n}\n\n.tab-content.active {\n  display: block;\n}\n","size_bytes":3312},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/NhsPrepGuide.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Heart, \n  FileText, \n  Users, \n  MessageSquare,\n  CheckCircle,\n  Clock,\n  Download,\n  Plus,\n  X,\n  Star,\n  Target,\n  Phone,\n  BookOpen,\n  Award,\n  ArrowRight\n} from \"lucide-react\";\n\ninterface DocumentPrep {\n  gpReferral: boolean;\n  medicationList: string;\n  programSummary: string;\n  personalToolkit: string;\n  previousRecords: string;\n  questionsList: string[];\n}\n\ninterface ProgramSummary {\n  helpfulTechniques: string[];\n  successfulSituations: string[];\n  supportNeeded: string[];\n  currentFunctioning: string;\n  treatmentGoals: string[];\n}\n\ninterface AssessmentPrep {\n  symptoms: string[];\n  triggers: string[];\n  copingStrategies: string[];\n  progressMade: string;\n  challenges: string;\n  values: string;\n  supportSystems: string;\n}\n\ninterface TreatmentKnowledge {\n  cbtUnderstanding: string;\n  otherTherapies: string[];\n  medicationQuestions: string[];\n  groupTherapyInterest: string;\n  treatmentPreferences: string;\n}\n\ninterface OngoingPrep {\n  dailyPractices: string[];\n  socialConnections: string[];\n  learningResources: string[];\n  progressMonitoring: string;\n}\n\ninterface NhsReadiness {\n  independentTools: number;\n  handleSetbacks: number;\n  maintainProgress: number;\n  transitionReadiness: number;\n  continueJourney: number;\n  confidence: string;\n}\n\nexport function NhsPrepGuide() {\n  const [documentPrep, setDocumentPrep] = useState<DocumentPrep>({\n    gpReferral: false,\n    medicationList: \"\",\n    programSummary: \"\",\n    personalToolkit: \"\",\n    previousRecords: \"\",\n    questionsList: []\n  });\n\n  const [programSummary, setProgramSummary] = useState<ProgramSummary>({\n    helpfulTechniques: [],\n    successfulSituations: [],\n    supportNeeded: [],\n    currentFunctioning: \"\",\n    treatmentGoals: []\n  });\n\n  const [assessmentPrep, setAssessmentPrep] = useState<AssessmentPrep>({\n    symptoms: [],\n    triggers: [],\n    copingStrategies: [],\n    progressMade: \"\",\n    challenges: \"\",\n    values: \"\",\n    supportSystems: \"\"\n  });\n\n  const [treatmentKnowledge, setTreatmentKnowledge] = useState<TreatmentKnowledge>({\n    cbtUnderstanding: \"\",\n    otherTherapies: [],\n    medicationQuestions: [],\n    groupTherapyInterest: \"\",\n    treatmentPreferences: \"\"\n  });\n\n  const [ongoingPrep, setOngoingPrep] = useState<OngoingPrep>({\n    dailyPractices: [],\n    socialConnections: [],\n    learningResources: [],\n    progressMonitoring: \"\"\n  });\n\n  const [nhsReadiness, setNhsReadiness] = useState<NhsReadiness>({\n    independentTools: 7,\n    handleSetbacks: 6,\n    maintainProgress: 6,\n    transitionReadiness: 8,\n    continueJourney: 8,\n    confidence: \"\"\n  });\n\n  const [advocacyPrep, setAdvocacyPrep] = useState({\n    treatmentPreferences: \"\",\n    previousExperiences: \"\",\n    concerns: \"\",\n    supportPerson: \"\",\n    questions: [] as string[]\n  });\n\n  const suggestedQuestions = {\n    treatmentOptions: [\n      \"What treatment approaches do you recommend for my specific type of anxiety?\",\n      \"How long is the typical treatment course?\",\n      \"What are the benefits and potential side effects of recommended treatments?\",\n      \"Are there group therapy options available?\",\n      \"What happens if the first treatment approach doesn't work?\"\n    ],\n    waitingTimes: [\n      \"How long is the wait for treatment to begin?\",\n      \"What support is available while I'm waiting?\",\n      \"Can I continue using the skills I've learned in this program?\",\n      \"Are there any resources or support groups I can access immediately?\"\n    ],\n    ongoingSupport: [\n      \"What should I do if I'm struggling between appointments?\",\n      \"How often will I be seen once treatment begins?\",\n      \"What crisis support is available if I need it?\",\n      \"How will my progress be monitored?\"\n    ],\n    yourRole: [\n      \"What can I do to prepare for treatment?\",\n      \"How can I make the most of therapy sessions?\",\n      \"What should I do between sessions?\",\n      \"How involved will my family or friends be in treatment?\"\n    ]\n  };\n\n  const helpfulTechniquesOptions = [\n    \"Breathing techniques (box breathing, diaphragmatic breathing)\",\n    \"Grounding techniques (5-4-3-2-1, physical grounding)\",\n    \"Cognitive strategies (thought challenging, reframing)\",\n    \"Mindfulness and meditation practices\",\n    \"Progressive muscle relaxation\",\n    \"Exposure and behavioral activation\",\n    \"Values-based decision making\",\n    \"Anxiety tracking and monitoring\"\n  ];\n\n  const currentSymptoms = [\n    \"Physical tension and muscle aches\",\n    \"Sleep difficulties\",\n    \"Racing thoughts or worry\",\n    \"Difficulty concentrating\",\n    \"Irritability or mood changes\",\n    \"Avoidance of certain situations\",\n    \"Social anxiety or isolation\",\n    \"Panic attacks or acute anxiety episodes\"\n  ];\n\n  const anxietyTriggers = [\n    \"Work or school stress\",\n    \"Social situations\",\n    \"Health concerns\",\n    \"Financial worries\",\n    \"Relationship issues\",\n    \"Change or uncertainty\",\n    \"Crowded places\",\n    \"Performance situations\"\n  ];\n\n  const copingStrategiesUsed = [\n    \"Daily breathing exercises\",\n    \"Regular mindfulness practice\",\n    \"Physical exercise\",\n    \"Journaling and thought records\",\n    \"Social support\",\n    \"Values-based activities\",\n    \"Relaxation techniques\",\n    \"Exposure practice\"\n  ];\n\n  const otherTherapyOptions = [\n    \"Acceptance and Commitment Therapy (ACT)\",\n    \"Mindfulness-Based Cognitive Therapy (MBCT)\",\n    \"Dialectical Behavior Therapy (DBT)\",\n    \"Eye Movement Desensitization and Reprocessing (EMDR)\",\n    \"Counseling/Humanistic therapy\",\n    \"Group therapy\",\n    \"Family therapy\",\n    \"Online therapy platforms\"\n  ];\n\n  const dailyPracticeOptions = [\n    \"Continue breathing and relaxation techniques\",\n    \"Keep practicing mindfulness and grounding\",\n    \"Maintain values-based goal setting\",\n    \"Use personal anxiety toolkit regularly\",\n    \"Regular exercise or movement\",\n    \"Journaling and self-reflection\",\n    \"Maintain healthy sleep schedule\",\n    \"Practice exposure exercises\"\n  ];\n\n  const socialConnectionOptions = [\n    \"Keep in touch with support network\",\n    \"Continue social activities and relationships\",\n    \"Engage with online communities if helpful\",\n    \"Consider peer support groups\",\n    \"Maintain family relationships\",\n    \"Join anxiety support groups\",\n    \"Connect with mental health communities\",\n    \"Participate in community activities\"\n  ];\n\n  const learningResourceOptions = [\n    \"Read self-help books on anxiety management\",\n    \"Use mental health apps for additional support\",\n    \"Practice skills learned consistently\",\n    \"Try new anxiety management techniques\",\n    \"Watch educational videos\",\n    \"Listen to anxiety-focused podcasts\",\n    \"Follow reputable mental health accounts\",\n    \"Attend workshops or webinars\"\n  ];\n\n  const addToArray = (setter: any, field: string, value: string) => {\n    if (value.trim()) {\n      setter((prev: any) => ({\n        ...prev,\n        [field]: [...prev[field], value.trim()]\n      }));\n    }\n  };\n\n  const removeFromArray = (setter: any, field: string, index: number) => {\n    setter((prev: any) => ({\n      ...prev,\n      [field]: prev[field].filter((_: any, i: number) => i !== index)\n    }));\n  };\n\n  const toggleArrayItem = (setter: any, field: string, item: string) => {\n    setter((prev: any) => ({\n      ...prev,\n      [field]: prev[field].includes(item)\n        ? prev[field].filter((i: string) => i !== item)\n        : [...prev[field], item]\n    }));\n  };\n\n  const calculateOverallReadiness = () => {\n    const { independentTools, handleSetbacks, maintainProgress, transitionReadiness, continueJourney } = nhsReadiness;\n    return Math.round(((independentTools + handleSetbacks + maintainProgress + transitionReadiness + continueJourney) / 5) * 10);\n  };\n\n  const getCompletenessPercentage = () => {\n    let completed = 0;\n    let total = 0;\n\n    // Document prep (6 items)\n    total += 6;\n    if (documentPrep.gpReferral) completed++;\n    if (documentPrep.medicationList.trim()) completed++;\n    if (documentPrep.programSummary.trim()) completed++;\n    if (documentPrep.personalToolkit.trim()) completed++;\n    if (documentPrep.previousRecords.trim()) completed++;\n    if (documentPrep.questionsList.length > 0) completed++;\n\n    // Program summary (5 arrays + 1 text)\n    total += 6;\n    if (programSummary.helpfulTechniques.length > 0) completed++;\n    if (programSummary.successfulSituations.length > 0) completed++;\n    if (programSummary.supportNeeded.length > 0) completed++;\n    if (programSummary.currentFunctioning.trim()) completed++;\n    if (programSummary.treatmentGoals.length > 0) completed++;\n    if (assessmentPrep.values.trim()) completed++;\n\n    // Assessment prep (7 items)\n    total += 7;\n    if (assessmentPrep.symptoms.length > 0) completed++;\n    if (assessmentPrep.triggers.length > 0) completed++;\n    if (assessmentPrep.copingStrategies.length > 0) completed++;\n    if (assessmentPrep.progressMade.trim()) completed++;\n    if (assessmentPrep.challenges.trim()) completed++;\n    if (assessmentPrep.supportSystems.trim()) completed++;\n    if (nhsReadiness.confidence.trim()) completed++;\n\n    return Math.round((completed / total) * 100);\n  };\n\n  const exportNhsPrep = () => {\n    const prepData = {\n      documentPrep,\n      programSummary,\n      assessmentPrep,\n      treatmentKnowledge,\n      ongoingPrep,\n      nhsReadiness,\n      advocacyPrep,\n      overallReadiness: calculateOverallReadiness(),\n      completeness: getCompletenessPercentage(),\n      createdDate: new Date().toISOString(),\n      version: \"1.0\"\n    };\n\n    const dataStr = JSON.stringify(prepData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `nhs-transition-preparation-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-green-50 border-blue-200\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Heart className=\"w-6 h-6 text-blue-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl\">NHS Mental Health Services Preparation</CardTitle>\n              <p className=\"text-muted-foreground\">Complete preparation guide for your transition to NHS care</p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{calculateOverallReadiness()}%</div>\n              <div className=\"text-sm text-muted-foreground\">NHS Readiness Score</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{getCompletenessPercentage()}%</div>\n              <div className=\"text-sm text-muted-foreground\">Preparation Complete</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">6</div>\n              <div className=\"text-sm text-muted-foreground\">Weeks of Skills</div>\n            </div>\n          </div>\n          \n          <Progress value={getCompletenessPercentage()} className=\"mb-4\" />\n          \n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <p className=\"text-sm text-blue-800\">\n              💡 <strong>You're not starting from scratch:</strong> You're building on 6 weeks of skill development, \n              self-awareness, and proven anxiety management strategies. Approach NHS services with confidence!\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"documents\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"documents\">Documents</TabsTrigger>\n          <TabsTrigger value=\"summary\">Program Summary</TabsTrigger>\n          <TabsTrigger value=\"assessment\">Assessment Prep</TabsTrigger>\n          <TabsTrigger value=\"treatment\">Treatment Options</TabsTrigger>\n          <TabsTrigger value=\"ongoing\">Ongoing Support</TabsTrigger>\n          <TabsTrigger value=\"advocacy\">Self-Advocacy</TabsTrigger>\n        </TabsList>\n\n        {/* Documents to Bring Tab */}\n        <TabsContent value=\"documents\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                Documents and Information to Bring\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Prepare the essential documents and information for your NHS assessment\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Checkbox\n                    id=\"gp-referral\"\n                    checked={documentPrep.gpReferral}\n                    onCheckedChange={(checked) => setDocumentPrep(prev => ({ ...prev, gpReferral: !!checked }))}\n                    data-testid=\"checkbox-gp-referral\"\n                  />\n                  <label htmlFor=\"gp-referral\" className=\"text-sm font-medium cursor-pointer\">\n                    GP referral letter (if you have one)\n                  </label>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"medication-list\">List of current medications</Label>\n                  <Textarea\n                    id=\"medication-list\"\n                    placeholder=\"List all medications, dosages, and any side effects you've experienced...\"\n                    value={documentPrep.medicationList}\n                    onChange={(e) => setDocumentPrep(prev => ({ ...prev, medicationList: e.target.value }))}\n                    className=\"mt-1\"\n                    data-testid=\"textarea-medication-list\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"program-summary\">Summary of this 6-week program</Label>\n                  <Textarea\n                    id=\"program-summary\"\n                    placeholder=\"Briefly describe what you've learned and accomplished in this program...\"\n                    value={documentPrep.programSummary}\n                    onChange={(e) => setDocumentPrep(prev => ({ ...prev, programSummary: e.target.value }))}\n                    className=\"mt-1\"\n                    data-testid=\"textarea-program-summary\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"personal-toolkit\">Your personal anxiety toolkit summary</Label>\n                  <Textarea\n                    id=\"personal-toolkit\"\n                    placeholder=\"Summarize your most effective anxiety management techniques...\"\n                    value={documentPrep.personalToolkit}\n                    onChange={(e) => setDocumentPrep(prev => ({ ...prev, personalToolkit: e.target.value }))}\n                    className=\"mt-1\"\n                    data-testid=\"textarea-personal-toolkit\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"previous-records\">Any previous mental health records</Label>\n                  <Textarea\n                    id=\"previous-records\"\n                    placeholder=\"Note any previous therapy, assessments, or mental health treatment...\"\n                    value={documentPrep.previousRecords}\n                    onChange={(e) => setDocumentPrep(prev => ({ ...prev, previousRecords: e.target.value }))}\n                    className=\"mt-1\"\n                    data-testid=\"textarea-previous-records\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Questions you want to ask</Label>\n                  <div className=\"space-y-2 mt-2\">\n                    {documentPrep.questionsList.map((question, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 bg-blue-50 rounded\">\n                        <span className=\"text-sm\">{question}</span>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => removeFromArray(setDocumentPrep, 'questionsList', index)}\n                          data-testid={`button-remove-question-${index}`}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-2 mt-2\">\n                    <Input\n                      placeholder=\"Add a question you want to ask...\"\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          addToArray(setDocumentPrep, 'questionsList', (e.target as HTMLInputElement).value);\n                          (e.target as HTMLInputElement).value = '';\n                        }\n                      }}\n                      data-testid=\"input-add-question\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={(e) => {\n                        const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                        addToArray(setDocumentPrep, 'questionsList', input.value);\n                        input.value = '';\n                      }}\n                      data-testid=\"button-add-question\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2 text-green-800\">Suggested Questions by Category</h4>\n                <div className=\"space-y-4\">\n                  {Object.entries(suggestedQuestions).map(([category, questions]) => (\n                    <div key={category}>\n                      <h5 className=\"font-medium mb-2 capitalize\">{category.replace(/([A-Z])/g, ' $1').trim()}</h5>\n                      <div className=\"space-y-1\">\n                        {questions.map((question, index) => (\n                          <div key={index} className=\"text-sm text-green-700 flex items-start gap-2\">\n                            <span className=\"text-green-600\">•</span>\n                            <span>{question}</span>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"ml-auto text-green-600 hover:text-green-800\"\n                              onClick={() => addToArray(setDocumentPrep, 'questionsList', question)}\n                              data-testid={`button-add-suggested-${category}-${index}`}\n                            >\n                              <Plus className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Program Summary Tab */}\n        <TabsContent value=\"summary\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Star className=\"w-5 h-5\" />\n                Your 6-Week Program Summary\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Create a comprehensive summary of your program experience to share with NHS services\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label>Techniques that have been most helpful</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mt-2\">\n                  {helpfulTechniquesOptions.map((technique) => (\n                    <div key={technique} className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        id={`technique-${technique}`}\n                        checked={programSummary.helpfulTechniques.includes(technique)}\n                        onCheckedChange={() => toggleArrayItem(setProgramSummary, 'helpfulTechniques', technique)}\n                        data-testid={`checkbox-technique-${technique.replace(/\\s+/g, '-').toLowerCase()}`}\n                      />\n                      <label htmlFor={`technique-${technique}`} className=\"text-sm cursor-pointer\">\n                        {technique}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label>Situations you've successfully managed</Label>\n                <div className=\"space-y-2 mt-2\">\n                  {programSummary.successfulSituations.map((situation, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-green-50 rounded\">\n                      <span className=\"text-sm\">{situation}</span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => removeFromArray(setProgramSummary, 'successfulSituations', index)}\n                        data-testid={`button-remove-situation-${index}`}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex gap-2 mt-2\">\n                  <Input\n                    placeholder=\"Describe a situation you've successfully managed...\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        addToArray(setProgramSummary, 'successfulSituations', (e.target as HTMLInputElement).value);\n                        (e.target as HTMLInputElement).value = '';\n                      }\n                    }}\n                    data-testid=\"input-add-situation\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={(e) => {\n                      const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                      addToArray(setProgramSummary, 'successfulSituations', input.value);\n                      input.value = '';\n                    }}\n                    data-testid=\"button-add-situation\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label>Areas where you still need support</Label>\n                <div className=\"space-y-2 mt-2\">\n                  {programSummary.supportNeeded.map((area, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-orange-50 rounded\">\n                      <span className=\"text-sm\">{area}</span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => removeFromArray(setProgramSummary, 'supportNeeded', index)}\n                        data-testid={`button-remove-support-${index}`}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex gap-2 mt-2\">\n                  <Input\n                    placeholder=\"Add an area where you need continued support...\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        addToArray(setProgramSummary, 'supportNeeded', (e.target as HTMLInputElement).value);\n                        (e.target as HTMLInputElement).value = '';\n                      }\n                    }}\n                    data-testid=\"input-add-support\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={(e) => {\n                      const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                      addToArray(setProgramSummary, 'supportNeeded', input.value);\n                      input.value = '';\n                    }}\n                    data-testid=\"button-add-support\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"current-functioning\">Your current anxiety levels and daily functioning</Label>\n                <Textarea\n                  id=\"current-functioning\"\n                  placeholder=\"Describe how anxiety affects your daily life now compared to when you started...\"\n                  value={programSummary.currentFunctioning}\n                  onChange={(e) => setProgramSummary(prev => ({ ...prev, currentFunctioning: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-current-functioning\"\n                />\n              </div>\n\n              <div>\n                <Label>Goals for ongoing treatment</Label>\n                <div className=\"space-y-2 mt-2\">\n                  {programSummary.treatmentGoals.map((goal, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-purple-50 rounded\">\n                      <span className=\"text-sm\">{goal}</span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => removeFromArray(setProgramSummary, 'treatmentGoals', index)}\n                        data-testid={`button-remove-goal-${index}`}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex gap-2 mt-2\">\n                  <Input\n                    placeholder=\"Add a goal for your ongoing treatment...\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        addToArray(setProgramSummary, 'treatmentGoals', (e.target as HTMLInputElement).value);\n                        (e.target as HTMLInputElement).value = '';\n                      }\n                    }}\n                    data-testid=\"input-add-goal\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={(e) => {\n                      const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                      addToArray(setProgramSummary, 'treatmentGoals', input.value);\n                      input.value = '';\n                    }}\n                    data-testid=\"button-add-goal\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Assessment Preparation Tab */}\n        <TabsContent value=\"assessment\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"w-5 h-5\" />\n                Assessment Preparation\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Prepare the information you'll need to share during your NHS assessment\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label>Specific anxiety symptoms and their frequency</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mt-2\">\n                  {currentSymptoms.map((symptom) => (\n                    <div key={symptom} className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        id={`symptom-${symptom}`}\n                        checked={assessmentPrep.symptoms.includes(symptom)}\n                        onCheckedChange={() => toggleArrayItem(setAssessmentPrep, 'symptoms', symptom)}\n                        data-testid={`checkbox-symptom-${symptom.replace(/\\s+/g, '-').toLowerCase()}`}\n                      />\n                      <label htmlFor={`symptom-${symptom}`} className=\"text-sm cursor-pointer\">\n                        {symptom}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label>Triggers you've identified</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mt-2\">\n                  {anxietyTriggers.map((trigger) => (\n                    <div key={trigger} className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        id={`trigger-${trigger}`}\n                        checked={assessmentPrep.triggers.includes(trigger)}\n                        onCheckedChange={() => toggleArrayItem(setAssessmentPrep, 'triggers', trigger)}\n                        data-testid={`checkbox-trigger-${trigger.replace(/\\s+/g, '-').toLowerCase()}`}\n                      />\n                      <label htmlFor={`trigger-${trigger}`} className=\"text-sm cursor-pointer\">\n                        {trigger}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label>Coping strategies you've developed</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mt-2\">\n                  {copingStrategiesUsed.map((strategy) => (\n                    <div key={strategy} className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        id={`strategy-${strategy}`}\n                        checked={assessmentPrep.copingStrategies.includes(strategy)}\n                        onCheckedChange={() => toggleArrayItem(setAssessmentPrep, 'copingStrategies', strategy)}\n                        data-testid={`checkbox-strategy-${strategy.replace(/\\s+/g, '-').toLowerCase()}`}\n                      />\n                      <label htmlFor={`strategy-${strategy}`} className=\"text-sm cursor-pointer\">\n                        {strategy}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"progress-made\">Progress you've made and challenges remaining</Label>\n                <Textarea\n                  id=\"progress-made\"\n                  placeholder=\"Describe the progress you've made and what challenges you still face...\"\n                  value={assessmentPrep.progressMade}\n                  onChange={(e) => setAssessmentPrep(prev => ({ ...prev, progressMade: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-progress-made\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"ongoing-challenges\">Current challenges and difficulties</Label>\n                <Textarea\n                  id=\"ongoing-challenges\"\n                  placeholder=\"What aspects of anxiety management are still challenging for you?\"\n                  value={assessmentPrep.challenges}\n                  onChange={(e) => setAssessmentPrep(prev => ({ ...prev, challenges: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-ongoing-challenges\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"values-goals\">Your values and treatment goals</Label>\n                <Textarea\n                  id=\"values-goals\"\n                  placeholder=\"What are your core values and what do you hope to achieve in treatment?\"\n                  value={assessmentPrep.values}\n                  onChange={(e) => setAssessmentPrep(prev => ({ ...prev, values: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-values-goals\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"support-systems\">Support systems you have in place</Label>\n                <Textarea\n                  id=\"support-systems\"\n                  placeholder=\"Describe your family, friends, and other support systems...\"\n                  value={assessmentPrep.supportSystems}\n                  onChange={(e) => setAssessmentPrep(prev => ({ ...prev, supportSystems: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-support-systems\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* NHS Readiness Assessment */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"w-5 h-5\" />\n                NHS Transition Readiness\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Rate your readiness for NHS mental health services (1-10 scale)\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">\n                    Using anxiety management tools independently: {nhsReadiness.independentTools}/10\n                  </Label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"10\"\n                    value={nhsReadiness.independentTools}\n                    onChange={(e) => setNhsReadiness(prev => ({ ...prev, independentTools: parseInt(e.target.value) }))}\n                    className=\"w-full mt-2\"\n                    data-testid=\"slider-independent-tools\"\n                  />\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium\">\n                    Handling setbacks without professional support: {nhsReadiness.handleSetbacks}/10\n                  </Label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"10\"\n                    value={nhsReadiness.handleSetbacks}\n                    onChange={(e) => setNhsReadiness(prev => ({ ...prev, handleSetbacks: parseInt(e.target.value) }))}\n                    className=\"w-full mt-2\"\n                    data-testid=\"slider-handle-setbacks\"\n                  />\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium\">\n                    Maintaining progress during stressful periods: {nhsReadiness.maintainProgress}/10\n                  </Label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"10\"\n                    value={nhsReadiness.maintainProgress}\n                    onChange={(e) => setNhsReadiness(prev => ({ ...prev, maintainProgress: parseInt(e.target.value) }))}\n                    className=\"w-full mt-2\"\n                    data-testid=\"slider-maintain-progress\"\n                  />\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium\">\n                    Transitioning to NHS mental health services: {nhsReadiness.transitionReadiness}/10\n                  </Label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"10\"\n                    value={nhsReadiness.transitionReadiness}\n                    onChange={(e) => setNhsReadiness(prev => ({ ...prev, transitionReadiness: parseInt(e.target.value) }))}\n                    className=\"w-full mt-2\"\n                    data-testid=\"slider-transition-readiness\"\n                  />\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium\">\n                    Continuing your anxiety management journey: {nhsReadiness.continueJourney}/10\n                  </Label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"10\"\n                    value={nhsReadiness.continueJourney}\n                    onChange={(e) => setNhsReadiness(prev => ({ ...prev, continueJourney: parseInt(e.target.value) }))}\n                    className=\"w-full mt-2\"\n                    data-testid=\"slider-continue-journey\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"readiness-confidence\">What gives you confidence in your readiness?</Label>\n                <Textarea\n                  id=\"readiness-confidence\"\n                  placeholder=\"Describe what makes you feel ready for the transition and any concerns you have...\"\n                  value={nhsReadiness.confidence}\n                  onChange={(e) => setNhsReadiness(prev => ({ ...prev, confidence: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-readiness-confidence\"\n                />\n              </div>\n\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Award className=\"w-5 h-5 text-blue-600\" />\n                  <h4 className=\"font-semibold text-blue-800\">Overall NHS Readiness Score</h4>\n                </div>\n                <div className=\"text-3xl font-bold text-blue-600\">{calculateOverallReadiness()}%</div>\n                <Progress value={calculateOverallReadiness()} className=\"mt-2\" />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Treatment Options Tab */}\n        <TabsContent value=\"treatment\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BookOpen className=\"w-5 h-5\" />\n                Understanding Treatment Options\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Learn about treatment options and prepare your preferences\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"cbt-understanding\">Your understanding of CBT and how it relates to your experience</Label>\n                <Textarea\n                  id=\"cbt-understanding\"\n                  placeholder=\"Describe what you know about CBT and how it might build on what you've learned...\"\n                  value={treatmentKnowledge.cbtUnderstanding}\n                  onChange={(e) => setTreatmentKnowledge(prev => ({ ...prev, cbtUnderstanding: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-cbt-understanding\"\n                />\n              </div>\n\n              <div>\n                <Label>Other therapy approaches you're interested in learning about</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mt-2\">\n                  {otherTherapyOptions.map((therapy) => (\n                    <div key={therapy} className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        id={`therapy-${therapy}`}\n                        checked={treatmentKnowledge.otherTherapies.includes(therapy)}\n                        onCheckedChange={() => toggleArrayItem(setTreatmentKnowledge, 'otherTherapies', therapy)}\n                        data-testid={`checkbox-therapy-${therapy.replace(/\\s+/g, '-').toLowerCase()}`}\n                      />\n                      <label htmlFor={`therapy-${therapy}`} className=\"text-sm cursor-pointer\">\n                        {therapy}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label>Questions about medication</Label>\n                <div className=\"space-y-2 mt-2\">\n                  {treatmentKnowledge.medicationQuestions.map((question, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-yellow-50 rounded\">\n                      <span className=\"text-sm\">{question}</span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => removeFromArray(setTreatmentKnowledge, 'medicationQuestions', index)}\n                        data-testid={`button-remove-med-question-${index}`}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex gap-2 mt-2\">\n                  <Input\n                    placeholder=\"Add a question about medication...\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        addToArray(setTreatmentKnowledge, 'medicationQuestions', (e.target as HTMLInputElement).value);\n                        (e.target as HTMLInputElement).value = '';\n                      }\n                    }}\n                    data-testid=\"input-add-med-question\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={(e) => {\n                      const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                      addToArray(setTreatmentKnowledge, 'medicationQuestions', input.value);\n                      input.value = '';\n                    }}\n                    data-testid=\"button-add-med-question\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"group-therapy-interest\">Interest in group therapy</Label>\n                <Textarea\n                  id=\"group-therapy-interest\"\n                  placeholder=\"How do you feel about group therapy? Any concerns or interests?\"\n                  value={treatmentKnowledge.groupTherapyInterest}\n                  onChange={(e) => setTreatmentKnowledge(prev => ({ ...prev, groupTherapyInterest: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-group-therapy-interest\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"treatment-preferences\">Your treatment preferences and concerns</Label>\n                <Textarea\n                  id=\"treatment-preferences\"\n                  placeholder=\"What kind of treatment approach feels right for you? Any concerns or preferences?\"\n                  value={treatmentKnowledge.treatmentPreferences}\n                  onChange={(e) => setTreatmentKnowledge(prev => ({ ...prev, treatmentPreferences: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-treatment-preferences\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Ongoing Support Tab */}\n        <TabsContent value=\"ongoing\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"w-5 h-5\" />\n                Maintaining Progress While Waiting\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Plan how to continue your progress during any waiting period\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label>Daily practices you'll maintain</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mt-2\">\n                  {dailyPracticeOptions.map((practice) => (\n                    <div key={practice} className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        id={`daily-${practice}`}\n                        checked={ongoingPrep.dailyPractices.includes(practice)}\n                        onCheckedChange={() => toggleArrayItem(setOngoingPrep, 'dailyPractices', practice)}\n                        data-testid={`checkbox-daily-${practice.replace(/\\s+/g, '-').toLowerCase()}`}\n                      />\n                      <label htmlFor={`daily-${practice}`} className=\"text-sm cursor-pointer\">\n                        {practice}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label>Social connections and support</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mt-2\">\n                  {socialConnectionOptions.map((connection) => (\n                    <div key={connection} className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        id={`social-${connection}`}\n                        checked={ongoingPrep.socialConnections.includes(connection)}\n                        onCheckedChange={() => toggleArrayItem(setOngoingPrep, 'socialConnections', connection)}\n                        data-testid={`checkbox-social-${connection.replace(/\\s+/g, '-').toLowerCase()}`}\n                      />\n                      <label htmlFor={`social-${connection}`} className=\"text-sm cursor-pointer\">\n                        {connection}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label>Learning and development resources</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mt-2\">\n                  {learningResourceOptions.map((resource) => (\n                    <div key={resource} className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        id={`learning-${resource}`}\n                        checked={ongoingPrep.learningResources.includes(resource)}\n                        onCheckedChange={() => toggleArrayItem(setOngoingPrep, 'learningResources', resource)}\n                        data-testid={`checkbox-learning-${resource.replace(/\\s+/g, '-').toLowerCase()}`}\n                      />\n                      <label htmlFor={`learning-${resource}`} className=\"text-sm cursor-pointer\">\n                        {resource}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"progress-monitoring\">How you'll monitor and document your progress</Label>\n                <Textarea\n                  id=\"progress-monitoring\"\n                  placeholder=\"Describe how you'll track your progress and prepare updates for your first NHS appointment...\"\n                  value={ongoingPrep.progressMonitoring}\n                  onChange={(e) => setOngoingPrep(prev => ({ ...prev, progressMonitoring: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-progress-monitoring\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Self-Advocacy Tab */}\n        <TabsContent value=\"advocacy\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                Self-Advocacy and Rights\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Prepare to advocate for yourself and understand your rights\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"treatment-preferences-advocacy\">Your treatment preferences and how to express them</Label>\n                <Textarea\n                  id=\"treatment-preferences-advocacy\"\n                  placeholder=\"What are your preferences for treatment approach, frequency, format, etc.?\"\n                  value={advocacyPrep.treatmentPreferences}\n                  onChange={(e) => setAdvocacyPrep(prev => ({ ...prev, treatmentPreferences: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-treatment-preferences-advocacy\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"previous-experiences\">Previous mental health experiences (positive and negative)</Label>\n                <Textarea\n                  id=\"previous-experiences\"\n                  placeholder=\"Describe any previous therapy or mental health support and what worked or didn't work...\"\n                  value={advocacyPrep.previousExperiences}\n                  onChange={(e) => setAdvocacyPrep(prev => ({ ...prev, previousExperiences: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-previous-experiences\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"concerns\">Concerns or anxiety about NHS services</Label>\n                <Textarea\n                  id=\"concerns\"\n                  placeholder=\"What concerns do you have about NHS mental health services? How can these be addressed?\"\n                  value={advocacyPrep.concerns}\n                  onChange={(e) => setAdvocacyPrep(prev => ({ ...prev, concerns: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-concerns\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"support-person\">Support person for appointments</Label>\n                <Input\n                  id=\"support-person\"\n                  placeholder=\"Name of someone who could accompany you to appointments if needed...\"\n                  value={advocacyPrep.supportPerson}\n                  onChange={(e) => setAdvocacyPrep(prev => ({ ...prev, supportPerson: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"input-support-person\"\n                />\n              </div>\n\n              <div>\n                <Label>Specific advocacy questions or requests</Label>\n                <div className=\"space-y-2 mt-2\">\n                  {advocacyPrep.questions.map((question, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-purple-50 rounded\">\n                      <span className=\"text-sm\">{question}</span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => removeFromArray(setAdvocacyPrep, 'questions', index)}\n                        data-testid={`button-remove-advocacy-question-${index}`}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex gap-2 mt-2\">\n                  <Input\n                    placeholder=\"Add an advocacy question or request...\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        addToArray(setAdvocacyPrep, 'questions', (e.target as HTMLInputElement).value);\n                        (e.target as HTMLInputElement).value = '';\n                      }\n                    }}\n                    data-testid=\"input-add-advocacy-question\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={(e) => {\n                      const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                      addToArray(setAdvocacyPrep, 'questions', input.value);\n                      input.value = '';\n                    }}\n                    data-testid=\"button-add-advocacy-question\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2 text-blue-800\">Your Rights in NHS Mental Health Services</h4>\n                <div className=\"space-y-2 text-sm text-blue-700\">\n                  <div className=\"flex items-start gap-2\">\n                    <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                    <span>Right to be involved in decisions about your care</span>\n                  </div>\n                  <div className=\"flex items-start gap-2\">\n                    <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                    <span>Right to ask for a second opinion if needed</span>\n                  </div>\n                  <div className=\"flex items-start gap-2\">\n                    <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                    <span>Right to request a different therapist if the fit isn't right</span>\n                  </div>\n                  <div className=\"flex items-start gap-2\">\n                    <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                    <span>Right to access your medical records</span>\n                  </div>\n                  <div className=\"flex items-start gap-2\">\n                    <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                    <span>Right to complain and seek support from Patient Advice and Liaison Service (PALS)</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Export Section */}\n      <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-green-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <ArrowRight className=\"w-5 h-5 text-green-500\" />\n            You're Ready for NHS Mental Health Services!\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{getCompletenessPercentage()}%</div>\n              <div className=\"text-sm text-muted-foreground\">Preparation Complete</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{calculateOverallReadiness()}%</div>\n              <div className=\"text-sm text-muted-foreground\">NHS Readiness</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {programSummary.helpfulTechniques.length + assessmentPrep.copingStrategies.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Skills & Strategies</div>\n            </div>\n          </div>\n          \n          <div className=\"bg-green-50 p-4 rounded-lg mb-6\">\n            <h4 className=\"font-semibold mb-2 text-green-800\">Your Strengths Going Forward:</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-green-700\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4\" />\n                <span>6 weeks of anxiety management skills</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4\" />\n                <span>Personal toolkit of proven techniques</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4\" />\n                <span>Understanding of your triggers and patterns</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4\" />\n                <span>Experience with exposure and behavioral change</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4\" />\n                <span>Clear values and treatment goals</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4\" />\n                <span>Relapse prevention plan</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-center\">\n            <Button onClick={exportNhsPrep} className=\"gap-2\" size=\"lg\">\n              <Download className=\"w-4 h-4\" />\n              Export Your Complete NHS Preparation Guide\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":58366},"client/src/components/ProgressTracker.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  TrendingUp, \n  Star, \n  Target, \n  Heart, \n  Brain, \n  Users,\n  Briefcase,\n  Home,\n  CheckCircle,\n  Download,\n  BarChart\n} from \"lucide-react\";\n\ninterface WeeklyRating {\n  week: number;\n  helpfulness: number;\n  keyTakeaway: string;\n  mostHelpfulTechnique: string;\n  improvementArea: string;\n}\n\ninterface BeforeAfterRating {\n  category: string;\n  icon: any;\n  before: number;\n  after: number;\n  changes: string;\n}\n\ninterface ReadinessRating {\n  area: string;\n  rating: number;\n  confidence: string;\n}\n\ninterface SuccessStory {\n  title: string;\n  situation: string;\n  skillsUsed: string[];\n  outcome: string;\n  learnings: string;\n}\n\nexport function ProgressTracker() {\n  const [weeklyRatings, setWeeklyRatings] = useState<WeeklyRating[]>([\n    { week: 1, helpfulness: 5, keyTakeaway: \"\", mostHelpfulTechnique: \"\", improvementArea: \"\" },\n    { week: 2, helpfulness: 5, keyTakeaway: \"\", mostHelpfulTechnique: \"\", improvementArea: \"\" },\n    { week: 3, helpfulness: 5, keyTakeaway: \"\", mostHelpfulTechnique: \"\", improvementArea: \"\" },\n    { week: 4, helpfulness: 5, keyTakeaway: \"\", mostHelpfulTechnique: \"\", improvementArea: \"\" },\n    { week: 5, helpfulness: 5, keyTakeaway: \"\", mostHelpfulTechnique: \"\", improvementArea: \"\" }\n  ]);\n\n  const [beforeAfterRatings, setBeforeAfterRatings] = useState<BeforeAfterRating[]>([\n    { category: \"Anxiety Management\", icon: Brain, before: 3, after: 7, changes: \"\" },\n    { category: \"Daily Functioning\", icon: Home, before: 4, after: 8, changes: \"\" },\n    { category: \"Confidence\", icon: Star, before: 3, after: 7, changes: \"\" },\n    { category: \"Relationships\", icon: Users, before: 5, after: 8, changes: \"\" },\n    { category: \"Work/School Performance\", icon: Briefcase, before: 4, after: 7, changes: \"\" },\n    { category: \"Overall Quality of Life\", icon: Heart, before: 4, after: 8, changes: \"\" }\n  ]);\n\n  const [readinessRatings, setReadinessRatings] = useState<ReadinessRating[]>([\n    { area: \"Using anxiety management tools independently\", rating: 7, confidence: \"\" },\n    { area: \"Handling setbacks without professional support\", rating: 6, confidence: \"\" },\n    { area: \"Maintaining progress during stressful periods\", rating: 6, confidence: \"\" },\n    { area: \"Transitioning to NHS mental health services\", rating: 8, confidence: \"\" },\n    { area: \"Continuing your anxiety management journey\", rating: 8, confidence: \"\" }\n  ]);\n\n  const [currentChallenges, setCurrentChallenges] = useState({\n    symptoms: \"\",\n    situations: \"\",\n    strategies: \"\",\n    continueWorking: \"\",\n    additionalSupport: \"\"\n  });\n\n  const [keyInsights, setKeyInsights] = useState({\n    mostImportant: \"\",\n    adviceToOthers: \"\",\n    motivation: \"\",\n    futureGrowth: \"\",\n    proudestAchievement: \"\",\n    rememberApply: \"\"\n  });\n\n  const [successStories, setSuccessStories] = useState<SuccessStory[]>([\n    { title: \"\", situation: \"\", skillsUsed: [], outcome: \"\", learnings: \"\" },\n    { title: \"\", situation: \"\", skillsUsed: [], outcome: \"\", learnings: \"\" },\n    { title: \"\", situation: \"\", skillsUsed: [], outcome: \"\", learnings: \"\" }\n  ]);\n\n  const [reflectionAnswers, setReflectionAnswers] = useState<string[]>(\n    new Array(6).fill(\"\")\n  );\n\n  const weekTopics = [\n    { week: 1, title: \"Understanding Anxiety\", color: \"bg-blue-100 text-blue-800\" },\n    { week: 2, title: \"Breathing & Relaxation\", color: \"bg-green-100 text-green-800\" },\n    { week: 3, title: \"Cognitive Strategies\", color: \"bg-purple-100 text-purple-800\" },\n    { week: 4, title: \"Mindfulness & Grounding\", color: \"bg-orange-100 text-orange-800\" },\n    { week: 5, title: \"Behavioral Activation\", color: \"bg-pink-100 text-pink-800\" }\n  ];\n\n  const updateWeeklyRating = (weekIndex: number, field: keyof WeeklyRating, value: any) => {\n    setWeeklyRatings(prev => prev.map((rating, index) => \n      index === weekIndex ? { ...rating, [field]: value } : rating\n    ));\n  };\n\n  const updateBeforeAfterRating = (categoryIndex: number, field: 'before' | 'after' | 'changes', value: any) => {\n    setBeforeAfterRatings(prev => prev.map((rating, index) => \n      index === categoryIndex ? { ...rating, [field]: value } : rating\n    ));\n  };\n\n  const updateReadinessRating = (areaIndex: number, field: 'rating' | 'confidence', value: any) => {\n    setReadinessRatings(prev => prev.map((rating, index) => \n      index === areaIndex ? { ...rating, [field]: value } : rating\n    ));\n  };\n\n  const updateSuccessStory = (storyIndex: number, field: keyof SuccessStory, value: any) => {\n    setSuccessStories(prev => prev.map((story, index) => \n      index === storyIndex ? { ...story, [field]: value } : story\n    ));\n  };\n\n  const addSkillToStory = (storyIndex: number, skill: string) => {\n    if (skill.trim()) {\n      setSuccessStories(prev => prev.map((story, index) => \n        index === storyIndex ? { \n          ...story, \n          skillsUsed: [...story.skillsUsed, skill.trim()] \n        } : story\n      ));\n    }\n  };\n\n  const removeSkillFromStory = (storyIndex: number, skillIndex: number) => {\n    setSuccessStories(prev => prev.map((story, index) => \n      index === storyIndex ? { \n        ...story, \n        skillsUsed: story.skillsUsed.filter((_, idx) => idx !== skillIndex) \n      } : story\n    ));\n  };\n\n  const calculateOverallProgress = () => {\n    const avgWeeklyRating = weeklyRatings.reduce((sum, rating) => sum + rating.helpfulness, 0) / weeklyRatings.length;\n    const avgImprovement = beforeAfterRatings.reduce((sum, rating) => sum + (rating.after - rating.before), 0) / beforeAfterRatings.length;\n    const avgReadiness = readinessRatings.reduce((sum, rating) => sum + rating.rating, 0) / readinessRatings.length;\n    \n    return Math.round(((avgWeeklyRating + avgImprovement + avgReadiness) / 3) * 10);\n  };\n\n  const exportProgress = () => {\n    const progressData = {\n      weeklyRatings,\n      beforeAfterRatings,\n      readinessRatings,\n      currentChallenges,\n      keyInsights,\n      successStories,\n      reflectionAnswers,\n      overallProgress: calculateOverallProgress(),\n      completedDate: new Date().toISOString()\n    };\n\n    const dataStr = JSON.stringify(progressData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `anxiety-program-progress-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const reflectionPrompts = [\n    \"What is the biggest change you've made during this program?\",\n    \"Which week was most helpful and why?\",\n    \"What advice would you give to someone starting this journey?\",\n    \"How do you want to continue growing after this program ends?\",\n    \"What are you most proud of achieving in these 6 weeks?\",\n    \"How will you remember and apply what you've learned?\"\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Overall Progress Header */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n              <BarChart className=\"w-6 h-6 text-blue-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl\">Your 6-Week Progress Assessment</CardTitle>\n              <p className=\"text-muted-foreground\">Comprehensive review of your anxiety management journey</p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium\">Overall Progress Score</span>\n                <span className=\"text-2xl font-bold text-blue-600\">{calculateOverallProgress()}%</span>\n              </div>\n              <Progress value={calculateOverallProgress()} className=\"h-3\" />\n            </div>\n            <Button onClick={exportProgress} variant=\"outline\" className=\"gap-2\">\n              <Download className=\"w-4 h-4\" />\n              Export Progress\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Part 1: Weekly Skills Assessment */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"w-5 h-5\" />\n            Part 1: Weekly Skills Learning Assessment\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Rate how helpful each week was and identify your key takeaways\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {weeklyRatings.map((rating, index) => {\n            const weekTopic = weekTopics[index];\n            return (\n              <Card key={rating.week} className=\"border-l-4 border-l-blue-400\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Badge className={weekTopic.color}>\n                      Week {rating.week}\n                    </Badge>\n                    <h4 className=\"font-semibold\">{weekTopic.title}</h4>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">\n                      Helpfulness Rating: {rating.helpfulness}/10\n                    </Label>\n                    <Slider\n                      value={[rating.helpfulness]}\n                      onValueChange={(value) => updateWeeklyRating(index, 'helpfulness', value[0])}\n                      max={10}\n                      min={1}\n                      step={1}\n                      className=\"mt-2\"\n                      data-testid={`slider-week-${rating.week}-helpfulness`}\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor={`week-${rating.week}-takeaway`}>Most Valuable Insight</Label>\n                      <Textarea\n                        id={`week-${rating.week}-takeaway`}\n                        placeholder=\"What was your biggest insight from this week?\"\n                        value={rating.keyTakeaway}\n                        onChange={(e) => updateWeeklyRating(index, 'keyTakeaway', e.target.value)}\n                        className=\"mt-1\"\n                        data-testid={`textarea-week-${rating.week}-takeaway`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor={`week-${rating.week}-technique`}>Most Helpful Technique</Label>\n                      <Textarea\n                        id={`week-${rating.week}-technique`}\n                        placeholder=\"Which specific technique works best for you?\"\n                        value={rating.mostHelpfulTechnique}\n                        onChange={(e) => updateWeeklyRating(index, 'mostHelpfulTechnique', e.target.value)}\n                        className=\"mt-1\"\n                        data-testid={`textarea-week-${rating.week}-technique`}\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor={`week-${rating.week}-improvement`}>Area for Continued Practice</Label>\n                    <Textarea\n                      id={`week-${rating.week}-improvement`}\n                      placeholder=\"What from this week needs more practice?\"\n                      value={rating.improvementArea}\n                      onChange={(e) => updateWeeklyRating(index, 'improvementArea', e.target.value)}\n                      className=\"mt-1\"\n                      data-testid={`textarea-week-${rating.week}-improvement`}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </CardContent>\n      </Card>\n\n      {/* Part 2: Before/After Comparison */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5\" />\n            Part 2: Before & After Comparison\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Rate each area before starting the program vs. now (1-10 scale)\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {beforeAfterRatings.map((rating, index) => {\n            const IconComponent = rating.icon;\n            const improvement = rating.after - rating.before;\n            \n            return (\n              <Card key={rating.category} className=\"border-l-4 border-l-green-400\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <IconComponent className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold\">{rating.category}</h4>\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <span>Improvement: +{improvement} points</span>\n                        {improvement >= 3 && (\n                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                            Significant Progress\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label className=\"text-sm font-medium\">Before Program: {rating.before}/10</Label>\n                      <Slider\n                        value={[rating.before]}\n                        onValueChange={(value) => updateBeforeAfterRating(index, 'before', value[0])}\n                        max={10}\n                        min={1}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid={`slider-${rating.category.replace(/\\s+/g, '-').toLowerCase()}-before`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-sm font-medium\">Now: {rating.after}/10</Label>\n                      <Slider\n                        value={[rating.after]}\n                        onValueChange={(value) => updateBeforeAfterRating(index, 'after', value[0])}\n                        max={10}\n                        min={1}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid={`slider-${rating.category.replace(/\\s+/g, '-').toLowerCase()}-after`}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4\">\n                    <Label htmlFor={`changes-${index}`}>Specific Changes You've Noticed</Label>\n                    <Textarea\n                      id={`changes-${index}`}\n                      placeholder=\"Describe the specific improvements in this area...\"\n                      value={rating.changes}\n                      onChange={(e) => updateBeforeAfterRating(index, 'changes', e.target.value)}\n                      className=\"mt-1\"\n                      data-testid={`textarea-changes-${rating.category.replace(/\\s+/g, '-').toLowerCase()}`}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </CardContent>\n      </Card>\n\n      {/* Part 3: Current Challenges */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Part 3: Current Challenges Assessment</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Identify areas that still need attention and support\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"current-symptoms\">Anxiety symptoms you still struggle with</Label>\n            <Textarea\n              id=\"current-symptoms\"\n              placeholder=\"Which anxiety symptoms are still challenging for you?\"\n              value={currentChallenges.symptoms}\n              onChange={(e) => setCurrentChallenges(prev => ({ ...prev, symptoms: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-current-symptoms\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"difficult-situations\">Situations that remain difficult</Label>\n            <Textarea\n              id=\"difficult-situations\"\n              placeholder=\"What situations or environments still feel challenging?\"\n              value={currentChallenges.situations}\n              onChange={(e) => setCurrentChallenges(prev => ({ ...prev, situations: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-difficult-situations\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"strategies-practice\">Coping strategies that need more practice</Label>\n            <Textarea\n              id=\"strategies-practice\"\n              placeholder=\"Which techniques do you want to continue working on?\"\n              value={currentChallenges.strategies}\n              onChange={(e) => setCurrentChallenges(prev => ({ ...prev, strategies: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-strategies-practice\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"continue-working\">What you'd like to continue working on</Label>\n            <Textarea\n              id=\"continue-working\"\n              placeholder=\"What goals do you have for continued growth?\"\n              value={currentChallenges.continueWorking}\n              onChange={(e) => setCurrentChallenges(prev => ({ ...prev, continueWorking: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-continue-working\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"additional-support\">Where you might need additional support</Label>\n            <Textarea\n              id=\"additional-support\"\n              placeholder=\"What kind of additional help or resources would be valuable?\"\n              value={currentChallenges.additionalSupport}\n              onChange={(e) => setCurrentChallenges(prev => ({ ...prev, additionalSupport: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-additional-support\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Part 4: Future Readiness */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Part 4: Future Readiness Assessment</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Rate your readiness in key areas (1-10 scale)\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {readinessRatings.map((rating, index) => (\n            <div key={rating.area} className=\"space-y-3\">\n              <div>\n                <Label className=\"text-sm font-medium\">\n                  {rating.area}: {rating.rating}/10\n                </Label>\n                <Slider\n                  value={[rating.rating]}\n                  onValueChange={(value) => updateReadinessRating(index, 'rating', value[0])}\n                  max={10}\n                  min={1}\n                  step={1}\n                  className=\"mt-2\"\n                  data-testid={`slider-readiness-${index}`}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor={`confidence-${index}`}>What gives you confidence in this area?</Label>\n                <Textarea\n                  id={`confidence-${index}`}\n                  placeholder=\"Describe your confidence and any concerns...\"\n                  value={rating.confidence}\n                  onChange={(e) => updateReadinessRating(index, 'confidence', e.target.value)}\n                  className=\"mt-1\"\n                  data-testid={`textarea-confidence-${index}`}\n                />\n              </div>\n              \n              {index < readinessRatings.length - 1 && <Separator />}\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Part 5: Key Insights & Wisdom */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Part 5: Key Insights & Wisdom</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Capture your most important learnings and insights\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"most-important\">Most important thing you've learned about yourself</Label>\n            <Textarea\n              id=\"most-important\"\n              placeholder=\"What's the most valuable insight you've gained about yourself?\"\n              value={keyInsights.mostImportant}\n              onChange={(e) => setKeyInsights(prev => ({ ...prev, mostImportant: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-most-important\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"advice-others\">Advice for someone starting this program</Label>\n            <Textarea\n              id=\"advice-others\"\n              placeholder=\"What would you tell someone just beginning this journey?\"\n              value={keyInsights.adviceToOthers}\n              onChange={(e) => setKeyInsights(prev => ({ ...prev, adviceToOthers: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-advice-others\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"motivation\">What keeps you motivated</Label>\n            <Textarea\n              id=\"motivation\"\n              placeholder=\"What motivates you to continue working on anxiety management?\"\n              value={keyInsights.motivation}\n              onChange={(e) => setKeyInsights(prev => ({ ...prev, motivation: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-motivation\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"future-growth\">How you want to continue growing</Label>\n            <Textarea\n              id=\"future-growth\"\n              placeholder=\"What are your goals for continued growth and development?\"\n              value={keyInsights.futureGrowth}\n              onChange={(e) => setKeyInsights(prev => ({ ...prev, futureGrowth: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-future-growth\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"proudest-achievement\">Proudest achievement in these 6 weeks</Label>\n            <Textarea\n              id=\"proudest-achievement\"\n              placeholder=\"What are you most proud of accomplishing?\"\n              value={keyInsights.proudestAchievement}\n              onChange={(e) => setKeyInsights(prev => ({ ...prev, proudestAchievement: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-proudest-achievement\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"remember-apply\">How you'll remember and apply what you've learned</Label>\n            <Textarea\n              id=\"remember-apply\"\n              placeholder=\"How will you keep these lessons alive in your daily life?\"\n              value={keyInsights.rememberApply}\n              onChange={(e) => setKeyInsights(prev => ({ ...prev, rememberApply: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-remember-apply\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Part 6: Success Stories */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Part 6: Success Stories</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Document specific situations where you successfully used your new skills\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {successStories.map((story, index) => (\n            <Card key={index} className=\"border-l-4 border-l-yellow-400\">\n              <CardHeader>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <h4 className=\"font-semibold\">Success Story #{index + 1}</h4>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor={`story-title-${index}`}>Story Title</Label>\n                  <Input\n                    id={`story-title-${index}`}\n                    placeholder=\"Give your success story a title...\"\n                    value={story.title}\n                    onChange={(e) => updateSuccessStory(index, 'title', e.target.value)}\n                    className=\"mt-1\"\n                    data-testid={`input-story-title-${index}`}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor={`story-situation-${index}`}>The Situation</Label>\n                  <Textarea\n                    id={`story-situation-${index}`}\n                    placeholder=\"Describe the challenging situation you faced...\"\n                    value={story.situation}\n                    onChange={(e) => updateSuccessStory(index, 'situation', e.target.value)}\n                    className=\"mt-1\"\n                    data-testid={`textarea-story-situation-${index}`}\n                  />\n                </div>\n                \n                <div>\n                  <Label>Skills You Used</Label>\n                  <div className=\"flex flex-wrap gap-2 mt-2 mb-2\">\n                    {story.skillsUsed.map((skill, skillIndex) => (\n                      <Badge \n                        key={skillIndex} \n                        variant=\"secondary\" \n                        className=\"cursor-pointer\"\n                        onClick={() => removeSkillFromStory(index, skillIndex)}\n                        data-testid={`badge-skill-${index}-${skillIndex}`}\n                      >\n                        {skill} ×\n                      </Badge>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Add a skill you used...\"\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          addSkillToStory(index, (e.target as HTMLInputElement).value);\n                          (e.target as HTMLInputElement).value = '';\n                        }\n                      }}\n                      data-testid={`input-add-skill-${index}`}\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={(e) => {\n                        const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                        addSkillToStory(index, input.value);\n                        input.value = '';\n                      }}\n                      data-testid={`button-add-skill-${index}`}\n                    >\n                      Add\n                    </Button>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor={`story-outcome-${index}`}>The Outcome</Label>\n                  <Textarea\n                    id={`story-outcome-${index}`}\n                    placeholder=\"What happened? How did it go?\"\n                    value={story.outcome}\n                    onChange={(e) => updateSuccessStory(index, 'outcome', e.target.value)}\n                    className=\"mt-1\"\n                    data-testid={`textarea-story-outcome-${index}`}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor={`story-learnings-${index}`}>What You Learned</Label>\n                  <Textarea\n                    id={`story-learnings-${index}`}\n                    placeholder=\"What insights or confidence did you gain from this experience?\"\n                    value={story.learnings}\n                    onChange={(e) => updateSuccessStory(index, 'learnings', e.target.value)}\n                    className=\"mt-1\"\n                    data-testid={`textarea-story-learnings-${index}`}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Part 7: Reflection Questions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Part 7: Deep Reflection Questions</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Take time to thoughtfully answer these reflection prompts\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {reflectionPrompts.map((prompt, index) => (\n            <div key={index} className=\"space-y-2\">\n              <Label htmlFor={`reflection-${index}`} className=\"text-sm font-medium\">\n                {index + 1}. {prompt}\n              </Label>\n              <Textarea\n                id={`reflection-${index}`}\n                placeholder=\"Take your time to reflect and write your thoughts...\"\n                value={reflectionAnswers[index]}\n                onChange={(e) => {\n                  const newAnswers = [...reflectionAnswers];\n                  newAnswers[index] = e.target.value;\n                  setReflectionAnswers(newAnswers);\n                }}\n                className=\"mt-1 min-h-[100px]\"\n                data-testid={`textarea-reflection-${index}`}\n              />\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Summary & Export */}\n      <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-green-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Star className=\"w-5 h-5 text-yellow-500\" />\n            Progress Summary\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {Math.round(weeklyRatings.reduce((sum, rating) => sum + rating.helpfulness, 0) / weeklyRatings.length * 10)}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Average Weekly Helpfulness</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                +{Math.round(beforeAfterRatings.reduce((sum, rating) => sum + (rating.after - rating.before), 0) / beforeAfterRatings.length * 10)}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Average Improvement</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {Math.round(readinessRatings.reduce((sum, rating) => sum + rating.rating, 0) / readinessRatings.length * 10)}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Readiness for Next Steps</div>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-center\">\n            <Button onClick={exportProgress} className=\"gap-2\" size=\"lg\">\n              <Download className=\"w-4 h-4\" />\n              Export Complete Progress Report\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":32719},"client/src/components/RelapsePlanner.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Shield, \n  AlertTriangle, \n  TrendingUp, \n  Users,\n  Phone,\n  Calendar,\n  Target,\n  Download,\n  Plus,\n  X,\n  CheckCircle,\n  Clock,\n  Heart,\n  Brain\n} from \"lucide-react\";\n\ninterface HighRiskSituation {\n  category: string;\n  situations: string[];\n  selected: string[];\n  personal: string[];\n}\n\ninterface WarningSigns {\n  yellow: string[];\n  orange: string[];\n  red: string[];\n}\n\ninterface ActionPlan {\n  yellow: string[];\n  orange: string[];\n  red: string[];\n}\n\ninterface SupportContact {\n  name: string;\n  relationship: string;\n  phone: string;\n  whenToContact: string;\n}\n\ninterface LongTermGoal {\n  timeframe: string;\n  goals: string[];\n}\n\ninterface ResilienceHabit {\n  category: string;\n  habits: string[];\n}\n\nexport function RelapsePlanner() {\n  const [highRiskSituations, setHighRiskSituations] = useState<HighRiskSituation[]>([\n    {\n      category: \"Life Transitions\",\n      situations: [\n        \"Starting a new job or school\",\n        \"Moving to a new home\",\n        \"Relationship changes (marriage, breakup, divorce)\",\n        \"Health issues (yours or family members)\",\n        \"Financial stress or changes\",\n        \"Loss or grief\"\n      ],\n      selected: [],\n      personal: []\n    },\n    {\n      category: \"Stressful Periods\",\n      situations: [\n        \"Work deadlines or high-pressure projects\",\n        \"Exam periods or important presentations\",\n        \"Family conflicts or relationship problems\",\n        \"Holiday seasons or special events\",\n        \"Anniversary dates of difficult events\",\n        \"Legal issues or major decisions\"\n      ],\n      selected: [],\n      personal: []\n    },\n    {\n      category: \"Physical Factors\",\n      situations: [\n        \"Illness or injury\",\n        \"Hormonal changes\",\n        \"Sleep deprivation\",\n        \"Medication changes\",\n        \"Substance use\",\n        \"Poor nutrition or dehydration\"\n      ],\n      selected: [],\n      personal: []\n    },\n    {\n      category: \"Environmental Factors\",\n      situations: [\n        \"Seasonal changes (especially winter)\",\n        \"Weather extremes\",\n        \"Major world events or news\",\n        \"Changes in living situation\",\n        \"Social isolation\",\n        \"Information overload\"\n      ],\n      selected: [],\n      personal: []\n    }\n  ]);\n\n  const [warningSigns, setWarningSigns] = useState<WarningSigns>({\n    yellow: [],\n    orange: [],\n    red: []\n  });\n\n  const [actionPlans, setActionPlans] = useState<ActionPlan>({\n    yellow: [],\n    orange: [],\n    red: []\n  });\n\n  const [supportContacts, setSupportContacts] = useState<SupportContact[]>([\n    { name: \"\", relationship: \"\", phone: \"\", whenToContact: \"\" },\n    { name: \"\", relationship: \"\", phone: \"\", whenToContact: \"\" },\n    { name: \"\", relationship: \"\", phone: \"\", whenToContact: \"\" }\n  ]);\n\n  const [professionalContacts, setProfessionalContacts] = useState({\n    gp: \"\",\n    mentalHealthProfessional: \"\",\n    crisisContact: \"\"\n  });\n\n  const [longTermGoals, setLongTermGoals] = useState<LongTermGoal[]>([\n    { timeframe: \"3 months\", goals: [] },\n    { timeframe: \"6 months\", goals: [] },\n    { timeframe: \"1 year\", goals: [] }\n  ]);\n\n  const [resilienceHabits, setResilienceHabits] = useState<ResilienceHabit[]>([\n    {\n      category: \"Daily\",\n      habits: []\n    },\n    {\n      category: \"Weekly\", \n      habits: []\n    },\n    {\n      category: \"Monthly\",\n      habits: []\n    }\n  ]);\n\n  const [personalizedPlan, setPersonalizedPlan] = useState({\n    topRiskSituations: [] as string[],\n    personalWarningSignsDescription: \"\",\n    emergencyPlan: \"\",\n    maintenanceStrategy: \"\",\n    completionNotes: \"\"\n  });\n\n  const warningSignOptions = {\n    yellow: [\n      \"Slight increase in worry or tension\",\n      \"Occasional difficulty sleeping\",\n      \"Minor avoidance of some activities\",\n      \"Feeling slightly more stressed than usual\",\n      \"Forgetting to use coping strategies occasionally\",\n      \"Mild physical tension\",\n      \"Slight changes in appetite\",\n      \"Feeling a bit overwhelmed\"\n    ],\n    orange: [\n      \"Noticeable increase in physical anxiety symptoms\",\n      \"Sleep problems several times per week\",\n      \"Avoiding important activities more frequently\",\n      \"Difficulty concentrating at work or school\",\n      \"Feeling overwhelmed by daily tasks\",\n      \"Increased irritability or mood changes\",\n      \"Physical symptoms becoming more frequent\",\n      \"Skipping social activities\"\n    ],\n    red: [\n      \"Severe anxiety symptoms interfering with daily life\",\n      \"Sleep problems most nights\",\n      \"Avoiding multiple important activities\",\n      \"Unable to function normally at work/school/home\",\n      \"Complete abandonment of coping strategies\",\n      \"Thoughts of self-harm or substance use\",\n      \"Panic attacks multiple times per week\",\n      \"Complete social isolation\"\n    ]\n  };\n\n  const defaultActionPlans = {\n    yellow: [\n      \"Increase daily mindfulness/breathing practice\",\n      \"Review and restart neglected coping strategies\",\n      \"Ensure good sleep hygiene and self-care\",\n      \"Reach out to a friend or family member\",\n      \"Schedule enjoyable or meaningful activities\",\n      \"Review your personal toolkit\"\n    ],\n    orange: [\n      \"Implement emergency techniques more frequently\",\n      \"Temporarily reduce non-essential commitments\",\n      \"Increase social support and check-ins\",\n      \"Consider speaking with a healthcare provider\",\n      \"Review and adjust your routine\",\n      \"Use your support network more actively\"\n    ],\n    red: [\n      \"Seek professional help immediately\",\n      \"Inform trusted people about your struggles\",\n      \"Consider time off work/school if possible\",\n      \"Use crisis resources if needed\",\n      \"Return to basics: sleep, eat, breathe, move\",\n      \"Remove additional stressors temporarily\"\n    ]\n  };\n\n  const resilienceOptions = {\n    daily: [\n      \"Consistent sleep schedule (even on weekends)\",\n      \"Regular physical activity or movement\",\n      \"Healthy eating patterns\",\n      \"Daily mindfulness or relaxation practice\",\n      \"Social connection (even brief check-ins)\",\n      \"Time in nature or outdoors\",\n      \"Engaging in meaningful activities\",\n      \"Gratitude practice\",\n      \"Morning routine\",\n      \"Evening wind-down\"\n    ],\n    weekly: [\n      \"Values assessment and goal adjustment\",\n      \"Social activities with friends or family\",\n      \"Hobbies or creative activities\",\n      \"Planning and preparation for the week ahead\",\n      \"Review of what's working and what needs adjustment\",\n      \"Time for rest and recovery\",\n      \"Exercise or physical activity\",\n      \"Connection with support network\"\n    ],\n    monthly: [\n      \"Assess overall mental health and progress\",\n      \"Adjust goals and strategies as needed\",\n      \"Plan for upcoming stressors or challenges\",\n      \"Celebrate achievements and progress\",\n      \"Connect with healthcare providers if needed\",\n      \"Review and update toolkit\",\n      \"Self-care planning\",\n      \"Skills practice and learning\"\n    ]\n  };\n\n  const toggleRiskSituation = (categoryIndex: number, situation: string) => {\n    setHighRiskSituations(prev => prev.map((category, index) => \n      index === categoryIndex ? {\n        ...category,\n        selected: category.selected.includes(situation)\n          ? category.selected.filter(s => s !== situation)\n          : [...category.selected, situation]\n      } : category\n    ));\n  };\n\n  const addPersonalRiskSituation = (categoryIndex: number, situation: string) => {\n    if (situation.trim()) {\n      setHighRiskSituations(prev => prev.map((category, index) => \n        index === categoryIndex ? {\n          ...category,\n          personal: [...category.personal, situation.trim()]\n        } : category\n      ));\n    }\n  };\n\n  const removePersonalRiskSituation = (categoryIndex: number, situationIndex: number) => {\n    setHighRiskSituations(prev => prev.map((category, index) => \n      index === categoryIndex ? {\n        ...category,\n        personal: category.personal.filter((_, i) => i !== situationIndex)\n      } : category\n    ));\n  };\n\n  const toggleWarningSign = (level: keyof WarningSigns, sign: string) => {\n    setWarningSigns(prev => ({\n      ...prev,\n      [level]: prev[level].includes(sign)\n        ? prev[level].filter(s => s !== sign)\n        : [...prev[level], sign]\n    }));\n  };\n\n  const addToActionPlan = (level: keyof ActionPlan, action: string) => {\n    if (action.trim()) {\n      setActionPlans(prev => ({\n        ...prev,\n        [level]: [...prev[level], action.trim()]\n      }));\n    }\n  };\n\n  const removeFromActionPlan = (level: keyof ActionPlan, index: number) => {\n    setActionPlans(prev => ({\n      ...prev,\n      [level]: prev[level].filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateSupportContact = (index: number, field: keyof SupportContact, value: string) => {\n    setSupportContacts(prev => prev.map((contact, i) => \n      i === index ? { ...contact, [field]: value } : contact\n    ));\n  };\n\n  const addGoalToTimeframe = (timeframeIndex: number, goal: string) => {\n    if (goal.trim()) {\n      setLongTermGoals(prev => prev.map((timeframe, index) => \n        index === timeframeIndex ? {\n          ...timeframe,\n          goals: [...timeframe.goals, goal.trim()]\n        } : timeframe\n      ));\n    }\n  };\n\n  const removeGoalFromTimeframe = (timeframeIndex: number, goalIndex: number) => {\n    setLongTermGoals(prev => prev.map((timeframe, index) => \n      index === timeframeIndex ? {\n        ...timeframe,\n        goals: timeframe.goals.filter((_, i) => i !== goalIndex)\n      } : timeframe\n    ));\n  };\n\n  const toggleResilienceHabit = (categoryIndex: number, habit: string) => {\n    setResilienceHabits(prev => prev.map((category, index) => \n      index === categoryIndex ? {\n        ...category,\n        habits: category.habits.includes(habit)\n          ? category.habits.filter(h => h !== habit)\n          : [...category.habits, habit]\n      } : category\n    ));\n  };\n\n  const addToTopRiskSituations = (situation: string) => {\n    if (situation.trim() && personalizedPlan.topRiskSituations.length < 4) {\n      setPersonalizedPlan(prev => ({\n        ...prev,\n        topRiskSituations: [...prev.topRiskSituations, situation.trim()]\n      }));\n    }\n  };\n\n  const removeFromTopRiskSituations = (index: number) => {\n    setPersonalizedPlan(prev => ({\n      ...prev,\n      topRiskSituations: prev.topRiskSituations.filter((_, i) => i !== index)\n    }));\n  };\n\n  const exportRelapsePlan = () => {\n    const planData = {\n      highRiskSituations,\n      warningSigns,\n      actionPlans,\n      supportContacts,\n      professionalContacts,\n      longTermGoals,\n      resilienceHabits,\n      personalizedPlan,\n      createdDate: new Date().toISOString(),\n      version: \"1.0\"\n    };\n\n    const dataStr = JSON.stringify(planData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `relapse-prevention-plan-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const getTotalSelectedItems = () => {\n    const riskSituations = highRiskSituations.reduce((sum, cat) => sum + cat.selected.length + cat.personal.length, 0);\n    const warnings = Object.values(warningSigns).reduce((sum, signs) => sum + signs.length, 0);\n    const actions = Object.values(actionPlans).reduce((sum, plans) => sum + plans.length, 0);\n    const habits = resilienceHabits.reduce((sum, cat) => sum + cat.habits.length, 0);\n    \n    return { riskSituations, warnings, actions, habits };\n  };\n\n  const stats = getTotalSelectedItems();\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-orange-50 to-red-50 border-orange-200\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center\">\n              <Shield className=\"w-6 h-6 text-orange-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl\">Relapse Prevention Planning</CardTitle>\n              <p className=\"text-muted-foreground\">Create a comprehensive plan for managing setbacks and maintaining progress</p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{stats.riskSituations}</div>\n              <div className=\"text-sm text-muted-foreground\">Risk Situations</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-yellow-600\">{stats.warnings}</div>\n              <div className=\"text-sm text-muted-foreground\">Warning Signs</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{stats.actions}</div>\n              <div className=\"text-sm text-muted-foreground\">Action Steps</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{stats.habits}</div>\n              <div className=\"text-sm text-muted-foreground\">Resilience Habits</div>\n            </div>\n          </div>\n          \n          <div className=\"bg-orange-50 p-4 rounded-lg\">\n            <p className=\"text-sm text-orange-800\">\n              💡 <strong>Remember:</strong> Setbacks are normal and don't erase your progress. \n              This plan helps you navigate difficult periods with confidence and maintain long-term recovery.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"situations\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"situations\">Risk Situations</TabsTrigger>\n          <TabsTrigger value=\"warnings\">Warning Signs</TabsTrigger>\n          <TabsTrigger value=\"actions\">Action Plans</TabsTrigger>\n          <TabsTrigger value=\"resilience\">Resilience</TabsTrigger>\n          <TabsTrigger value=\"support\">Support Network</TabsTrigger>\n          <TabsTrigger value=\"plan\">Personal Plan</TabsTrigger>\n        </TabsList>\n\n        {/* High-Risk Situations Tab */}\n        <TabsContent value=\"situations\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                High-Risk Situations\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Identify when your anxiety might be more challenging\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {highRiskSituations.map((category, categoryIndex) => (\n                <Card key={category.category} className=\"border-l-4 border-l-orange-400\">\n                  <CardHeader>\n                    <h4 className=\"font-semibold\">{category.category}</h4>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {category.situations.map((situation) => (\n                        <div key={situation} className=\"flex items-start space-x-3\">\n                          <Checkbox\n                            id={`${category.category}-${situation}`}\n                            checked={category.selected.includes(situation)}\n                            onCheckedChange={() => toggleRiskSituation(categoryIndex, situation)}\n                            data-testid={`checkbox-risk-${categoryIndex}-${situation.replace(/\\s+/g, '-').toLowerCase()}`}\n                          />\n                          <label \n                            htmlFor={`${category.category}-${situation}`}\n                            className=\"text-sm cursor-pointer\"\n                          >\n                            {situation}\n                          </label>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <Separator />\n                    \n                    <div>\n                      <Label>Personal High-Risk Situations for {category.category}</Label>\n                      <div className=\"space-y-2 mt-2\">\n                        {category.personal.map((situation, index) => (\n                          <div key={index} className=\"flex items-center justify-between p-2 bg-orange-50 rounded\">\n                            <span className=\"text-sm\">{situation}</span>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => removePersonalRiskSituation(categoryIndex, index)}\n                              data-testid={`button-remove-personal-risk-${categoryIndex}-${index}`}\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Input\n                          placeholder={`Add personal ${category.category.toLowerCase()} risk...`}\n                          onKeyDown={(e) => {\n                            if (e.key === 'Enter') {\n                              addPersonalRiskSituation(categoryIndex, (e.target as HTMLInputElement).value);\n                              (e.target as HTMLInputElement).value = '';\n                            }\n                          }}\n                          data-testid={`input-add-personal-risk-${categoryIndex}`}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={(e) => {\n                            const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                            addPersonalRiskSituation(categoryIndex, input.value);\n                            input.value = '';\n                          }}\n                          data-testid={`button-add-personal-risk-${categoryIndex}`}\n                        >\n                          <Plus className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Warning Signs Tab */}\n        <TabsContent value=\"warnings\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                Early Warning System\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Recognize when anxiety is becoming problematic again\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {Object.entries(warningSignOptions).map(([level, signs]) => {\n                const levelInfo = {\n                  yellow: { title: \"Yellow Alert (Mild Increase)\", color: \"bg-yellow-50 border-yellow-200\", textColor: \"text-yellow-800\" },\n                  orange: { title: \"Orange Alert (Moderate Increase)\", color: \"bg-orange-50 border-orange-200\", textColor: \"text-orange-800\" },\n                  red: { title: \"Red Alert (Significant Increase)\", color: \"bg-red-50 border-red-200\", textColor: \"text-red-800\" }\n                };\n                \n                const info = levelInfo[level as keyof typeof levelInfo];\n                \n                return (\n                  <Card key={level} className={`${info.color}`}>\n                    <CardHeader>\n                      <h4 className={`font-semibold ${info.textColor}`}>\n                        Level {level === 'yellow' ? '1' : level === 'orange' ? '2' : '3'} - {info.title}\n                      </h4>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                        {signs.map((sign) => (\n                          <div key={sign} className=\"flex items-start space-x-3\">\n                            <Checkbox\n                              id={`${level}-${sign}`}\n                              checked={warningSigns[level as keyof WarningSigns].includes(sign)}\n                              onCheckedChange={() => toggleWarningSign(level as keyof WarningSigns, sign)}\n                              data-testid={`checkbox-warning-${level}-${sign.replace(/\\s+/g, '-').toLowerCase()}`}\n                            />\n                            <label \n                              htmlFor={`${level}-${sign}`}\n                              className=\"text-sm cursor-pointer\"\n                            >\n                              {sign}\n                            </label>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Action Plans Tab */}\n        <TabsContent value=\"actions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"w-5 h-5\" />\n                Action Plans for Each Level\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Create specific response plans for different warning levels\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {Object.entries(defaultActionPlans).map(([level, defaultActions]) => {\n                const levelInfo = {\n                  yellow: { title: \"Yellow Alert Response Plan\", color: \"bg-yellow-50\", buttonColor: \"border-yellow-300\" },\n                  orange: { title: \"Orange Alert Response Plan\", color: \"bg-orange-50\", buttonColor: \"border-orange-300\" },\n                  red: { title: \"Red Alert Response Plan\", color: \"bg-red-50\", buttonColor: \"border-red-300\" }\n                };\n                \n                const info = levelInfo[level as keyof typeof levelInfo];\n                \n                return (\n                  <Card key={level} className={info.color}>\n                    <CardHeader>\n                      <h4 className=\"font-semibold\">{info.title}</h4>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <Label className=\"text-sm font-medium mb-2 block\">Recommended Actions:</Label>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                          {defaultActions.map((action) => (\n                            <div key={action} className=\"text-sm p-2 bg-white rounded border\">\n                              • {action}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <Separator />\n                      \n                      <div>\n                        <Label className=\"text-sm font-medium mb-2 block\">Your Personalized {info.title}:</Label>\n                        <div className=\"space-y-2\">\n                          {actionPlans[level as keyof ActionPlan].map((action, index) => (\n                            <div key={index} className={`flex items-center justify-between p-2 bg-white rounded ${info.buttonColor} border`}>\n                              <span className=\"text-sm\">{action}</span>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => removeFromActionPlan(level as keyof ActionPlan, index)}\n                                data-testid={`button-remove-action-${level}-${index}`}\n                              >\n                                <X className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                        <div className=\"flex gap-2 mt-2\">\n                          <Input\n                            placeholder={`Add your ${level} alert action...`}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter') {\n                                addToActionPlan(level as keyof ActionPlan, (e.target as HTMLInputElement).value);\n                                (e.target as HTMLInputElement).value = '';\n                              }\n                            }}\n                            data-testid={`input-add-action-${level}`}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={(e) => {\n                              const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                              addToActionPlan(level as keyof ActionPlan, input.value);\n                              input.value = '';\n                            }}\n                            data-testid={`button-add-action-${level}`}\n                          >\n                            <Plus className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Resilience Tab */}\n        <TabsContent value=\"resilience\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Building Resilience\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Strengthen your ability to bounce back from challenges\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {resilienceHabits.map((category, categoryIndex) => {\n                const icons = { daily: Calendar, weekly: Clock, monthly: Target };\n                const IconComponent = icons[category.category.toLowerCase() as keyof typeof icons] || Calendar;\n                const options = resilienceOptions[category.category.toLowerCase() as keyof typeof resilienceOptions] || [];\n                \n                return (\n                  <Card key={category.category} className=\"border-l-4 border-l-green-400\">\n                    <CardHeader>\n                      <h4 className=\"font-semibold flex items-center gap-2\">\n                        <IconComponent className=\"w-4 h-4\" />\n                        {category.category} Resilience Habits\n                      </h4>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                        {options.map((habit) => (\n                          <div key={habit} className=\"flex items-start space-x-3\">\n                            <Checkbox\n                              id={`${category.category}-${habit}`}\n                              checked={category.habits.includes(habit)}\n                              onCheckedChange={() => toggleResilienceHabit(categoryIndex, habit)}\n                              data-testid={`checkbox-resilience-${category.category}-${habit.replace(/\\s+/g, '-').toLowerCase()}`}\n                            />\n                            <label \n                              htmlFor={`${category.category}-${habit}`}\n                              className=\"text-sm cursor-pointer\"\n                            >\n                              {habit}\n                            </label>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </CardContent>\n          </Card>\n\n          {/* Long-term Goals */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"w-5 h-5\" />\n                Long-Term Success Goals\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Set goals for sustained recovery and growth\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {longTermGoals.map((timeframe, timeframeIndex) => (\n                <Card key={timeframe.timeframe} className=\"border-l-4 border-l-purple-400\">\n                  <CardHeader>\n                    <h4 className=\"font-semibold\">{timeframe.timeframe} Goals</h4>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      {timeframe.goals.map((goal, goalIndex) => (\n                        <div key={goalIndex} className=\"flex items-center justify-between p-2 bg-purple-50 rounded\">\n                          <span className=\"text-sm\">{goal}</span>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => removeGoalFromTimeframe(timeframeIndex, goalIndex)}\n                            data-testid={`button-remove-goal-${timeframeIndex}-${goalIndex}`}\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Input\n                        placeholder={`Add ${timeframe.timeframe} goal...`}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') {\n                            addGoalToTimeframe(timeframeIndex, (e.target as HTMLInputElement).value);\n                            (e.target as HTMLInputElement).value = '';\n                          }\n                        }}\n                        data-testid={`input-add-goal-${timeframeIndex}`}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={(e) => {\n                          const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                          addGoalToTimeframe(timeframeIndex, input.value);\n                          input.value = '';\n                        }}\n                        data-testid={`button-add-goal-${timeframeIndex}`}\n                      >\n                        <Plus className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Support Network Tab */}\n        <TabsContent value=\"support\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                Support Network Planning\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Document your support system and when to reach out\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-semibold mb-4\">Personal Support Contacts</h4>\n                {supportContacts.map((contact, index) => (\n                  <Card key={index} className=\"mb-4\">\n                    <CardHeader>\n                      <h5 className=\"font-medium\">Support Contact #{index + 1}</h5>\n                    </CardHeader>\n                    <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor={`contact-name-${index}`}>Name</Label>\n                        <Input\n                          id={`contact-name-${index}`}\n                          placeholder=\"Contact name...\"\n                          value={contact.name}\n                          onChange={(e) => updateSupportContact(index, 'name', e.target.value)}\n                          data-testid={`input-contact-name-${index}`}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor={`contact-relationship-${index}`}>Relationship</Label>\n                        <Input\n                          id={`contact-relationship-${index}`}\n                          placeholder=\"Friend, family member, etc.\"\n                          value={contact.relationship}\n                          onChange={(e) => updateSupportContact(index, 'relationship', e.target.value)}\n                          data-testid={`input-contact-relationship-${index}`}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor={`contact-phone-${index}`}>Phone Number</Label>\n                        <Input\n                          id={`contact-phone-${index}`}\n                          placeholder=\"Phone number...\"\n                          value={contact.phone}\n                          onChange={(e) => updateSupportContact(index, 'phone', e.target.value)}\n                          data-testid={`input-contact-phone-${index}`}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor={`contact-when-${index}`}>When to Contact</Label>\n                        <Input\n                          id={`contact-when-${index}`}\n                          placeholder=\"When should you reach out?\"\n                          value={contact.whenToContact}\n                          onChange={(e) => updateSupportContact(index, 'whenToContact', e.target.value)}\n                          data-testid={`input-contact-when-${index}`}\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              <Separator />\n\n              <div>\n                <h4 className=\"font-semibold mb-4\">Professional Support</h4>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"gp-contact\">GP Contact</Label>\n                    <Input\n                      id=\"gp-contact\"\n                      placeholder=\"Your GP name and practice details...\"\n                      value={professionalContacts.gp}\n                      onChange={(e) => setProfessionalContacts(prev => ({ ...prev, gp: e.target.value }))}\n                      data-testid=\"input-gp-contact\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"mental-health-professional\">Mental Health Professional</Label>\n                    <Input\n                      id=\"mental-health-professional\"\n                      placeholder=\"Therapist, counselor, or mental health team...\"\n                      value={professionalContacts.mentalHealthProfessional}\n                      onChange={(e) => setProfessionalContacts(prev => ({ ...prev, mentalHealthProfessional: e.target.value }))}\n                      data-testid=\"input-mental-health-professional\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"crisis-contact\">Crisis Contact</Label>\n                    <Input\n                      id=\"crisis-contact\"\n                      placeholder=\"Local crisis team or emergency contact...\"\n                      value={professionalContacts.crisisContact}\n                      onChange={(e) => setProfessionalContacts(prev => ({ ...prev, crisisContact: e.target.value }))}\n                      data-testid=\"input-crisis-contact\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-red-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2 text-red-800\">Emergency Crisis Resources</h4>\n                <div className=\"space-y-1 text-sm text-red-700\">\n                  <div>• <strong>Samaritans:</strong> 116 123 (free, 24/7)</div>\n                  <div>• <strong>Crisis Text Line:</strong> Text SHOUT to 85258</div>\n                  <div>• <strong>NHS 111:</strong> For urgent but non-emergency help</div>\n                  <div>• <strong>999:</strong> For immediate emergency situations</div>\n                  <div>• <strong>Mind Info Line:</strong> 0300 123 3393</div>\n                  <div>• <strong>Anxiety UK:</strong> 03444 775 774</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Personal Plan Tab */}\n        <TabsContent value=\"plan\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Heart className=\"w-5 h-5\" />\n                Your Personalized Relapse Prevention Plan\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Summarize your key insights and create your personal plan\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label>Your Top 4 High-Risk Situations</Label>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  Based on your selections, identify your most important risk situations to monitor\n                </p>\n                <div className=\"space-y-2\">\n                  {personalizedPlan.topRiskSituations.map((situation, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-orange-50 rounded\">\n                      <span className=\"text-sm font-medium\">{index + 1}. {situation}</span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => removeFromTopRiskSituations(index)}\n                        data-testid={`button-remove-top-risk-${index}`}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                {personalizedPlan.topRiskSituations.length < 4 && (\n                  <div className=\"flex gap-2 mt-2\">\n                    <Input\n                      placeholder=\"Add top risk situation...\"\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          addToTopRiskSituations((e.target as HTMLInputElement).value);\n                          (e.target as HTMLInputElement).value = '';\n                        }\n                      }}\n                      data-testid=\"input-add-top-risk\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={(e) => {\n                        const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                        addToTopRiskSituations(input.value);\n                        input.value = '';\n                      }}\n                      data-testid=\"button-add-top-risk\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"personal-warning-signs\">Your Personal Warning Signs Summary</Label>\n                <Textarea\n                  id=\"personal-warning-signs\"\n                  placeholder=\"Describe your unique early warning signs in your own words...\"\n                  value={personalizedPlan.personalWarningSignsDescription}\n                  onChange={(e) => setPersonalizedPlan(prev => ({ ...prev, personalWarningSignsDescription: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-personal-warning-signs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"emergency-plan\">Your Emergency Response Plan</Label>\n                <Textarea\n                  id=\"emergency-plan\"\n                  placeholder=\"Summarize your go-to emergency plan when anxiety becomes overwhelming...\"\n                  value={personalizedPlan.emergencyPlan}\n                  onChange={(e) => setPersonalizedPlan(prev => ({ ...prev, emergencyPlan: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-emergency-plan\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"maintenance-strategy\">Your Ongoing Maintenance Strategy</Label>\n                <Textarea\n                  id=\"maintenance-strategy\"\n                  placeholder=\"Describe your daily and weekly practices for maintaining mental health...\"\n                  value={personalizedPlan.maintenanceStrategy}\n                  onChange={(e) => setPersonalizedPlan(prev => ({ ...prev, maintenanceStrategy: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-maintenance-strategy\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"completion-notes\">Additional Notes & Commitments</Label>\n                <Textarea\n                  id=\"completion-notes\"\n                  placeholder=\"Any additional thoughts, commitments, or reminders for yourself...\"\n                  value={personalizedPlan.completionNotes}\n                  onChange={(e) => setPersonalizedPlan(prev => ({ ...prev, completionNotes: e.target.value }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-completion-notes\"\n                />\n              </div>\n\n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2 text-green-800\">Relapse Prevention Checklist</h4>\n                <div className=\"space-y-2 text-sm text-green-700\">\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>I've identified my personal high-risk situations</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>I know my early warning signs</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>I have action plans for different levels of difficulty</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>I've built a strong support network</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>I know when to seek professional help</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>I have crisis resources easily accessible</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>I've set realistic long-term goals</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>I understand that setbacks are normal</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>I'm committed to ongoing self-care and practice</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Export Section */}\n      <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-green-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5 text-blue-500\" />\n            Your Relapse Prevention Plan is Complete!\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex justify-center\">\n            <Button onClick={exportRelapsePlan} className=\"gap-2\" size=\"lg\">\n              <Download className=\"w-4 h-4\" />\n              Export Your Complete Relapse Prevention Plan\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":46258},"client/src/components/ToolkitBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Zap, \n  Sun, \n  Moon, \n  Calendar,\n  Brain,\n  Activity,\n  AlertTriangle,\n  Users,\n  Phone,\n  BookOpen,\n  Download,\n  Plus,\n  X,\n  Shield,\n  Heart,\n  Target\n} from \"lucide-react\";\n\ninterface ToolkitSection {\n  emergency_techniques: {\n    breathing: string[];\n    grounding: string[];\n    relaxation: string[];\n    selected: string[];\n  };\n  daily_practices: {\n    morning: string[];\n    throughout_day: string[];\n    evening: string[];\n    weekly: string[];\n  };\n  thought_tools: {\n    identifying: string[];\n    challenging: string[];\n    balancing: string[];\n    quick_questions: string[];\n  };\n  behavioral_strategies: {\n    exposure_goal: string;\n    values_activity: string;\n    social_goal: string;\n    physical_plan: string;\n  };\n  warning_signs: {\n    physical: string[];\n    emotional: string[];\n    behavioral: string[];\n    personal_top3: string[];\n  };\n  action_plan: {\n    early_signs: string[];\n    multiple_signs: string[];\n    emergency_contact: string;\n  };\n  support_network: {\n    trusted_friend: string;\n    family_member: string;\n    professional: string;\n    helpful_apps: string;\n    resources: string;\n  };\n  quick_reference: {\n    emergency_steps: string[];\n    daily_practice: string;\n    emergency_contact: string;\n    reminder_phrases: string[];\n  };\n}\n\nexport function ToolkitBuilder() {\n  const [toolkit, setToolkit] = useState<ToolkitSection>({\n    emergency_techniques: {\n      breathing: [],\n      grounding: [],\n      relaxation: [],\n      selected: []\n    },\n    daily_practices: {\n      morning: [],\n      throughout_day: [],\n      evening: [],\n      weekly: []\n    },\n    thought_tools: {\n      identifying: [],\n      challenging: [],\n      balancing: [],\n      quick_questions: []\n    },\n    behavioral_strategies: {\n      exposure_goal: \"\",\n      values_activity: \"\",\n      social_goal: \"\",\n      physical_plan: \"\"\n    },\n    warning_signs: {\n      physical: [],\n      emotional: [],\n      behavioral: [],\n      personal_top3: []\n    },\n    action_plan: {\n      early_signs: [],\n      multiple_signs: [],\n      emergency_contact: \"\"\n    },\n    support_network: {\n      trusted_friend: \"\",\n      family_member: \"\",\n      professional: \"\",\n      helpful_apps: \"\",\n      resources: \"\"\n    },\n    quick_reference: {\n      emergency_steps: [],\n      daily_practice: \"\",\n      emergency_contact: \"\",\n      reminder_phrases: []\n    }\n  });\n\n  const emergencyTechniques = {\n    breathing: [\n      \"Box breathing (4-4-4-4 pattern)\",\n      \"Diaphragmatic breathing (belly breathing)\",\n      \"4-7-8 breathing (inhale 4, hold 7, exhale 8)\",\n      \"Quick coherent breathing (5 seconds in, 5 seconds out)\",\n      \"Alternate nostril breathing\",\n      \"Counted breathing (slow, deep breaths)\"\n    ],\n    grounding: [\n      \"5-4-3-2-1 sensory grounding\",\n      \"Physical grounding (feel feet on floor, hold an object)\",\n      \"Mental grounding (count backwards from 100 by 7s)\",\n      \"Cold water on wrists or face\",\n      \"Name 5 things you can see, 4 you can touch, 3 you can hear\",\n      \"Progressive muscle tension and release\"\n    ],\n    relaxation: [\n      \"Progressive muscle relaxation (quick version)\",\n      \"Visualization of calm place\",\n      \"Mindful observation without judgment\",\n      \"Positive self-talk phrases\",\n      \"Body scan relaxation\",\n      \"Guided imagery\"\n    ]\n  };\n\n  const dailyPracticeOptions = {\n    morning: [\n      \"5-minute mindfulness meditation\",\n      \"Gratitude journaling (3 things)\",\n      \"Gentle stretching or yoga\",\n      \"Intention setting for the day\",\n      \"Breathing exercise while having coffee/tea\",\n      \"Review daily goals aligned with values\",\n      \"Positive affirmations\",\n      \"Light exercise or walk\"\n    ],\n    throughout_day: [\n      \"Hourly breathing check-ins\",\n      \"Mindful transitions between activities\",\n      \"Regular movement breaks\",\n      \"Anxiety level check-ins (1-10 scale)\",\n      \"Values-based decision making\",\n      \"Positive self-talk reminders\",\n      \"Mindful eating\",\n      \"Short meditation breaks\"\n    ],\n    evening: [\n      \"Reflection on the day's successes\",\n      \"Progressive muscle relaxation\",\n      \"Worry time (scheduled 15 minutes)\",\n      \"Gratitude practice\",\n      \"Preparation for tomorrow to reduce morning anxiety\",\n      \"Reading or calming activity\",\n      \"Gentle stretching\",\n      \"Journaling\"\n    ],\n    weekly: [\n      \"Values assessment and goal adjustment\",\n      \"Exposure practice (facing a small fear)\",\n      \"Social connection activity\",\n      \"Nature time or outdoor activity\",\n      \"Review and update anxiety management goals\",\n      \"Plan meaningful activities\",\n      \"Connect with support network\"\n    ]\n  };\n\n  const thoughtToolOptions = {\n    identifying: [\n      \"Thought records and journaling\",\n      \"Mindful awareness of thinking patterns\",\n      \"Anxiety symptom tracking\",\n      \"Trigger identification logs\",\n      \"Emotion labeling\",\n      \"Thought pattern recognition\"\n    ],\n    challenging: [\n      \"Evidence for/against worksheets\",\n      \"Alternative perspective questions\",\n      \"Probability estimation exercises\",\n      \"Worst case/best case/most likely scenarios\",\n      \"Thought defusion techniques\",\n      \"Cognitive restructuring\"\n    ],\n    balancing: [\n      \"Reframing negative thoughts\",\n      \"Self-compassion phrases\",\n      \"Perspective-taking exercises\",\n      \"Reality testing questions\",\n      \"Balanced thinking worksheets\",\n      \"Mindful acceptance of thoughts\"\n    ]\n  };\n\n  const warningSignsOptions = {\n    physical: [\n      \"Muscle tension (especially shoulders, jaw, back)\",\n      \"Sleep changes (difficulty falling asleep, frequent waking)\",\n      \"Appetite changes\",\n      \"Headaches or stomach issues\",\n      \"Fatigue or restlessness\",\n      \"Heart racing or feeling short of breath\",\n      \"Sweating or trembling\",\n      \"Dizziness or lightheadedness\"\n    ],\n    emotional: [\n      \"Increased worry or racing thoughts\",\n      \"Irritability or mood swings\",\n      \"Feeling overwhelmed or hopeless\",\n      \"Difficulty concentrating\",\n      \"Increased sensitivity to criticism\",\n      \"Feeling disconnected from others\",\n      \"Loss of interest in activities\",\n      \"Excessive guilt or self-blame\"\n    ],\n    behavioral: [\n      \"Avoiding activities you usually enjoy\",\n      \"Procrastinating on important tasks\",\n      \"Isolating from friends and family\",\n      \"Increased use of substances or unhealthy coping\",\n      \"Changes in work or school performance\",\n      \"Seeking excessive reassurance\",\n      \"Restlessness or inability to sit still\",\n      \"Compulsive behaviors\"\n    ]\n  };\n\n  const toggleTechniqueSelection = (category: keyof typeof emergencyTechniques, technique: string) => {\n    setToolkit(prev => ({\n      ...prev,\n      emergency_techniques: {\n        ...prev.emergency_techniques,\n        [category]: prev.emergency_techniques[category].includes(technique)\n          ? prev.emergency_techniques[category].filter(t => t !== technique)\n          : [...prev.emergency_techniques[category], technique]\n      }\n    }));\n  };\n\n  const toggleDailyPractice = (timeOfDay: keyof typeof dailyPracticeOptions, practice: string) => {\n    setToolkit(prev => ({\n      ...prev,\n      daily_practices: {\n        ...prev.daily_practices,\n        [timeOfDay]: prev.daily_practices[timeOfDay].includes(practice)\n          ? prev.daily_practices[timeOfDay].filter(p => p !== practice)\n          : [...prev.daily_practices[timeOfDay], practice]\n      }\n    }));\n  };\n\n  const toggleThoughtTool = (category: keyof typeof thoughtToolOptions, tool: string) => {\n    setToolkit(prev => ({\n      ...prev,\n      thought_tools: {\n        ...prev.thought_tools,\n        [category]: prev.thought_tools[category].includes(tool)\n          ? prev.thought_tools[category].filter(t => t !== tool)\n          : [...prev.thought_tools[category], tool]\n      }\n    }));\n  };\n\n  const toggleWarningSign = (category: keyof typeof warningSignsOptions, sign: string) => {\n    setToolkit(prev => ({\n      ...prev,\n      warning_signs: {\n        ...prev.warning_signs,\n        [category]: prev.warning_signs[category].includes(sign)\n          ? prev.warning_signs[category].filter(s => s !== sign)\n          : [...prev.warning_signs[category], sign]\n      }\n    }));\n  };\n\n  const addToSelected = (technique: string) => {\n    if (toolkit.emergency_techniques.selected.length < 3 && !toolkit.emergency_techniques.selected.includes(technique)) {\n      setToolkit(prev => ({\n        ...prev,\n        emergency_techniques: {\n          ...prev.emergency_techniques,\n          selected: [...prev.emergency_techniques.selected, technique]\n        }\n      }));\n    }\n  };\n\n  const removeFromSelected = (technique: string) => {\n    setToolkit(prev => ({\n      ...prev,\n      emergency_techniques: {\n        ...prev.emergency_techniques,\n        selected: prev.emergency_techniques.selected.filter(t => t !== technique)\n      }\n    }));\n  };\n\n  const addToActionPlan = (level: 'early_signs' | 'multiple_signs', action: string) => {\n    if (action.trim()) {\n      setToolkit(prev => ({\n        ...prev,\n        action_plan: {\n          ...prev.action_plan,\n          [level]: [...prev.action_plan[level], action.trim()]\n        }\n      }));\n    }\n  };\n\n  const removeFromActionPlan = (level: 'early_signs' | 'multiple_signs', index: number) => {\n    setToolkit(prev => ({\n      ...prev,\n      action_plan: {\n        ...prev.action_plan,\n        [level]: prev.action_plan[level].filter((_, i) => i !== index)\n      }\n    }));\n  };\n\n  const addToQuickReference = (field: 'emergency_steps' | 'reminder_phrases', item: string) => {\n    if (item.trim()) {\n      setToolkit(prev => ({\n        ...prev,\n        quick_reference: {\n          ...prev.quick_reference,\n          [field]: [...prev.quick_reference[field], item.trim()]\n        }\n      }));\n    }\n  };\n\n  const removeFromQuickReference = (field: 'emergency_steps' | 'reminder_phrases', index: number) => {\n    setToolkit(prev => ({\n      ...prev,\n      quick_reference: {\n        ...prev.quick_reference,\n        [field]: prev.quick_reference[field].filter((_, i) => i !== index)\n      }\n    }));\n  };\n\n  const addToPersonalWarning = (sign: string) => {\n    if (sign.trim() && toolkit.warning_signs.personal_top3.length < 3) {\n      setToolkit(prev => ({\n        ...prev,\n        warning_signs: {\n          ...prev.warning_signs,\n          personal_top3: [...prev.warning_signs.personal_top3, sign.trim()]\n        }\n      }));\n    }\n  };\n\n  const removeFromPersonalWarning = (index: number) => {\n    setToolkit(prev => ({\n      ...prev,\n      warning_signs: {\n        ...prev.warning_signs,\n        personal_top3: prev.warning_signs.personal_top3.filter((_, i) => i !== index)\n      }\n    }));\n  };\n\n  const exportToolkit = () => {\n    const toolkitData = {\n      ...toolkit,\n      createdDate: new Date().toISOString(),\n      version: \"1.0\"\n    };\n\n    const dataStr = JSON.stringify(toolkitData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `personal-anxiety-toolkit-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n              <Shield className=\"w-6 h-6 text-purple-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl\">Personal Anxiety Toolkit Builder</CardTitle>\n              <p className=\"text-muted-foreground\">Create your comprehensive, personalized anxiety management toolkit</p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <p className=\"text-sm text-blue-800\">\n              💡 <strong>Tip:</strong> Select techniques that have worked well for you during this program. \n              Your toolkit will be your go-to resource for independent anxiety management.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Section 1: Emergency Techniques */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Zap className=\"w-5 h-5\" />\n            Section 1: Emergency Techniques\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Choose 3-5 techniques that work quickly when anxiety is high\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {Object.entries(emergencyTechniques).map(([category, techniques]) => (\n            <div key={category}>\n              <h4 className=\"font-semibold mb-3 capitalize\">\n                {category.replace('_', ' ')} Techniques\n              </h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {techniques.map((technique) => (\n                  <div key={technique} className=\"flex items-start space-x-3\">\n                    <Checkbox\n                      id={`${category}-${technique}`}\n                      checked={toolkit.emergency_techniques[category as keyof typeof toolkit.emergency_techniques].includes(technique)}\n                      onCheckedChange={() => toggleTechniqueSelection(category as keyof typeof emergencyTechniques, technique)}\n                      data-testid={`checkbox-${category}-${technique.replace(/\\s+/g, '-').toLowerCase()}`}\n                    />\n                    <label \n                      htmlFor={`${category}-${technique}`}\n                      className=\"text-sm cursor-pointer flex-1\"\n                    >\n                      {technique}\n                    </label>\n                    {toolkit.emergency_techniques[category as keyof typeof toolkit.emergency_techniques].includes(technique) && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => addToSelected(technique)}\n                        disabled={toolkit.emergency_techniques.selected.includes(technique) || toolkit.emergency_techniques.selected.length >= 3}\n                        data-testid={`button-add-selected-${technique.replace(/\\s+/g, '-').toLowerCase()}`}\n                      >\n                        Add to Top 3\n                      </Button>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n\n          <Separator />\n\n          <div>\n            <h4 className=\"font-semibold mb-3\">Your Top 3 Emergency Techniques</h4>\n            <div className=\"space-y-2\">\n              {toolkit.emergency_techniques.selected.map((technique, index) => (\n                <div key={technique} className=\"flex items-center justify-between p-3 bg-red-50 rounded-lg\">\n                  <span className=\"font-medium\">{index + 1}. {technique}</span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => removeFromSelected(technique)}\n                    data-testid={`button-remove-selected-${index}`}\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              ))}\n              {toolkit.emergency_techniques.selected.length === 0 && (\n                <p className=\"text-muted-foreground text-sm\">Select your most effective emergency techniques above</p>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Section 2: Daily Maintenance Strategies */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5\" />\n            Section 2: Daily Maintenance Strategies\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Select ongoing practices to prevent anxiety buildup\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {Object.entries(dailyPracticeOptions).map(([timeOfDay, practices]) => {\n            const icons = {\n              morning: Sun,\n              throughout_day: Activity,\n              evening: Moon,\n              weekly: Calendar\n            };\n            const IconComponent = icons[timeOfDay as keyof typeof icons];\n            \n            return (\n              <div key={timeOfDay}>\n                <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                  <IconComponent className=\"w-4 h-4\" />\n                  {timeOfDay.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())} \n                  {timeOfDay !== 'weekly' && ' (Choose 2-3)'}\n                  {timeOfDay === 'weekly' && ' (Choose 1-2)'}\n                </h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {practices.map((practice) => (\n                    <div key={practice} className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        id={`${timeOfDay}-${practice}`}\n                        checked={toolkit.daily_practices[timeOfDay as keyof typeof toolkit.daily_practices].includes(practice)}\n                        onCheckedChange={() => toggleDailyPractice(timeOfDay as keyof typeof dailyPracticeOptions, practice)}\n                        data-testid={`checkbox-${timeOfDay}-${practice.replace(/\\s+/g, '-').toLowerCase()}`}\n                      />\n                      <label \n                        htmlFor={`${timeOfDay}-${practice}`}\n                        className=\"text-sm cursor-pointer\"\n                      >\n                        {practice}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            );\n          })}\n\n          <Separator />\n\n          <div className=\"bg-green-50 p-4 rounded-lg space-y-4\">\n            <h4 className=\"font-semibold\">Your Daily Maintenance Plan</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"morning-plan\">Morning Routine</Label>\n                <Textarea\n                  id=\"morning-plan\"\n                  placeholder=\"Describe your morning anxiety management routine...\"\n                  value={toolkit.behavioral_strategies.exposure_goal} // Reusing field for simplicity\n                  onChange={(e) => setToolkit(prev => ({ \n                    ...prev, \n                    behavioral_strategies: { ...prev.behavioral_strategies, exposure_goal: e.target.value }\n                  }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-morning-plan\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"evening-plan\">Evening Routine</Label>\n                <Textarea\n                  id=\"evening-plan\"\n                  placeholder=\"Describe your evening wind-down routine...\"\n                  value={toolkit.behavioral_strategies.values_activity} // Reusing field for simplicity\n                  onChange={(e) => setToolkit(prev => ({ \n                    ...prev, \n                    behavioral_strategies: { ...prev.behavioral_strategies, values_activity: e.target.value }\n                  }))}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-evening-plan\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Section 3: Thought Management Tools */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5\" />\n            Section 3: Thought Management Tools\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Pick your favorite cognitive techniques for managing anxious thoughts\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {Object.entries(thoughtToolOptions).map(([category, tools]) => (\n            <div key={category}>\n              <h4 className=\"font-semibold mb-3 capitalize\">\n                {category.replace('_', ' ')} Thoughts\n              </h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {tools.map((tool) => (\n                  <div key={tool} className=\"flex items-start space-x-3\">\n                    <Checkbox\n                      id={`${category}-${tool}`}\n                      checked={toolkit.thought_tools[category as keyof typeof toolkit.thought_tools].includes(tool)}\n                      onCheckedChange={() => toggleThoughtTool(category as keyof typeof thoughtToolOptions, tool)}\n                      data-testid={`checkbox-thought-${category}-${tool.replace(/\\s+/g, '-').toLowerCase()}`}\n                    />\n                    <label \n                      htmlFor={`${category}-${tool}`}\n                      className=\"text-sm cursor-pointer\"\n                    >\n                      {tool}\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n\n          <Separator />\n\n          <div className=\"bg-purple-50 p-4 rounded-lg\">\n            <h4 className=\"font-semibold mb-3\">Quick Thought Challenge Questions</h4>\n            <div className=\"space-y-2\">\n              {[\n                \"Is this thought realistic?\",\n                \"What evidence supports/contradicts this?\",\n                \"What would I tell a friend in this situation?\",\n                \"Will this matter in 5 years?\"\n              ].map((question, index) => (\n                <div key={index} className=\"text-sm\">• {question}</div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Section 4: Behavioral Strategies */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"w-5 h-5\" />\n            Section 4: Behavioral Strategies\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Plan your ongoing exposure and activation strategies\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"weekly-exposure\">Weekly Exposure Goal</Label>\n            <Textarea\n              id=\"weekly-exposure\"\n              placeholder=\"What exposure or anxiety-provoking situation will you practice each week?\"\n              value={toolkit.behavioral_strategies.exposure_goal}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                behavioral_strategies: { ...prev.behavioral_strategies, exposure_goal: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-weekly-exposure\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"values-activity\">Values-Based Activity</Label>\n            <Textarea\n              id=\"values-activity\"\n              placeholder=\"What meaningful activity will you engage in regularly?\"\n              value={toolkit.behavioral_strategies.values_activity}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                behavioral_strategies: { ...prev.behavioral_strategies, values_activity: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-values-activity\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"social-goal\">Social Connection Goal</Label>\n            <Textarea\n              id=\"social-goal\"\n              placeholder=\"How will you maintain and build social connections?\"\n              value={toolkit.behavioral_strategies.social_goal}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                behavioral_strategies: { ...prev.behavioral_strategies, social_goal: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-social-goal\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"physical-plan\">Physical Activity Plan</Label>\n            <Textarea\n              id=\"physical-plan\"\n              placeholder=\"What physical activities or exercise will you maintain?\"\n              value={toolkit.behavioral_strategies.physical_plan}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                behavioral_strategies: { ...prev.behavioral_strategies, physical_plan: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-physical-plan\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Section 5: Warning Signs & Early Intervention */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"w-5 h-5\" />\n            Section 5: Warning Signs & Early Intervention\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Identify your personal warning signs and create action plans\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {Object.entries(warningSignsOptions).map(([category, signs]) => (\n            <div key={category}>\n              <h4 className=\"font-semibold mb-3 capitalize\">\n                {category.replace('_', ' ')} Warning Signs\n              </h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {signs.map((sign) => (\n                  <div key={sign} className=\"flex items-start space-x-3\">\n                    <Checkbox\n                      id={`${category}-${sign}`}\n                      checked={toolkit.warning_signs[category as keyof typeof toolkit.warning_signs].includes(sign)}\n                      onCheckedChange={() => toggleWarningSign(category as keyof typeof warningSignsOptions, sign)}\n                      data-testid={`checkbox-warning-${category}-${sign.replace(/\\s+/g, '-').toLowerCase()}`}\n                    />\n                    <label \n                      htmlFor={`${category}-${sign}`}\n                      className=\"text-sm cursor-pointer\"\n                    >\n                      {sign}\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n\n          <Separator />\n\n          <div>\n            <h4 className=\"font-semibold mb-3\">Your Top 3 Personal Warning Signs</h4>\n            <div className=\"space-y-2 mb-4\">\n              {toolkit.warning_signs.personal_top3.map((sign, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-yellow-50 rounded-lg\">\n                  <span className=\"font-medium\">{index + 1}. {sign}</span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => removeFromPersonalWarning(index)}\n                    data-testid={`button-remove-warning-${index}`}\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n            \n            {toolkit.warning_signs.personal_top3.length < 3 && (\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Add your personal warning sign...\"\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      addToPersonalWarning((e.target as HTMLInputElement).value);\n                      (e.target as HTMLInputElement).value = '';\n                    }\n                  }}\n                  data-testid=\"input-add-warning\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={(e) => {\n                    const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                    addToPersonalWarning(input.value);\n                    input.value = '';\n                  }}\n                  data-testid=\"button-add-warning\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\">Early Intervention Action Plan</h4>\n            \n            <div>\n              <Label>When I notice 1-2 warning signs:</Label>\n              <div className=\"space-y-2 mt-2\">\n                {toolkit.action_plan.early_signs.map((action, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-2 bg-blue-50 rounded\">\n                    <span className=\"text-sm\">{action}</span>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => removeFromActionPlan('early_signs', index)}\n                      data-testid={`button-remove-early-${index}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex gap-2 mt-2\">\n                <Input\n                  placeholder=\"Add action for early signs...\"\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      addToActionPlan('early_signs', (e.target as HTMLInputElement).value);\n                      (e.target as HTMLInputElement).value = '';\n                    }\n                  }}\n                  data-testid=\"input-add-early-action\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={(e) => {\n                    const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                    addToActionPlan('early_signs', input.value);\n                    input.value = '';\n                  }}\n                  data-testid=\"button-add-early-action\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div>\n              <Label>When I notice 3+ warning signs:</Label>\n              <div className=\"space-y-2 mt-2\">\n                {toolkit.action_plan.multiple_signs.map((action, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-2 bg-orange-50 rounded\">\n                    <span className=\"text-sm\">{action}</span>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => removeFromActionPlan('multiple_signs', index)}\n                      data-testid={`button-remove-multiple-${index}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex gap-2 mt-2\">\n                <Input\n                  placeholder=\"Add action for multiple signs...\"\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      addToActionPlan('multiple_signs', (e.target as HTMLInputElement).value);\n                      (e.target as HTMLInputElement).value = '';\n                    }\n                  }}\n                  data-testid=\"input-add-multiple-action\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={(e) => {\n                    const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                    addToActionPlan('multiple_signs', input.value);\n                    input.value = '';\n                  }}\n                  data-testid=\"button-add-multiple-action\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"emergency-contact\">Emergency Contact Person</Label>\n              <Input\n                id=\"emergency-contact\"\n                placeholder=\"Name and phone number of emergency contact...\"\n                value={toolkit.action_plan.emergency_contact}\n                onChange={(e) => setToolkit(prev => ({ \n                  ...prev, \n                  action_plan: { ...prev.action_plan, emergency_contact: e.target.value }\n                }))}\n                className=\"mt-1\"\n                data-testid=\"input-emergency-contact\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Section 6: Support Network & Resources */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            Section 6: Support Network & Resources\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Document your support system and helpful resources\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"trusted-friend\">Trusted Friend</Label>\n            <Input\n              id=\"trusted-friend\"\n              placeholder=\"Name and contact of trusted friend...\"\n              value={toolkit.support_network.trusted_friend}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                support_network: { ...prev.support_network, trusted_friend: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"input-trusted-friend\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"family-member\">Family Member</Label>\n            <Input\n              id=\"family-member\"\n              placeholder=\"Name and contact of supportive family member...\"\n              value={toolkit.support_network.family_member}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                support_network: { ...prev.support_network, family_member: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"input-family-member\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"professional-contact\">Professional Contact</Label>\n            <Input\n              id=\"professional-contact\"\n              placeholder=\"GP, therapist, or other professional contact...\"\n              value={toolkit.support_network.professional}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                support_network: { ...prev.support_network, professional: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"input-professional-contact\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"helpful-apps\">Mental Health Apps You Find Helpful</Label>\n            <Input\n              id=\"helpful-apps\"\n              placeholder=\"Apps, websites, or digital resources...\"\n              value={toolkit.support_network.helpful_apps}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                support_network: { ...prev.support_network, helpful_apps: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"input-helpful-apps\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"other-resources\">Other Helpful Resources</Label>\n            <Textarea\n              id=\"other-resources\"\n              placeholder=\"Books, websites, communities, or other resources...\"\n              value={toolkit.support_network.resources}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                support_network: { ...prev.support_network, resources: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"textarea-other-resources\"\n            />\n          </div>\n\n          <div className=\"bg-red-50 p-4 rounded-lg\">\n            <h4 className=\"font-semibold mb-2 text-red-800\">Crisis Resources</h4>\n            <div className=\"space-y-1 text-sm text-red-700\">\n              <div>• <strong>Samaritans:</strong> 116 123 (free, 24/7)</div>\n              <div>• <strong>Crisis Text Line:</strong> Text SHOUT to 85258</div>\n              <div>• <strong>NHS 111:</strong> For urgent but non-emergency help</div>\n              <div>• <strong>999:</strong> For immediate emergency situations</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Section 7: Quick Reference Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"w-5 h-5\" />\n            Section 7: Quick Reference Card\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Create a summary card to keep with you\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label>When anxiety hits, try (3 steps):</Label>\n            <div className=\"space-y-2 mt-2\">\n              {toolkit.quick_reference.emergency_steps.map((step, index) => (\n                <div key={index} className=\"flex items-center justify-between p-2 bg-green-50 rounded\">\n                  <span className=\"text-sm font-medium\">{index + 1}. {step}</span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => removeFromQuickReference('emergency_steps', index)}\n                    data-testid={`button-remove-step-${index}`}\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n            {toolkit.quick_reference.emergency_steps.length < 3 && (\n              <div className=\"flex gap-2 mt-2\">\n                <Input\n                  placeholder=\"Add emergency step...\"\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      addToQuickReference('emergency_steps', (e.target as HTMLInputElement).value);\n                      (e.target as HTMLInputElement).value = '';\n                    }\n                  }}\n                  data-testid=\"input-add-step\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={(e) => {\n                    const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                    addToQuickReference('emergency_steps', input.value);\n                    input.value = '';\n                  }}\n                  data-testid=\"button-add-step\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"daily-practice-summary\">Daily Practice Summary</Label>\n            <Input\n              id=\"daily-practice-summary\"\n              placeholder=\"One-line summary of your daily practice...\"\n              value={toolkit.quick_reference.daily_practice}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                quick_reference: { ...prev.quick_reference, daily_practice: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"input-daily-practice-summary\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"emergency-contact-card\">Emergency Contact</Label>\n            <Input\n              id=\"emergency-contact-card\"\n              placeholder=\"Key emergency contact for your card...\"\n              value={toolkit.quick_reference.emergency_contact}\n              onChange={(e) => setToolkit(prev => ({ \n                ...prev, \n                quick_reference: { ...prev.quick_reference, emergency_contact: e.target.value }\n              }))}\n              className=\"mt-1\"\n              data-testid=\"input-emergency-contact-card\"\n            />\n          </div>\n\n          <div>\n            <Label>Reminder Phrases:</Label>\n            <div className=\"space-y-2 mt-2\">\n              {toolkit.quick_reference.reminder_phrases.map((phrase, index) => (\n                <div key={index} className=\"flex items-center justify-between p-2 bg-purple-50 rounded\">\n                  <span className=\"text-sm italic\">\"{phrase}\"</span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => removeFromQuickReference('reminder_phrases', index)}\n                    data-testid={`button-remove-phrase-${index}`}\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n            <div className=\"flex gap-2 mt-2\">\n              <Input\n                placeholder=\"Add reminder phrase...\"\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    addToQuickReference('reminder_phrases', (e.target as HTMLInputElement).value);\n                    (e.target as HTMLInputElement).value = '';\n                  }\n                }}\n                data-testid=\"input-add-phrase\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={(e) => {\n                  const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;\n                  addToQuickReference('reminder_phrases', input.value);\n                  input.value = '';\n                }}\n                data-testid=\"button-add-phrase\"\n              >\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Export Section */}\n      <Card className=\"bg-gradient-to-r from-green-50 to-purple-50 border-green-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Heart className=\"w-5 h-5 text-red-500\" />\n            Your Personal Toolkit is Complete!\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {toolkit.emergency_techniques.selected.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Emergency Techniques</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {Object.values(toolkit.daily_practices).flat().length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Daily Practices</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {Object.values(toolkit.thought_tools).flat().length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Thought Tools</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {toolkit.warning_signs.personal_top3.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Warning Signs</div>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-center\">\n            <Button onClick={exportToolkit} className=\"gap-2\" size=\"lg\">\n              <Download className=\"w-4 h-4\" />\n              Export Your Complete Toolkit\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":44894},"client/src/components/ValuesWorksheet.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Heart, Target, Users, Sparkles, Shield, Smile, Download } from \"lucide-react\";\n\ninterface LifeArea {\n  area: string;\n  importance: number;\n  currentAlignment: number;\n  values: string;\n  barriers: string;\n}\n\ninterface ValuesData {\n  lifeAreas: LifeArea[];\n  top3Values: string[];\n  valuesInAction: {\n    today: string;\n    thisWeek: string;\n    thisMonth: string;\n    anxietyManagement: string;\n  };\n  completionStatements: {\n    mostAlive: string;\n    admireOthers: string;\n    unlimitedResources: string;\n    rememberedFor: string;\n    feelProud: string;\n  };\n  actionPlan: {\n    value1: { name: string; currentState: string; idealState: string; barriers: string; weeklyAction: string };\n    value2: { name: string; currentState: string; idealState: string; barriers: string; weeklyAction: string };\n    value3: { name: string; currentState: string; idealState: string; barriers: string; weeklyAction: string };\n  };\n}\n\nconst defaultLifeAreas: LifeArea[] = [\n  { area: \"Family relationships\", importance: 5, currentAlignment: 5, values: \"\", barriers: \"\" },\n  { area: \"Friendships\", importance: 5, currentAlignment: 5, values: \"\", barriers: \"\" },\n  { area: \"Career/work\", importance: 5, currentAlignment: 5, values: \"\", barriers: \"\" },\n  { area: \"Education/learning\", importance: 5, currentAlignment: 5, values: \"\", barriers: \"\" },\n  { area: \"Health/fitness\", importance: 5, currentAlignment: 5, values: \"\", barriers: \"\" },\n  { area: \"Recreation/fun\", importance: 5, currentAlignment: 5, values: \"\", barriers: \"\" },\n  { area: \"Community involvement\", importance: 5, currentAlignment: 5, values: \"\", barriers: \"\" },\n  { area: \"Spirituality/personal growth\", importance: 5, currentAlignment: 5, values: \"\", barriers: \"\" }\n];\n\nconst valueExamples = {\n  connection: [\"Love\", \"Intimacy\", \"Friendship\", \"Belonging\", \"Trust\", \"Loyalty\", \"Support\"],\n  growth: [\"Learning\", \"Creativity\", \"Achievement\", \"Mastery\", \"Adventure\", \"Curiosity\"],\n  contribution: [\"Helping others\", \"Making a difference\", \"Justice\", \"Compassion\", \"Service\"],\n  authenticity: [\"Honesty\", \"Integrity\", \"Being true to yourself\", \"Independence\"],\n  security: [\"Safety\", \"Stability\", \"Predictability\", \"Financial security\"],\n  fun: [\"Playfulness\", \"Humor\", \"Enjoyment\", \"Spontaneity\", \"Celebration\"]\n};\n\nexport function ValuesWorksheet() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [valuesData, setValuesData] = useState<ValuesData>({\n    lifeAreas: defaultLifeAreas,\n    top3Values: [\"\", \"\", \"\"],\n    valuesInAction: {\n      today: \"\",\n      thisWeek: \"\",\n      thisMonth: \"\",\n      anxietyManagement: \"\"\n    },\n    completionStatements: {\n      mostAlive: \"\",\n      admireOthers: \"\",\n      unlimitedResources: \"\",\n      rememberedFor: \"\",\n      feelProud: \"\"\n    },\n    actionPlan: {\n      value1: { name: \"\", currentState: \"\", idealState: \"\", barriers: \"\", weeklyAction: \"\" },\n      value2: { name: \"\", currentState: \"\", idealState: \"\", barriers: \"\", weeklyAction: \"\" },\n      value3: { name: \"\", currentState: \"\", idealState: \"\", barriers: \"\", weeklyAction: \"\" }\n    }\n  });\n\n  const updateLifeArea = (index: number, field: keyof LifeArea, value: any) => {\n    setValuesData(prev => ({\n      ...prev,\n      lifeAreas: prev.lifeAreas.map((area, i) => \n        i === index ? { ...area, [field]: value } : area\n      )\n    }));\n  };\n\n  const updateTop3Values = (index: number, value: string) => {\n    setValuesData(prev => ({\n      ...prev,\n      top3Values: prev.top3Values.map((val, i) => i === index ? value : val)\n    }));\n  };\n\n  const updateCompletionStatement = (field: keyof typeof valuesData.completionStatements, value: string) => {\n    setValuesData(prev => ({\n      ...prev,\n      completionStatements: { ...prev.completionStatements, [field]: value }\n    }));\n  };\n\n  const updateValuesInAction = (field: keyof typeof valuesData.valuesInAction, value: string) => {\n    setValuesData(prev => ({\n      ...prev,\n      valuesInAction: { ...prev.valuesInAction, [field]: value }\n    }));\n  };\n\n  const updateActionPlan = (valueKey: keyof typeof valuesData.actionPlan, field: string, value: string) => {\n    setValuesData(prev => ({\n      ...prev,\n      actionPlan: {\n        ...prev.actionPlan,\n        [valueKey]: { ...prev.actionPlan[valueKey], [field]: value }\n      }\n    }));\n  };\n\n  const exportWorksheet = () => {\n    const worksheetData = JSON.stringify(valuesData, null, 2);\n    const blob = new Blob([worksheetData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'values-assessment.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const renderStep1 = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Step 1: Life Areas Assessment</h3>\n        <p className=\"text-muted-foreground\">Rate how important each area is to you and how well you're currently living according to your values in that area.</p>\n      </div>\n      \n      <div className=\"grid gap-4\">\n        {valuesData.lifeAreas.map((area, index) => (\n          <Card key={area.area} className=\"p-4\">\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium\">{area.area}</h4>\n              \n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm\">Importance (1-10)</Label>\n                  <div className=\"flex items-center gap-3 mt-2\">\n                    <Slider\n                      value={[area.importance]}\n                      onValueChange={([value]) => updateLifeArea(index, 'importance', value)}\n                      max={10}\n                      min={1}\n                      step={1}\n                      className=\"flex-1\"\n                    />\n                    <Badge variant=\"outline\" className=\"min-w-[3rem]\">{area.importance}</Badge>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm\">Current Alignment (1-10)</Label>\n                  <div className=\"flex items-center gap-3 mt-2\">\n                    <Slider\n                      value={[area.currentAlignment]}\n                      onValueChange={([value]) => updateLifeArea(index, 'currentAlignment', value)}\n                      max={10}\n                      min={1}\n                      step={1}\n                      className=\"flex-1\"\n                    />\n                    <Badge variant=\"outline\" className=\"min-w-[3rem]\">{area.currentAlignment}</Badge>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm\">What values are important to you in this area?</Label>\n                <Input\n                  placeholder=\"e.g., connection, growth, creativity...\"\n                  value={area.values}\n                  onChange={(e) => updateLifeArea(index, 'values', e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n              \n              <div>\n                <Label className=\"text-sm\">What barriers (especially anxiety-related) hold you back?</Label>\n                <Input\n                  placeholder=\"e.g., social anxiety, fear of failure...\"\n                  value={area.barriers}\n                  onChange={(e) => updateLifeArea(index, 'barriers', e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderStep2 = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Step 2: Values Clarification</h3>\n        <p className=\"text-muted-foreground\">Complete these sentences to gain deeper insight into your values.</p>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <Label className=\"text-sm font-medium\">I feel most alive and energized when I am...</Label>\n          <Textarea\n            placeholder=\"Describe what makes you feel most energetic and engaged\"\n            value={valuesData.completionStatements.mostAlive}\n            onChange={(e) => updateCompletionStatement('mostAlive', e.target.value)}\n            className=\"mt-1\"\n          />\n        </div>\n        \n        <div>\n          <Label className=\"text-sm font-medium\">The people I most admire tend to be...</Label>\n          <Textarea\n            placeholder=\"What qualities do you admire in others?\"\n            value={valuesData.completionStatements.admireOthers}\n            onChange={(e) => updateCompletionStatement('admireOthers', e.target.value)}\n            className=\"mt-1\"\n          />\n        </div>\n        \n        <div>\n          <Label className=\"text-sm font-medium\">If I had unlimited time and resources, I would spend my time...</Label>\n          <Textarea\n            placeholder=\"What would you do if there were no constraints?\"\n            value={valuesData.completionStatements.unlimitedResources}\n            onChange={(e) => updateCompletionStatement('unlimitedResources', e.target.value)}\n            className=\"mt-1\"\n          />\n        </div>\n        \n        <div>\n          <Label className=\"text-sm font-medium\">When I look back on my life, I want to be remembered for...</Label>\n          <Textarea\n            placeholder=\"What legacy do you want to leave?\"\n            value={valuesData.completionStatements.rememberedFor}\n            onChange={(e) => updateCompletionStatement('rememberedFor', e.target.value)}\n            className=\"mt-1\"\n          />\n        </div>\n        \n        <div>\n          <Label className=\"text-sm font-medium\">The times I feel most proud of myself are when I...</Label>\n          <Textarea\n            placeholder=\"What actions make you feel proud and fulfilled?\"\n            value={valuesData.completionStatements.feelProud}\n            onChange={(e) => updateCompletionStatement('feelProud', e.target.value)}\n            className=\"mt-1\"\n          />\n        </div>\n      </div>\n      \n      <Card className=\"p-4 bg-muted/50\">\n        <h4 className=\"font-medium mb-3 flex items-center gap-2\">\n          <Sparkles className=\"w-4 h-4\" />\n          Value Examples for Inspiration\n        </h4>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm\">\n          {Object.entries(valueExamples).map(([category, values]) => (\n            <div key={category}>\n              <h5 className=\"font-medium mb-1 capitalize\">{category}:</h5>\n              <div className=\"flex flex-wrap gap-1\">\n                {values.map(value => (\n                  <Badge key={value} variant=\"outline\" className=\"text-xs\">{value}</Badge>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderStep3 = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Step 3: Identify Your Top 3 Values</h3>\n        <p className=\"text-muted-foreground\">Based on your assessment, identify your three most important values.</p>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {[0, 1, 2].map((index) => (\n          <div key={index}>\n            <Label className=\"text-sm font-medium\">Core Value #{index + 1}</Label>\n            <Input\n              placeholder={`Enter your ${['first', 'second', 'third'][index]} most important value`}\n              value={valuesData.top3Values[index]}\n              onChange={(e) => updateTop3Values(index, e.target.value)}\n              className=\"mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n      \n      <Card className=\"p-4\">\n        <h4 className=\"font-medium mb-3\">Values-Based Goal Setting</h4>\n        <div className=\"space-y-4\">\n          <div>\n            <Label className=\"text-sm\">One thing I could do TODAY that aligns with my values:</Label>\n            <Input\n              placeholder=\"A small action you can take today\"\n              value={valuesData.valuesInAction.today}\n              onChange={(e) => updateValuesInAction('today', e.target.value)}\n              className=\"mt-1\"\n            />\n          </div>\n          \n          <div>\n            <Label className=\"text-sm\">One thing I could do THIS WEEK:</Label>\n            <Input\n              placeholder=\"A meaningful action for this week\"\n              value={valuesData.valuesInAction.thisWeek}\n              onChange={(e) => updateValuesInAction('thisWeek', e.target.value)}\n              className=\"mt-1\"\n            />\n          </div>\n          \n          <div>\n            <Label className=\"text-sm\">One thing I could work toward THIS MONTH:</Label>\n            <Input\n              placeholder=\"A bigger goal to work toward\"\n              value={valuesData.valuesInAction.thisMonth}\n              onChange={(e) => updateValuesInAction('thisMonth', e.target.value)}\n              className=\"mt-1\"\n            />\n          </div>\n          \n          <div>\n            <Label className=\"text-sm\">How I'll handle anxiety while pursuing these values:</Label>\n            <Textarea\n              placeholder=\"What strategies will you use when anxiety tries to pull you away from your values?\"\n              value={valuesData.valuesInAction.anxietyManagement}\n              onChange={(e) => updateValuesInAction('anxietyManagement', e.target.value)}\n              className=\"mt-1\"\n            />\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderStep4 = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Step 4: Create Your Action Plan</h3>\n        <p className=\"text-muted-foreground\">For each of your top 3 values, create a detailed action plan.</p>\n      </div>\n      \n      {(['value1', 'value2', 'value3'] as const).map((valueKey, index) => (\n        <Card key={valueKey} className=\"p-4\">\n          <h4 className=\"font-medium mb-4\">Value #{index + 1}: {valuesData.top3Values[index] || 'Enter value above'}</h4>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-sm\">How does this value currently show up in your life?</Label>\n              <Textarea\n                placeholder=\"Describe how you currently live this value\"\n                value={valuesData.actionPlan[valueKey].currentState}\n                onChange={(e) => updateActionPlan(valueKey, 'currentState', e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n            \n            <div>\n              <Label className=\"text-sm\">What would living this value more fully look like?</Label>\n              <Textarea\n                placeholder=\"Describe your ideal way of living this value\"\n                value={valuesData.actionPlan[valueKey].idealState}\n                onChange={(e) => updateActionPlan(valueKey, 'idealState', e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n            \n            <div>\n              <Label className=\"text-sm\">What anxiety-related barriers hold you back?</Label>\n              <Textarea\n                placeholder=\"What fears or anxieties prevent you from fully living this value?\"\n                value={valuesData.actionPlan[valueKey].barriers}\n                onChange={(e) => updateActionPlan(valueKey, 'barriers', e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n            \n            <div>\n              <Label className=\"text-sm\">One specific action you could take this week:</Label>\n              <Input\n                placeholder=\"A concrete step toward this value\"\n                value={valuesData.actionPlan[valueKey].weeklyAction}\n                onChange={(e) => updateActionPlan(valueKey, 'weeklyAction', e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n\n  const steps = [\n    { number: 1, title: \"Life Areas\", icon: Heart },\n    { number: 2, title: \"Clarification\", icon: Target },\n    { number: 3, title: \"Top 3 Values\", icon: Users },\n    { number: 4, title: \"Action Plan\", icon: Sparkles }\n  ];\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Values Assessment Worksheet</span>\n          <Button variant=\"outline\" size=\"sm\" onClick={exportWorksheet}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n        </CardTitle>\n        \n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-between mt-4\">\n          {steps.map((step, index) => {\n            const IconComponent = step.icon;\n            const isActive = currentStep === step.number;\n            const isCompleted = currentStep > step.number;\n            \n            return (\n              <div key={step.number} className=\"flex items-center\">\n                <div className={`flex items-center justify-center w-8 h-8 rounded-full border-2 transition-colors ${\n                  isActive ? 'border-primary bg-primary text-primary-foreground' :\n                  isCompleted ? 'border-green-500 bg-green-500 text-white' :\n                  'border-muted-foreground bg-background'\n                }`}>\n                  <IconComponent className=\"w-4 h-4\" />\n                </div>\n                <span className=\"ml-2 text-sm font-medium\">{step.title}</span>\n                {index < steps.length - 1 && (\n                  <div className=\"w-8 h-0.5 bg-muted mx-4\" />\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-6\">\n          {currentStep === 1 && renderStep1()}\n          {currentStep === 2 && renderStep2()}\n          {currentStep === 3 && renderStep3()}\n          {currentStep === 4 && renderStep4()}\n          \n          <Separator />\n          \n          <div className=\"flex justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n              disabled={currentStep === 1}\n            >\n              Previous\n            </Button>\n            \n            <Button\n              onClick={() => setCurrentStep(Math.min(4, currentStep + 1))}\n              disabled={currentStep === 4}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":19112},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/pdf-generator.ts":{"content":"import jsPDF from 'jspdf';\nimport type { User, OnboardingResponse, WeeklyAssessment, AnxietyModule } from '@shared/schema';\n\ninterface ReportData {\n  user: User;\n  onboarding: OnboardingResponse;\n  assessments: WeeklyAssessment[];\n  modules: AnxietyModule[];\n  generatedAt: Date;\n}\n\nexport function generateProgressReport(data: ReportData): jsPDF {\n  const doc = new jsPDF();\n  let yPos = 20;\n  \n  // Header\n  doc.setFontSize(20);\n  doc.setFont('helvetica', 'bold');\n  doc.text('Waitlist Companion™ Progress Report', 20, yPos);\n  yPos += 10;\n  \n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'normal');\n  doc.text('Interim Care Support - Clinical Handoff Document', 20, yPos);\n  yPos += 20;\n  \n  // Patient Information\n  doc.setFontSize(16);\n  doc.setFont('helvetica', 'bold');\n  doc.text('Patient Information', 20, yPos);\n  yPos += 10;\n  \n  doc.setFontSize(11);\n  doc.setFont('helvetica', 'normal');\n  doc.text(`Name: ${data.user.firstName} ${data.user.lastName}`, 20, yPos);\n  yPos += 6;\n  doc.text(`Email: ${data.user.email}`, 20, yPos);\n  yPos += 6;\n  if (data.user.nhsNumber) {\n    doc.text(`NHS Number: ${data.user.nhsNumber}`, 20, yPos);\n    yPos += 6;\n  }\n  doc.text(`Report Generated: ${data.generatedAt.toLocaleDateString('en-GB')}`, 20, yPos);\n  yPos += 15;\n  \n  // Baseline Assessment\n  doc.setFontSize(16);\n  doc.setFont('helvetica', 'bold');\n  doc.text('Baseline Assessment', 20, yPos);\n  yPos += 10;\n  \n  doc.setFontSize(11);\n  doc.setFont('helvetica', 'normal');\n  doc.text(`Initial Risk Score: ${data.onboarding.riskScore}/15`, 20, yPos);\n  yPos += 6;\n  doc.text(`Baseline Anxiety Level: ${data.onboarding.baselineAnxietyLevel}`, 20, yPos);\n  yPos += 6;\n  doc.text(`Completed: ${data.onboarding.completedAt?.toLocaleDateString('en-GB')}`, 20, yPos);\n  yPos += 15;\n  \n  // Weekly Assessments\n  if (data.assessments.length > 0) {\n    doc.setFontSize(16);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Weekly Risk Assessments', 20, yPos);\n    yPos += 10;\n    \n    data.assessments.forEach((assessment, index) => {\n      if (yPos > 270) {\n        doc.addPage();\n        yPos = 20;\n      }\n      \n      doc.setFontSize(11);\n      doc.setFont('helvetica', 'normal');\n      doc.text(`Week ${assessment.weekNumber}: Risk Score ${assessment.riskScore}/15 (${assessment.riskLevel})`, 20, yPos);\n      yPos += 6;\n      doc.text(`Completed: ${assessment.completedAt?.toLocaleDateString('en-GB')}`, 25, yPos);\n      yPos += 8;\n    });\n    yPos += 10;\n  }\n  \n  // Module Progress\n  doc.setFontSize(16);\n  doc.setFont('helvetica', 'bold');\n  doc.text('6-Week Anxiety Support Track Progress', 20, yPos);\n  yPos += 10;\n  \n  const completedModules = data.modules.filter(m => m.completedAt);\n  const totalMinutes = data.modules.reduce((sum, m) => sum + (m.minutesCompleted || 0), 0);\n  const totalEstimatedMinutes = data.modules.reduce((sum, m) => sum + m.estimatedMinutes, 0);\n  const completionRate = totalEstimatedMinutes > 0 ? Math.round((totalMinutes / totalEstimatedMinutes) * 100) : 0;\n  \n  doc.setFontSize(11);\n  doc.setFont('helvetica', 'normal');\n  doc.text(`Overall Completion: ${completionRate}% (${totalMinutes}/${totalEstimatedMinutes} minutes)`, 20, yPos);\n  yPos += 6;\n  doc.text(`Modules Completed: ${completedModules.length}/6`, 20, yPos);\n  yPos += 10;\n  \n  data.modules.forEach((module, index) => {\n    if (yPos > 270) {\n      doc.addPage();\n      yPos = 20;\n    }\n    \n    doc.text(`Week ${module.weekNumber}: ${module.title}`, 20, yPos);\n    yPos += 6;\n    const status = module.completedAt ? 'Completed' : module.isLocked ? 'Locked' : 'In Progress';\n    doc.text(`Status: ${status} | Progress: ${module.minutesCompleted}/${module.estimatedMinutes} min`, 25, yPos);\n    yPos += 8;\n  });\n  \n  // Clinical Recommendations\n  if (yPos > 240) {\n    doc.addPage();\n    yPos = 20;\n  }\n  \n  yPos += 10;\n  doc.setFontSize(16);\n  doc.setFont('helvetica', 'bold');\n  doc.text('Clinical Recommendations', 20, yPos);\n  yPos += 10;\n  \n  doc.setFontSize(11);\n  doc.setFont('helvetica', 'normal');\n  \n  const latestRisk = data.assessments[0]?.riskLevel || data.onboarding.baselineAnxietyLevel;\n  \n  if (latestRisk === \"crisis\" || latestRisk === \"high\") {\n    doc.text('• URGENT: High risk profile requires immediate clinical assessment', 20, yPos);\n    yPos += 6;\n    doc.text('• Consider expedited appointment or crisis intervention', 20, yPos);\n    yPos += 6;\n  } else if (latestRisk === \"moderate\") {\n    doc.text('• Moderate risk profile suitable for standard IAPT referral', 20, yPos);\n    yPos += 6;\n    doc.text('• Patient has engaged well with interim support materials', 20, yPos);\n    yPos += 6;\n  } else {\n    doc.text('• Low risk profile with good engagement in self-help materials', 20, yPos);\n    yPos += 6;\n    doc.text('• Consider group therapy or lower intensity interventions', 20, yPos);\n    yPos += 6;\n  }\n  \n  doc.text('• Patient demonstrates commitment to recovery through app engagement', 20, yPos);\n  yPos += 6;\n  doc.text('• Recommend continuity of cognitive-behavioral approaches', 20, yPos);\n  \n  return doc;\n}\n","size_bytes":5069},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/risk-calculator.ts":{"content":"export function calculateRiskScore(responses: Record<string, any>): number {\n  let score = 0;\n  \n  // PHQ-4 questions (0-3 each)\n  if (responses.anxietyFrequency !== undefined) score += parseInt(responses.anxietyFrequency);\n  if (responses.worryFrequency !== undefined) score += parseInt(responses.worryFrequency);\n  if (responses.depressionFrequency !== undefined) score += parseInt(responses.depressionFrequency);\n  if (responses.anhedoniaFrequency !== undefined) score += parseInt(responses.anhedoniaFrequency);\n  \n  // Additional risk factors\n  if (responses.sleepQuality === \"poor\") score += 1;\n  if (responses.suicidalThoughts === \"yes\") score += 5;\n  if (responses.selfHarm === \"yes\") score += 3;\n  if (responses.substanceUse === \"increased\") score += 2;\n  if (responses.socialWithdrawal === \"significant\") score += 1;\n  if (responses.functioningImpairment === \"severe\") score += 2;\n  \n  return Math.min(score, 15);\n}\n\nexport function determineRiskLevel(score: number): string {\n  if (score >= 12) return \"crisis\";\n  if (score >= 8) return \"high\";\n  if (score >= 5) return \"moderate\";\n  return \"low\";\n}\n\nexport function shouldEscalate(riskLevel: string): boolean {\n  return riskLevel === \"crisis\" || riskLevel === \"high\";\n}\n\nexport function getRiskColor(riskLevel: string): string {\n  switch (riskLevel) {\n    case \"crisis\": return \"destructive\";\n    case \"high\": return \"destructive\";\n    case \"moderate\": return \"primary\";\n    case \"low\": return \"accent\";\n    default: return \"muted\";\n  }\n}\n","size_bytes":1500},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/anxiety-track.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Header } from \"@/components/ui/header\";\nimport { TabNavigation } from \"@/components/ui/tab-navigation\";\nimport { CrisisBanner } from \"@/components/ui/crisis-banner\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Check, \n  Play, \n  Lock, \n  Clock, \n  List, \n  Target, \n  BookOpen, \n  Heart, \n  Brain, \n  Users, \n  Award,\n  TrendingUp,\n  Calendar,\n  Timer,\n  ChevronRight,\n  Star,\n  CheckCircle2\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Footer } from \"@/components/ui/footer\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function AnxietyTrack() {\n  const mockUserId = \"user-1\";\n  const [selectedTab, setSelectedTab] = useState(\"modules\");\n\n  const { data: modulesData, isLoading } = useQuery({\n    queryKey: [\"/api/modules\", mockUserId],\n  });\n\n  const { data: dashboardData } = useQuery({\n    queryKey: [\"/api/dashboard\", mockUserId],\n  });\n\n  const updateModuleMutation = useMutation({\n    mutationFn: async ({ moduleId, updates }: { moduleId: string; updates: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/modules/${moduleId}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/modules\", mockUserId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\", mockUserId] });\n    },\n  });\n\n  const handleContinueModule = (module: any) => {\n    // Simulate progress - in real app this would track actual activity completion\n    const newMinutesCompleted = Math.min(\n      module.minutesCompleted + 10, \n      module.estimatedMinutes\n    );\n    \n    const updates: any = { minutesCompleted: newMinutesCompleted };\n    \n    if (newMinutesCompleted >= module.estimatedMinutes) {\n      updates.completedAt = new Date();\n      updates.activitiesCompleted = module.activitiesTotal;\n    }\n    \n    updateModuleMutation.mutate({\n      moduleId: module.id,\n      updates,\n    });\n  };\n\n  const handleCompleteModule = (module: any) => {\n    const updates = {\n      completedAt: new Date().toISOString(),\n      minutesCompleted: module.estimatedMinutes,\n      activitiesCompleted: module.activitiesTotal\n    };\n    \n    updateModuleMutation.mutate({\n      moduleId: module.id,\n      updates,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">Loading modules...</div>\n      </div>\n    );\n  }\n\n  const modules = (modulesData as any)?.modules || [];\n  const dashboard = (dashboardData as any)?.dashboardData || {};\n\n  const getModuleIcon = (weekNumber: number) => {\n    const icons = {\n      1: BookOpen,  // Understanding\n      2: Heart,     // Breathing\n      3: Brain,     // Cognitive\n      4: Target,    // Mindfulness\n      5: Users,     // Behavioral\n      6: Award      // Prevention\n    };\n    return icons[weekNumber as keyof typeof icons] || BookOpen;\n  };\n\n  const getModuleColor = (weekNumber: number, isCompleted: boolean, isInProgress: boolean, isLocked: boolean) => {\n    if (isCompleted) return \"bg-green-100 border-green-300 dark:bg-green-900/20 dark:border-green-800\";\n    if (isInProgress) return \"bg-blue-100 border-blue-300 dark:bg-blue-900/20 dark:border-blue-800\";\n    if (isLocked) return \"bg-gray-50 border-gray-200 dark:bg-gray-900/20 dark:border-gray-800\";\n    return \"bg-background border-border\";\n  };\n\n  const getDetailedModuleInfo = (weekNumber: number) => {\n    const details = {\n      1: {\n        keySkills: [\"Understanding anxiety triggers\", \"Recognizing physical symptoms\", \"Building self-awareness\"],\n        techniques: [\"Anxiety symptom tracking\", \"Trigger identification\", \"Body awareness exercises\"],\n        evidence: \"Based on CBT psychoeducation principles\"\n      },\n      2: {\n        keySkills: [\"Diaphragmatic breathing\", \"Progressive muscle relaxation\", \"Quick calming techniques\"],\n        techniques: [\"4-7-8 breathing\", \"Box breathing\", \"Body scan relaxation\"],\n        evidence: \"Proven techniques from anxiety management research\"\n      },\n      3: {\n        keySkills: [\"Identifying thought patterns\", \"Challenging anxious thoughts\", \"Balanced thinking\"],\n        techniques: [\"Thought records\", \"Evidence examination\", \"Cognitive restructuring\"],\n        evidence: \"Core CBT techniques with strong research support\"\n      },\n      4: {\n        keySkills: [\"Present moment awareness\", \"Grounding techniques\", \"Mindful breathing\"],\n        techniques: [\"5-4-3-2-1 grounding\", \"Mindful observation\", \"Body grounding\"],\n        evidence: \"Mindfulness-based interventions for anxiety\"\n      },\n      5: {\n        keySkills: [\"Facing fears gradually\", \"Activity scheduling\", \"Confidence building\"],\n        techniques: [\"Exposure hierarchy\", \"Behavioral experiments\", \"Activity planning\"],\n        evidence: \"Behavioral activation and exposure therapy principles\"\n      },\n      6: {\n        keySkills: [\"Maintaining progress\", \"Relapse prevention\", \"Long-term planning\"],\n        techniques: [\"Warning sign recognition\", \"Coping plan development\", \"Support planning\"],\n        evidence: \"Relapse prevention model for sustained recovery\"\n      }\n    };\n    return details[weekNumber as keyof typeof details] || details[1];\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <CrisisBanner />\n      <TabNavigation />\n      \n      <main className=\"flex-1 bg-background\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          \n          {/* Header Section */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-foreground mb-3\">6-Week Anxiety Support Track</h1>\n            <p className=\"text-lg text-muted-foreground mb-4\">\n              Evidence-based modules designed to help you manage anxiety while waiting for NHS support\n            </p>\n            \n            {/* Key Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-6\">\n              <Card className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"w-5 h-5 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-completion-rate\">\n                      {dashboard.completionRate || 0}%\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Complete</p>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                    <Timer className=\"w-5 h-5 text-accent\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-total-minutes\">\n                      {dashboard.totalMinutes || 0}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Minutes</p>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center dark:bg-green-900/20\">\n                    <Calendar className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-current-week\">\n                      Week {dashboard.currentWeek || 1}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Current</p>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center dark:bg-blue-900/20\">\n                    <Star className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\">\n                      {modules.filter((m: any) => m.completedAt).length}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Completed</p>\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n\n          {/* Main Content Tabs */}\n          <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-6\">\n            <TabsList className=\"grid grid-cols-3 w-full max-w-md\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"modules\">Modules</TabsTrigger>\n              <TabsTrigger value=\"progress\">Progress</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              {/* Quick Progress Overview */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"w-5 h-5\" />\n                    Your Progress Journey\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span>Overall Progress</span>\n                      <span className=\"font-medium\">{dashboard.completionRate || 0}% Complete</span>\n                    </div>\n                    <Progress value={dashboard.completionRate || 0} className=\"h-3\" />\n                    \n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mt-6\">\n                      {modules.slice(0, 6).map((module: any) => {\n                        const IconComponent = getModuleIcon(module.weekNumber);\n                        const isCompleted = module.completedAt;\n                        const isInProgress = !module.isLocked && !isCompleted;\n                        \n                        return (\n                          <div key={module.id} className=\"flex items-center gap-3 p-3 rounded-lg border\">\n                            <div className={cn(\n                              \"w-8 h-8 rounded-full flex items-center justify-center\",\n                              isCompleted ? \"bg-green-100 dark:bg-green-900/20\" :\n                              isInProgress ? \"bg-blue-100 dark:bg-blue-900/20\" :\n                              \"bg-gray-100 dark:bg-gray-900/20\"\n                            )}>\n                              {isCompleted ? (\n                                <CheckCircle2 className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n                              ) : (\n                                <IconComponent className={cn(\n                                  \"w-4 h-4\",\n                                  isInProgress ? \"text-blue-600 dark:text-blue-400\" : \"text-gray-400\"\n                                )} />\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm font-medium truncate\">Week {module.weekNumber}</p>\n                              <p className=\"text-xs text-muted-foreground truncate\">\n                                {isCompleted ? \"Complete\" : isInProgress ? \"In Progress\" : \"Locked\"}\n                              </p>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Current Week Spotlight */}\n              {modules.find((m: any) => !m.completedAt && !m.isLocked) && (\n                <Card className=\"border-primary/20 bg-primary/5\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Play className=\"w-5 h-5 text-primary\" />\n                      Continue Your Journey\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {(() => {\n                      const currentModule = modules.find((m: any) => !m.completedAt && !m.isLocked);\n                      if (!currentModule) return null;\n                      \n                      const IconComponent = getModuleIcon(currentModule.weekNumber);\n                      const details = getDetailedModuleInfo(currentModule.weekNumber);\n                      \n                      return (\n                        <div className=\"space-y-4\">\n                          <div className=\"flex items-start gap-4\">\n                            <div className=\"w-12 h-12 bg-primary/10 rounded-xl flex items-center justify-center flex-shrink-0\">\n                              <IconComponent className=\"w-6 h-6 text-primary\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <h3 className=\"font-semibold text-lg\">Week {currentModule.weekNumber}: {currentModule.title}</h3>\n                              <p className=\"text-muted-foreground mb-3\">{currentModule.description}</p>\n                              \n                              <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                                <div>\n                                  <h4 className=\"font-medium mb-2\">Key Skills You'll Learn:</h4>\n                                  <ul className=\"space-y-1 text-muted-foreground\">\n                                    {details.keySkills.map((skill, idx) => (\n                                      <li key={idx} className=\"flex items-center gap-2\">\n                                        <div className=\"w-1.5 h-1.5 bg-primary rounded-full\" />\n                                        {skill}\n                                      </li>\n                                    ))}\n                                  </ul>\n                                </div>\n                                <div>\n                                  <h4 className=\"font-medium mb-2\">Techniques & Tools:</h4>\n                                  <ul className=\"space-y-1 text-muted-foreground\">\n                                    {details.techniques.map((technique, idx) => (\n                                      <li key={idx} className=\"flex items-center gap-2\">\n                                        <div className=\"w-1.5 h-1.5 bg-accent rounded-full\" />\n                                        {technique}\n                                      </li>\n                                    ))}\n                                  </ul>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between pt-4 border-t border-primary/10\">\n                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                              <span className=\"flex items-center gap-1\">\n                                <Clock className=\"w-4 h-4\" />\n                                {currentModule.estimatedMinutes} minutes\n                              </span>\n                              <span className=\"flex items-center gap-1\">\n                                <List className=\"w-4 h-4\" />\n                                {currentModule.activitiesTotal} activities\n                              </span>\n                            </div>\n                            <Link href={`/anxiety-track/module/${currentModule.weekNumber}`}>\n                              <Button className=\"flex items-center gap-2\" data-testid={`button-start-module-${currentModule.weekNumber}`}>\n                                Start Module\n                                <ChevronRight className=\"w-4 h-4\" />\n                              </Button>\n                            </Link>\n                          </div>\n                        </div>\n                      );\n                    })()} \n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"modules\" className=\"space-y-4\">\n              {/* Enhanced Module Cards */}\n              {modules.map((module: any) => {\n                const isCompleted = !!module.completedAt;\n                const isLocked = module.isLocked === true;\n                const isInProgress = !isLocked && !isCompleted;\n                const progressPercentage = module.estimatedMinutes > 0 ? \n                  Math.round((module.minutesCompleted / module.estimatedMinutes) * 100) : 0;\n                  \n                const IconComponent = getModuleIcon(module.weekNumber);\n                const details = getDetailedModuleInfo(module.weekNumber);\n\n                return (\n                  <Card \n                    key={module.id}\n                    className={cn(\n                      \"overflow-hidden transition-all hover:shadow-md\",\n                      getModuleColor(module.weekNumber, isCompleted, isInProgress, isLocked),\n                      isInProgress && \"ring-2 ring-primary/20\"\n                    )}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"space-y-4\">\n                        {/* Header */}\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex items-start gap-4 flex-1\">\n                            <div className={cn(\n                              \"w-14 h-14 rounded-xl flex items-center justify-center flex-shrink-0\",\n                              isCompleted ? \"bg-green-500 text-white\" :\n                              isInProgress ? \"bg-primary text-primary-foreground\" :\n                              \"bg-muted text-muted-foreground\"\n                            )}>\n                              {isCompleted ? (\n                                <Check className=\"w-7 h-7\" />\n                              ) : isLocked ? (\n                                <Lock className=\"w-7 h-7\" />\n                              ) : (\n                                <IconComponent className=\"w-7 h-7\" />\n                              )}\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3 mb-2\">\n                                <h3 className=\"text-xl font-semibold text-card-foreground\">\n                                  Week {module.weekNumber}: {module.title}\n                                </h3>\n                                <Badge \n                                  variant={isCompleted ? \"default\" : isInProgress ? \"secondary\" : \"outline\"}\n                                  className={cn(\n                                    isCompleted && \"bg-green-100 text-green-800 hover:bg-green-100 dark:bg-green-900/20 dark:text-green-400\",\n                                    isInProgress && \"bg-blue-100 text-blue-800 hover:bg-blue-100 dark:bg-blue-900/20 dark:text-blue-400\"\n                                  )}\n                                >\n                                  {isCompleted ? \"Completed\" : isInProgress ? \"In Progress\" : \"Locked\"}\n                                </Badge>\n                              </div>\n                              <p className=\"text-muted-foreground mb-4 leading-relaxed\">{module.description}</p>\n                              \n                              {/* Module Stats */}\n                              <div className=\"flex items-center gap-6 text-sm text-muted-foreground mb-4\">\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"w-4 h-4\" />\n                                  {module.estimatedMinutes} min\n                                </span>\n                                <span className=\"flex items-center gap-1\">\n                                  <List className=\"w-4 h-4\" />\n                                  {module.activitiesTotal} activities\n                                </span>\n                                <span className=\"flex items-center gap-1\">\n                                  <Target className=\"w-4 h-4\" />\n                                  {details.keySkills.length} skills\n                                </span>\n                              </div>\n                              \n                              {/* Progress Bar */}\n                              {isInProgress && (\n                                <div className=\"space-y-2\">\n                                  <div className=\"flex justify-between text-sm\">\n                                    <span className=\"text-muted-foreground\">Progress</span>\n                                    <span className=\"font-medium\">{progressPercentage}%</span>\n                                  </div>\n                                  <Progress value={progressPercentage} className=\"h-2\" />\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    {module.minutesCompleted} of {module.estimatedMinutes} minutes completed\n                                  </p>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Expandable Details */}\n                        {!isLocked && (\n                          <div className=\"grid md:grid-cols-2 gap-4 pt-4 border-t border-border/50\">\n                            <div>\n                              <h4 className=\"font-medium text-sm mb-2 text-muted-foreground uppercase tracking-wide\">What You'll Learn</h4>\n                              <ul className=\"space-y-1 text-sm\">\n                                {details.keySkills.slice(0, 3).map((skill, idx) => (\n                                  <li key={idx} className=\"flex items-center gap-2\">\n                                    <CheckCircle2 className=\"w-3 h-3 text-primary flex-shrink-0\" />\n                                    {skill}\n                                  </li>\n                                ))}\n                              </ul>\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium text-sm mb-2 text-muted-foreground uppercase tracking-wide\">Evidence Base</h4>\n                              <p className=\"text-sm text-muted-foreground italic\">{details.evidence}</p>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Action Buttons */}\n                        <div className=\"flex items-center justify-between pt-4\">\n                          <div className=\"flex items-center gap-2\">\n                            {isCompleted && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                Completed {new Date(module.completedAt).toLocaleDateString()}\n                              </Badge>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex gap-2\">\n                            {isCompleted && (\n                              <Link href={`/anxiety-track/module/${module.weekNumber}`}>\n                                <Button variant=\"outline\" size=\"sm\" data-testid={`button-review-module-${module.weekNumber}`}>\n                                  Review Module\n                                </Button>\n                              </Link>\n                            )}\n                            \n                            {isInProgress && (\n                              <>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => handleContinueModule(module)}\n                                  disabled={updateModuleMutation.isPending}\n                                  data-testid={`button-quick-continue-${module.weekNumber}`}\n                                >\n                                  Quick Practice\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => handleCompleteModule(module)}\n                                  disabled={updateModuleMutation.isPending}\n                                  data-testid={`button-complete-module-${module.weekNumber}`}\n                                >\n                                  Mark Complete\n                                </Button>\n                                <Link href={`/anxiety-track/module/${module.weekNumber}`}>\n                                  <Button size=\"sm\" data-testid={`button-enter-module-${module.weekNumber}`}>\n                                    Enter Module\n                                  </Button>\n                                </Link>\n                              </>\n                            )}\n                            \n                            {isLocked && (\n                              <Button size=\"sm\" disabled>\n                                <Lock className=\"w-4 h-4 mr-2\" />\n                                Locked\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </TabsContent>\n\n            <TabsContent value=\"progress\" className=\"space-y-6\">\n              {/* Detailed Progress Analytics */}\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-5 h-5\" />\n                      Weekly Progress\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {modules.map((module: any) => {\n                        const isCompleted = module.completedAt;\n                        const progressPercentage = module.estimatedMinutes > 0 ? \n                          Math.round((module.minutesCompleted / module.estimatedMinutes) * 100) : 0;\n                        \n                        return (\n                          <div key={module.id} className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Week {module.weekNumber}: {module.title}</span>\n                              <span className={cn(\n                                \"font-medium\",\n                                isCompleted ? \"text-green-600 dark:text-green-400\" : \"text-muted-foreground\"\n                              )}>\n                                {isCompleted ? \"100%\" : `${progressPercentage}%`}\n                              </span>\n                            </div>\n                            <Progress \n                              value={isCompleted ? 100 : progressPercentage} \n                              className={cn(\n                                \"h-2\",\n                                isCompleted && \"[&>[role=progressbar]]:bg-green-500\"\n                              )} \n                            />\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Award className=\"w-5 h-5\" />\n                      Achievements\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/50\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <Timer className=\"w-4 h-4 text-primary\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-sm\">Time Invested</p>\n                          <p className=\"text-xs text-muted-foreground\">{dashboard.totalMinutes || 0} minutes of learning</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/50\">\n                        <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center dark:bg-green-900/20\">\n                          <CheckCircle2 className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-sm\">Modules Completed</p>\n                          <p className=\"text-xs text-muted-foreground\">{modules.filter((m: any) => m.completedAt).length} of 6 modules</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/50\">\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center dark:bg-blue-900/20\">\n                          <Target className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-sm\">Current Streak</p>\n                          <p className=\"text-xs text-muted-foreground\">Building healthy habits</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":31032},"client/src/pages/check-ins.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/ui/header\";\nimport { TabNavigation } from \"@/components/ui/tab-navigation\";\nimport { CrisisBanner } from \"@/components/ui/crisis-banner\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormMessage } from \"@/components/ui/form\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Check, ArrowLeft, ArrowRight, Eye } from \"lucide-react\";\nimport { calculateRiskScore, determineRiskLevel, getRiskColor } from \"@/lib/risk-calculator\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Footer } from \"@/components/ui/footer\";\n\nconst weeklyAssessmentSchema = z.object({\n  anxietyFrequency: z.string(),\n  worryFrequency: z.string(),\n  depressionFrequency: z.string(),\n  anhedoniaFrequency: z.string(),\n  sleepQuality: z.string(),\n  functioningLevel: z.string(),\n});\n\nconst questions = [\n  {\n    id: \"anxietyFrequency\",\n    question: \"Over the past week, how often have you been bothered by feeling nervous, anxious, or on edge?\",\n  },\n  {\n    id: \"worryFrequency\", \n    question: \"Over the past week, how often have you been bothered by not being able to stop or control worrying?\",\n  },\n  {\n    id: \"depressionFrequency\",\n    question: \"Over the past week, how often have you been bothered by feeling down, depressed, or hopeless?\",\n  },\n  {\n    id: \"anhedoniaFrequency\",\n    question: \"Over the past week, how often have you been bothered by little interest or pleasure in doing things?\",\n  },\n  {\n    id: \"sleepQuality\",\n    question: \"How would you describe your sleep quality this week?\",\n    options: [\n      { value: \"excellent\", label: \"Excellent\" },\n      { value: \"good\", label: \"Good\" }, \n      { value: \"fair\", label: \"Fair\" },\n      { value: \"poor\", label: \"Poor\" },\n    ],\n  },\n  {\n    id: \"functioningLevel\",\n    question: \"How has anxiety affected your daily functioning this week?\",\n    options: [\n      { value: \"not-at-all\", label: \"Not at all\" },\n      { value: \"slightly\", label: \"Slightly\" },\n      { value: \"moderately\", label: \"Moderately\" },\n      { value: \"severely\", label: \"Severely\" },\n    ],\n  },\n];\n\nconst frequencyOptions = [\n  { value: \"0\", label: \"Not at all\" },\n  { value: \"1\", label: \"Several days\" },\n  { value: \"2\", label: \"More than half the days\" },\n  { value: \"3\", label: \"Nearly every day\" },\n];\n\nexport default function CheckIns() {\n  const mockUserId = \"user-1\";\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showHistory, setShowHistory] = useState(false);\n  const [selectedAssessment, setSelectedAssessment] = useState<any>(null);\n  const [showAssessmentDetail, setShowAssessmentDetail] = useState(false);\n\n  const { data: assessmentsData, isLoading } = useQuery({\n    queryKey: [\"/api/assessments\", mockUserId],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(weeklyAssessmentSchema),\n    defaultValues: {\n      anxietyFrequency: \"\",\n      worryFrequency: \"\",\n      depressionFrequency: \"\",\n      anhedoniaFrequency: \"\",\n      sleepQuality: \"\",\n      functioningLevel: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n  const createAssessmentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/assessments\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assessments\", mockUserId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\", mockUserId] });\n      setShowHistory(true);\n      form.reset();\n      setCurrentQuestion(0);\n    },\n  });\n\n  const onNext = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      handleSubmit();\n    }\n  };\n\n  const onPrevious = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  };\n\n  const handleSubmit = () => {\n    const responses = form.getValues();\n    const weekNumber = ((assessmentsData as any)?.assessments?.length || 0) + 1;\n    \n    createAssessmentMutation.mutate({\n      userId: mockUserId,\n      weekNumber,\n      responses,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">Loading assessments...</div>\n      </div>\n    );\n  }\n\n  const assessments = (assessmentsData as any)?.assessments || [];\n  const hasCompletedThisWeek = assessments.some((a: any) => {\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n    return new Date(a.completedAt) > oneWeekAgo;\n  });\n\n  if (showHistory || hasCompletedThisWeek) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n        <CrisisBanner />\n        <TabNavigation />\n        \n        <main className=\"flex-1 bg-background\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            <div className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Weekly Check-ins</h2>\n              <p className=\"text-muted-foreground\">Regular assessments to monitor your wellbeing and ensure your safety</p>\n            </div>\n\n            {hasCompletedThisWeek && (\n              <Card className=\"mb-8\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center\">\n                    <Check className=\"w-12 h-12 text-accent mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">\n                      This week's assessment completed\n                    </h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Thank you for completing your weekly check-in. Your next assessment will be due in 7 days.\n                    </p>\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => setShowHistory(false)}\n                      data-testid=\"button-take-new-assessment\"\n                    >\n                      Take Another Assessment\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Assessment History */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-semibold text-card-foreground mb-6\">Assessment History</h3>\n                \n                <div className=\"space-y-4\">\n                  {assessments.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <p>No assessments completed yet.</p>\n                      <Button \n                        className=\"mt-4\"\n                        onClick={() => setShowHistory(false)}\n                        data-testid=\"button-start-first-assessment\"\n                      >\n                        Take Your First Assessment\n                      </Button>\n                    </div>\n                  ) : (\n                    assessments.map((assessment: any, index: number) => (\n                      <div key={assessment.id} className=\"flex items-center justify-between p-4 bg-secondary rounded-md\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center\">\n                            <Check className=\"w-5 h-5 text-accent-foreground\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-card-foreground\">\n                              Week {assessment.weekNumber} Assessment\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                              <span>\n                                Completed {new Date(assessment.completedAt).toLocaleDateString()}\n                              </span>\n                              <Badge variant={getRiskColor(assessment.riskLevel) as any}>\n                                Risk: {assessment.riskLevel}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedAssessment(assessment);\n                            setShowAssessmentDetail(true);\n                          }}\n                          data-testid={`button-view-assessment-${assessment.weekNumber}`}\n                        >\n                          <Eye className=\"w-4 h-4 mr-1\" />\n                          View Details\n                        </Button>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const currentQ = questions[currentQuestion];\n  const progress = ((currentQuestion + 1) / questions.length) * 100;\n  const questionOptions = currentQ.options || frequencyOptions;\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <CrisisBanner />\n      <TabNavigation />\n      \n      <main className=\"flex-1 bg-background\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Weekly Check-ins</h2>\n                <p className=\"text-muted-foreground\">Regular assessments to monitor your wellbeing and ensure your safety</p>\n              </div>\n              {assessments.length > 0 && (\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowHistory(true)}\n                  data-testid=\"button-view-history\"\n                >\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  View History\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Current Check-in Form */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-semibold text-card-foreground\">This Week's Assessment</h3>\n                <Badge className=\"bg-primary/10 text-primary\">Due Today</Badge>\n              </div>\n\n              <div className=\"mb-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Question {currentQuestion + 1} of {questions.length}\n                  </span>\n                  <span className=\"text-sm text-muted-foreground\">\n                    ~{Math.ceil((questions.length - currentQuestion) * 0.75)} min remaining\n                  </span>\n                </div>\n                <Progress value={progress} />\n              </div>\n\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-lg font-medium text-card-foreground mb-4\">\n                    {currentQ.question}\n                  </label>\n                  \n                  <div className=\"space-y-3\">\n                    {questionOptions.map((option) => (\n                      <div \n                        key={option.value}\n                        className={`flex items-center p-4 border rounded-md cursor-pointer transition-colors ${\n                          form.watch(currentQ.id as any) === option.value \n                            ? 'border-primary bg-primary/5' \n                            : 'border-border hover:bg-secondary/50'\n                        }`}\n                        onClick={() => {\n                          form.setValue(currentQ.id as any, option.value);\n                        }}\n                        data-testid={`option-${currentQ.id}-${option.value}`}\n                      >\n                        <div className={`w-4 h-4 rounded-full border-2 mr-3 flex items-center justify-center ${\n                          form.watch(currentQ.id as any) === option.value \n                            ? 'border-primary' \n                            : 'border-gray-300'\n                        }`}>\n                          {form.watch(currentQ.id as any) === option.value && (\n                            <div className=\"w-2 h-2 rounded-full bg-primary\" />\n                          )}\n                        </div>\n                        <span className=\"text-card-foreground flex-1\">\n                          {option.label}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between pt-6\">\n                  <Button \n                    variant=\"outline\"\n                    onClick={onPrevious}\n                    disabled={currentQuestion === 0}\n                    data-testid=\"button-previous-question\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                    Previous\n                  </Button>\n                  \n                  <Button \n                    onClick={onNext}\n                    disabled={!form.watch(currentQ.id as any) || createAssessmentMutation.isPending}\n                    data-testid=\"button-next-question\"\n                  >\n                    {currentQuestion === questions.length - 1 ? \"Complete Assessment\" : \"Next\"}\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      <Footer />\n\n      {/* Assessment Details Dialog */}\n      <Dialog open={showAssessmentDetail} onOpenChange={setShowAssessmentDetail}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>\n              Week {selectedAssessment?.weekNumber} Assessment Details\n            </DialogTitle>\n          </DialogHeader>\n          {selectedAssessment ? (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Completed:</span>\n                  <p>{new Date(selectedAssessment.completedAt).toLocaleDateString()}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Risk Level:</span>\n                  <p>\n                    <Badge variant={getRiskColor(selectedAssessment.riskLevel) as any}>\n                      {selectedAssessment.riskLevel}\n                    </Badge>\n                  </p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Risk Score:</span>\n                  <p>{selectedAssessment.riskScore}/15</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Week Number:</span>\n                  <p>Week {selectedAssessment.weekNumber}</p>\n                </div>\n              </div>\n              \n              <div className=\"border-t pt-4\">\n                <h4 className=\"font-medium mb-3 text-card-foreground\">Response Summary</h4>\n                <div className=\"space-y-2 text-sm\">\n                  {selectedAssessment.responses && Object.entries(selectedAssessment.responses).map(([key, value]: [string, any]) => {\n                    const questionMap: Record<string, string> = {\n                      anxietyFrequency: \"Anxiety frequency\",\n                      worryFrequency: \"Worry frequency\", \n                      depressionFrequency: \"Depression frequency\",\n                      anhedoniaFrequency: \"Loss of interest frequency\",\n                      sleepQuality: \"Sleep quality\",\n                      functioningLevel: \"Daily functioning level\"\n                    };\n                    \n                    const valueMap: Record<string, string> = {\n                      \"0\": \"Not at all\",\n                      \"1\": \"Several days\", \n                      \"2\": \"More than half the days\",\n                      \"3\": \"Nearly every day\",\n                      \"excellent\": \"Excellent\",\n                      \"good\": \"Good\",\n                      \"fair\": \"Fair\", \n                      \"poor\": \"Poor\",\n                      \"not-at-all\": \"Not at all\",\n                      \"slightly\": \"Slightly\",\n                      \"moderately\": \"Moderately\",\n                      \"severely\": \"Severely\"\n                    };\n                    \n                    return (\n                      <div key={key} className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">{questionMap[key]}:</span>\n                        <span className=\"font-medium\">{valueMap[value] || value}</span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              No assessment data available\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":18011},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/ui/header\";\nimport { TabNavigation } from \"@/components/ui/tab-navigation\";\nimport { CrisisBanner } from \"@/components/ui/crisis-banner\";\nimport { ProgressRing } from \"@/components/ui/progress-ring\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Shield, TrendingUp, Clock, Bell, GraduationCap, FileText, Wind, Smile, BarChart3, Headphones, Phone, MessageCircle, ExternalLink } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { generateProgressReport } from \"@/lib/pdf-generator\";\nimport { cn } from \"@/lib/utils\";\nimport heroImage from \"@assets/generated_images/peaceful_mental_health_hero_ce9d4b3d.png\";\nimport supportImage from \"@assets/generated_images/supportive_community_wellness_46a91c38.png\";\nimport wellnessImage from \"@assets/generated_images/mindful_breathing_wellness_a8cd19ea.png\";\nimport { Footer } from \"@/components/ui/footer\";\n\nexport default function Dashboard() {\n  // For MVP, using a mock user ID - in production this would come from auth\n  const mockUserId = \"user-1\";\n  const [, setLocation] = useLocation();\n  \n  // Quick action states\n  const [breathingDialogOpen, setBreathingDialogOpen] = useState(false);\n  const [moodDialogOpen, setMoodDialogOpen] = useState(false);\n  const [progressDialogOpen, setProgressDialogOpen] = useState(false);\n  const [supportDialogOpen, setSupportDialogOpen] = useState(false);\n  \n  // Mood logging state\n  const [currentMood, setCurrentMood] = useState(5);\n  const [anxietyLevel, setAnxietyLevel] = useState(5);\n  const [energyLevel, setEnergyLevel] = useState(5);\n  const [moodNote, setMoodNote] = useState(\"\");\n\n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard\", mockUserId],\n  });\n\n  const { data: modulesData } = useQuery({\n    queryKey: [\"/api/modules\", mockUserId],\n  });\n\n  const { data: userData } = useQuery({\n    queryKey: [\"/api/users\", mockUserId],\n  });\n\n  const handleExportReport = async () => {\n    try {\n      const response = await fetch(\"/api/reports\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: mockUserId }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to generate report\");\n      \n      const { report } = await response.json();\n      const doc = generateProgressReport(report.reportData);\n      doc.save(\"waitlist-companion-progress-report.pdf\");\n    } catch (error) {\n      alert(\"Error generating report. Please try again.\");\n    }\n  };\n\n  const handleLogMood = () => {\n    // In a real app, this would save to the database\n    const moodData = { \n      mood: currentMood, \n      anxiety: anxietyLevel, \n      energy: energyLevel, \n      note: moodNote,\n      timestamp: new Date().toISOString()\n    };\n    \n    // Reset form and close dialog\n    setCurrentMood(5);\n    setAnxietyLevel(5);\n    setEnergyLevel(5);\n    setMoodNote(\"\");\n    setMoodDialogOpen(false);\n    \n    // Show success feedback (in real app, use toast)\n    alert(\"Mood logged successfully!\");\n  };\n\n  const handleBreathingExercise = () => {\n    setBreathingDialogOpen(false);\n    setLocation(\"/resources\");\n    // In a real implementation, we'd navigate to the breathing exercises directly\n    setTimeout(() => {\n      // Simulate clicking the breathing exercise button\n      const breathingButton = document.querySelector('[data-testid=\"button-breathing-exercise\"]');\n      if (breathingButton) {\n        (breathingButton as HTMLElement).click();\n      }\n    }, 100);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">Loading dashboard...</div>\n      </div>\n    );\n  }\n\n  const dashboard = (dashboardData as any)?.dashboardData || {};\n  const modules = (modulesData as any)?.modules || [];\n  const user = { firstName: \"James\", lastName: \"Smith\", email: \"james.smith@example.com\" };\n\n  const nextCheckInDate = new Date(dashboard.nextCheckInDue);\n  const isCheckInDue = nextCheckInDate <= new Date();\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header user={user} />\n      <CrisisBanner />\n      <TabNavigation />\n      \n      <main className=\"flex-1 bg-background\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Hero Welcome Section with Image */}\n          <div className=\"relative mb-8 rounded-2xl overflow-hidden bg-gradient-to-r from-primary/10 to-accent/10 border shadow-lg\">\n            <div className=\"absolute inset-0\">\n              <img \n                src={heroImage} \n                alt=\"Peaceful mental health support\" \n                className=\"w-full h-full object-cover opacity-70\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-r from-background/85 to-background/70\" />\n            </div>\n            <div className=\"relative p-8 md:p-12\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4 drop-shadow-sm\">\n                Welcome back, {user.firstName}\n              </h2>\n              <p className=\"text-lg text-foreground/90 mb-6 max-w-2xl font-medium\">\n                Continue your journey toward better mental health. You're making progress every day, and we're here to support you.\n              </p>\n              <div className=\"flex flex-wrap gap-3\">\n                <Link href=\"/anxiety-track\">\n                  <Button className=\"bg-primary hover:bg-primary/90 text-white font-semibold px-6 py-3 shadow-md\">\n                    Continue Your Program\n                  </Button>\n                </Link>\n                <Link href=\"/check-ins\">\n                  <Button variant=\"outline\" className=\"bg-background/90 backdrop-blur-sm border-2 font-semibold px-6 py-3 shadow-md hover:bg-background\">\n                    Take Check-in\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n\n          {/* Stats Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-medium text-card-foreground\">Current Week</h3>\n                  <Calendar className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div className=\"text-3xl font-bold text-primary mb-1\" data-testid=\"text-current-week\">\n                  {dashboard.currentWeek || 1}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">of 6 weeks</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-medium text-card-foreground\">Risk Level</h3>\n                  <Shield className=\"w-5 h-5 text-accent\" />\n                </div>\n                <div className=\"text-3xl font-bold text-accent mb-1 capitalize\" data-testid=\"text-risk-level\">\n                  {dashboard.riskLevel || \"Unknown\"}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Last checked today</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-medium text-card-foreground\">Completion</h3>\n                  <TrendingUp className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div className=\"text-3xl font-bold text-primary mb-1\" data-testid=\"text-completion-rate\">\n                  {dashboard.completionRate || 0}%\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Activities completed</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-medium text-card-foreground\">Next Check-in</h3>\n                  <Clock className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n                <div className=\"text-lg font-semibold text-foreground mb-1\" data-testid=\"text-next-checkin\">\n                  {isCheckInDue ? \"Due Now\" : \"Tomorrow\"}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Weekly assessment due</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Progress Overview */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* 6-Week Progress */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-semibold text-card-foreground mb-6\">\n                  6-Week Anxiety Support Progress\n                </h3>\n                \n                <div className=\"flex items-center justify-center mb-6\">\n                  <ProgressRing percentage={dashboard.completionRate || 0} />\n                </div>\n\n                <div className=\"space-y-3\">\n                  {modules.map((module: any) => {\n                    const isCompleted = module.completedAt;\n                    const isInProgress = !module.isLocked && !isCompleted;\n                    const progressPercentage = module.estimatedMinutes > 0 ? \n                      Math.round((module.minutesCompleted / module.estimatedMinutes) * 100) : 0;\n\n                    return (\n                      <div \n                        key={module.id}\n                        className={cn(\n                          \"flex items-center p-3 rounded-md\",\n                          isCompleted && \"bg-accent/10\",\n                          isInProgress && \"bg-primary/10 border-l-4 border-primary\",\n                          module.isLocked && \"bg-muted opacity-60\"\n                        )}\n                      >\n                        <div className=\"mr-3\">\n                          {isCompleted ? (\n                            <div className=\"w-6 h-6 bg-accent rounded-full flex items-center justify-center\">\n                              <div className=\"w-3 h-3 bg-accent-foreground rounded-full\" />\n                            </div>\n                          ) : isInProgress ? (\n                            <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                              <div className=\"w-2 h-2 bg-primary-foreground rounded-full\" />\n                            </div>\n                          ) : (\n                            <div className=\"w-6 h-6 bg-muted-foreground rounded-full flex items-center justify-center\">\n                              <div className=\"w-2 h-2 bg-background rounded-full\" />\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-card-foreground\">\n                            Week {module.weekNumber}: {module.title}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {isCompleted ? `Completed • ${module.minutesCompleted} min` :\n                             isInProgress ? `In Progress • ${module.minutesCompleted}/${module.estimatedMinutes} min` :\n                             `Locked • Complete week ${module.weekNumber - 1} first`}\n                          </p>\n                          {isInProgress && (\n                            <div className=\"w-full bg-secondary rounded-full h-1 mt-2\">\n                              <div \n                                className=\"bg-primary h-1 rounded-full transition-all duration-300\"\n                                style={{ width: `${progressPercentage}%` }}\n                              />\n                            </div>\n                          )}\n                        </div>\n                        {(isCompleted || isInProgress) && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            data-testid={`button-${isCompleted ? 'review' : 'continue'}-module-${module.weekNumber}`}\n                          >\n                            {isCompleted ? \"Review\" : \"Continue\"}\n                          </Button>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activities & Insights */}\n            <div className=\"space-y-6\">\n              {/* Risk Assessment Summary */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold text-card-foreground mb-4\">\n                    Risk Assessment Summary\n                  </h3>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-3 bg-accent/10 rounded-md\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-3 h-3 bg-accent rounded-full mr-3\" />\n                        <span className=\"text-sm font-medium text-card-foreground\">Overall Wellbeing</span>\n                      </div>\n                      <span className=\"text-sm text-accent font-semibold\">Good</span>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-3 bg-secondary rounded-md\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-3 h-3 bg-primary rounded-full mr-3\" />\n                        <span className=\"text-sm font-medium text-card-foreground\">Anxiety Level</span>\n                      </div>\n                      <span className=\"text-sm text-primary font-semibold capitalize\">\n                        {dashboard.riskLevel || \"Unknown\"}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-3 bg-secondary rounded-md\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-3 h-3 bg-muted-foreground rounded-full mr-3\" />\n                        <span className=\"text-sm font-medium text-card-foreground\">Sleep Quality</span>\n                      </div>\n                      <span className=\"text-sm text-muted-foreground font-semibold\">Fair</span>\n                    </div>\n                  </div>\n                  \n                  <Link href=\"/check-ins\">\n                    <Button \n                      className=\"w-full mt-4\" \n                      data-testid=\"button-take-weekly-assessment\"\n                    >\n                      Take Weekly Assessment\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions */}\n              <Card className=\"overflow-hidden\">\n                <div className=\"relative h-24\">\n                  <img \n                    src={wellnessImage} \n                    alt=\"Mindful breathing wellness\" \n                    className=\"w-full h-full object-cover opacity-60\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-background/80 to-background/40\" />\n                </div>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold text-card-foreground mb-4\">Quick Actions</h3>\n                  \n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {/* Breathing Exercise Quick Action */}\n                    <Dialog open={breathingDialogOpen} onOpenChange={setBreathingDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"secondary\"\n                          className=\"flex flex-col items-center p-4 h-auto\"\n                          data-testid=\"button-practice-breathing\"\n                        >\n                          <Wind className=\"w-5 h-5 text-primary mb-2\" />\n                          <span className=\"text-sm font-medium\">Practice Breathing</span>\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-md\">\n                        <DialogHeader>\n                          <DialogTitle className=\"flex items-center gap-2\">\n                            <Wind className=\"w-5 h-5 text-primary\" />\n                            Quick Breathing Exercise\n                          </DialogTitle>\n                          <DialogDescription>\n                            Choose a breathing technique to help you relax and reduce anxiety.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <div className=\"space-y-3\">\n                            <Button \n                              onClick={handleBreathingExercise}\n                              className=\"w-full justify-start p-4 h-auto\"\n                            >\n                              <div className=\"text-left\">\n                                <p className=\"font-medium\">4-7-8 Breathing</p>\n                                <p className=\"text-sm opacity-80\">Great for quick anxiety relief</p>\n                              </div>\n                            </Button>\n                            <Button \n                              onClick={handleBreathingExercise}\n                              variant=\"outline\"\n                              className=\"w-full justify-start p-4 h-auto\"\n                            >\n                              <div className=\"text-left\">\n                                <p className=\"font-medium\">Box Breathing</p>\n                                <p className=\"text-sm opacity-80\">4-4-4-4 pattern for focus</p>\n                              </div>\n                            </Button>\n                            <Button \n                              onClick={handleBreathingExercise}\n                              variant=\"outline\"\n                              className=\"w-full justify-start p-4 h-auto\"\n                            >\n                              <div className=\"text-left\">\n                                <p className=\"font-medium\">View All Exercises</p>\n                                <p className=\"text-sm opacity-80\">Access full breathing toolkit</p>\n                              </div>\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                    \n                    {/* Mood Logging Quick Action */}\n                    <Dialog open={moodDialogOpen} onOpenChange={setMoodDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"secondary\"\n                          className=\"flex flex-col items-center p-4 h-auto\"\n                          data-testid=\"button-log-mood\"\n                        >\n                          <Smile className=\"w-5 h-5 text-primary mb-2\" />\n                          <span className=\"text-sm font-medium\">Log Mood</span>\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-lg\">\n                        <DialogHeader>\n                          <DialogTitle className=\"flex items-center gap-2\">\n                            <Smile className=\"w-5 h-5 text-primary\" />\n                            Quick Mood Check-In\n                          </DialogTitle>\n                          <DialogDescription>\n                            Log your current mood and anxiety levels for tracking your wellbeing.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"space-y-6\">\n                          <div>\n                            <Label className=\"text-sm font-medium\">Overall Mood (1 = Very Low, 10 = Very High)</Label>\n                            <div className=\"mt-2\">\n                              <Slider\n                                value={[currentMood]}\n                                onValueChange={(value) => setCurrentMood(value[0])}\n                                max={10}\n                                min={1}\n                                step={1}\n                                className=\"w-full\"\n                              />\n                              <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                                <span>Very Low</span>\n                                <span className=\"font-medium\">{currentMood}/10</span>\n                                <span>Very High</span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div>\n                            <Label className=\"text-sm font-medium\">Anxiety Level (1 = Very Calm, 10 = Very Anxious)</Label>\n                            <div className=\"mt-2\">\n                              <Slider\n                                value={[anxietyLevel]}\n                                onValueChange={(value) => setAnxietyLevel(value[0])}\n                                max={10}\n                                min={1}\n                                step={1}\n                                className=\"w-full\"\n                              />\n                              <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                                <span>Very Calm</span>\n                                <span className=\"font-medium\">{anxietyLevel}/10</span>\n                                <span>Very Anxious</span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div>\n                            <Label className=\"text-sm font-medium\">Energy Level (1 = Very Tired, 10 = Very Energetic)</Label>\n                            <div className=\"mt-2\">\n                              <Slider\n                                value={[energyLevel]}\n                                onValueChange={(value) => setEnergyLevel(value[0])}\n                                max={10}\n                                min={1}\n                                step={1}\n                                className=\"w-full\"\n                              />\n                              <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                                <span>Very Tired</span>\n                                <span className=\"font-medium\">{energyLevel}/10</span>\n                                <span>Very Energetic</span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div>\n                            <Label className=\"text-sm font-medium\">Notes (Optional)</Label>\n                            <Textarea\n                              placeholder=\"How are you feeling today? Any particular thoughts or events affecting your mood?\"\n                              value={moodNote}\n                              onChange={(e) => setMoodNote(e.target.value)}\n                              className=\"mt-2\"\n                            />\n                          </div>\n\n                          <div className=\"flex gap-3\">\n                            <Button onClick={handleLogMood} className=\"flex-1\">\n                              Log Mood\n                            </Button>\n                            <Button variant=\"outline\" onClick={() => setMoodDialogOpen(false)}>\n                              Cancel\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                    \n                    {/* Progress View Quick Action */}\n                    <Dialog open={progressDialogOpen} onOpenChange={setProgressDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"secondary\"\n                          className=\"flex flex-col items-center p-4 h-auto\"\n                          data-testid=\"button-view-progress\"\n                        >\n                          <BarChart3 className=\"w-5 h-5 text-primary mb-2\" />\n                          <span className=\"text-sm font-medium\">View Progress</span>\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-lg\">\n                        <DialogHeader>\n                          <DialogTitle className=\"flex items-center gap-2\">\n                            <BarChart3 className=\"w-5 h-5 text-primary\" />\n                            Quick Progress Overview\n                          </DialogTitle>\n                          <DialogDescription>\n                            View your current progress through the anxiety support program.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"space-y-6\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div className=\"text-center p-4 bg-primary/5 rounded-lg\">\n                              <div className=\"text-2xl font-bold text-primary\">{dashboard.currentWeek || 1}</div>\n                              <p className=\"text-sm text-muted-foreground\">Current Week</p>\n                            </div>\n                            <div className=\"text-center p-4 bg-accent/5 rounded-lg\">\n                              <div className=\"text-2xl font-bold text-accent\">\n                                {modules.filter((m: any) => m.completed).length}/{modules.length}\n                              </div>\n                              <p className=\"text-sm text-muted-foreground\">Modules Complete</p>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center justify-between p-3 bg-secondary rounded-md\">\n                              <span className=\"text-sm font-medium\">Program Progress</span>\n                              <Badge variant=\"outline\">\n                                {Math.round((modules.filter((m: any) => m.completed).length / modules.length) * 100)}%\n                              </Badge>\n                            </div>\n                            <div className=\"flex items-center justify-between p-3 bg-secondary rounded-md\">\n                              <span className=\"text-sm font-medium\">Risk Level</span>\n                              <Badge variant={dashboard.riskLevel === 'low' ? 'default' : 'secondary'}>\n                                {dashboard.riskLevel || 'Unknown'}\n                              </Badge>\n                            </div>\n                            <div className=\"flex items-center justify-between p-3 bg-secondary rounded-md\">\n                              <span className=\"text-sm font-medium\">Check-ins Completed</span>\n                              <Badge variant=\"outline\">\n                                {dashboard.completedCheckIns || 0}\n                              </Badge>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-3\">\n                            <Link href=\"/anxiety-track\">\n                              <Button className=\"w-full\" onClick={() => setProgressDialogOpen(false)}>\n                                View Detailed Progress\n                              </Button>\n                            </Link>\n                            <Button \n                              variant=\"outline\" \n                              className=\"w-full\"\n                              onClick={() => {\n                                setProgressDialogOpen(false);\n                                handleExportReport();\n                              }}\n                            >\n                              Download Progress Report\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                    \n                    {/* Support Contact Quick Action */}\n                    <Dialog open={supportDialogOpen} onOpenChange={setSupportDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"secondary\"\n                          className=\"flex flex-col items-center p-4 h-auto\"\n                          data-testid=\"button-contact-support\"\n                        >\n                          <Headphones className=\"w-5 h-5 text-primary mb-2\" />\n                          <span className=\"text-sm font-medium\">Get Support</span>\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-md\">\n                        <DialogHeader>\n                          <DialogTitle className=\"flex items-center gap-2\">\n                            <Headphones className=\"w-5 h-5 text-primary\" />\n                            Get Support Now\n                          </DialogTitle>\n                          <DialogDescription>\n                            Access immediate support and emergency contacts when you need help.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <p className=\"text-muted-foreground\">Get immediate support or access additional resources.</p>\n                          \n                          {/* Emergency Contacts */}\n                          <div className=\"space-y-3\">\n                            <h4 className=\"font-medium text-destructive\">Emergency Support</h4>\n                            <div className=\"space-y-2\">\n                              <Button \n                                variant=\"destructive\"\n                                className=\"w-full justify-start\"\n                                onClick={() => window.open('tel:999')}\n                              >\n                                <Phone className=\"w-4 h-4 mr-2\" />\n                                Emergency Services: 999\n                              </Button>\n                              <Button \n                                variant=\"outline\"\n                                className=\"w-full justify-start border-destructive text-destructive hover:bg-destructive/10\"\n                                onClick={() => window.open('tel:116123')}\n                              >\n                                <Phone className=\"w-4 h-4 mr-2\" />\n                                Samaritans: 116 123\n                              </Button>\n                              <Button \n                                variant=\"outline\"\n                                className=\"w-full justify-start border-destructive text-destructive hover:bg-destructive/10\"\n                                onClick={() => window.open('sms:85258?body=SHOUT')}\n                              >\n                                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                                Text SHOUT to 85258\n                              </Button>\n                            </div>\n                          </div>\n\n                          {/* Regular Support */}\n                          <div className=\"space-y-3\">\n                            <h4 className=\"font-medium\">Additional Support</h4>\n                            <div className=\"space-y-2\">\n                              <Button \n                                variant=\"outline\"\n                                className=\"w-full justify-start\"\n                                onClick={() => window.open('https://www.nhs.uk/every-mind-matters/', '_blank')}\n                              >\n                                <ExternalLink className=\"w-4 h-4 mr-2\" />\n                                NHS Every Mind Matters\n                              </Button>\n                              <Link href=\"/resources\">\n                                <Button \n                                  variant=\"outline\"\n                                  className=\"w-full justify-start\"\n                                  onClick={() => setSupportDialogOpen(false)}\n                                >\n                                  <GraduationCap className=\"w-4 h-4 mr-2\" />\n                                  Self-Help Resources\n                                </Button>\n                              </Link>\n                              <Link href=\"/check-ins\">\n                                <Button \n                                  variant=\"outline\"\n                                  className=\"w-full justify-start\"\n                                  onClick={() => setSupportDialogOpen(false)}\n                                >\n                                  <Shield className=\"w-4 h-4 mr-2\" />\n                                  Risk Assessment\n                                </Button>\n                              </Link>\n                            </div>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Upcoming & Reminders */}\n          <Card className=\"mt-8\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-card-foreground mb-6\">Upcoming & Reminders</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center p-4 bg-primary/5 border-l-4 border-primary rounded-r-md\">\n                  <Bell className=\"w-5 h-5 text-primary mr-4\" />\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-card-foreground\">Weekly check-in reminder</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {isCheckInDue ? \"Due now\" : \"Due tomorrow at 2:00 PM\"}\n                    </p>\n                  </div>\n                  <Link href=\"/check-ins\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-complete-checkin\">\n                      Complete Now\n                    </Button>\n                  </Link>\n                </div>\n                \n                <div className=\"flex items-center p-4 bg-accent/5 border-l-4 border-accent rounded-r-md\">\n                  <GraduationCap className=\"w-5 h-5 text-accent mr-4\" />\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-card-foreground\">Module 3: Cognitive Strategies</p>\n                    <p className=\"text-sm text-muted-foreground\">Continue where you left off</p>\n                  </div>\n                  <Link href=\"/anxiety-track\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-continue-module\">\n                      Continue\n                    </Button>\n                  </Link>\n                </div>\n                \n                <div className=\"flex items-center p-4 bg-secondary rounded-md\">\n                  <FileText className=\"w-5 h-5 text-muted-foreground mr-4\" />\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-card-foreground\">Export progress report</p>\n                    <p className=\"text-sm text-muted-foreground\">Ready for NHS handoff</p>\n                  </div>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={handleExportReport}\n                    data-testid=\"button-export-report\"\n                  >\n                    Download PDF\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":37036},"client/src/pages/module-detail.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Header } from \"@/components/ui/header\";\nimport { TabNavigation } from \"@/components/ui/tab-navigation\";\nimport { CrisisBanner } from \"@/components/ui/crisis-banner\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ValuesWorksheet } from \"@/components/ValuesWorksheet\";\nimport { ProgressTracker } from \"@/components/ProgressTracker\";\nimport { ToolkitBuilder } from \"@/components/ToolkitBuilder\";\nimport { RelapsePlanner } from \"@/components/RelapsePlanner\";\nimport { NhsPrepGuide } from \"@/components/NhsPrepGuide\";\nimport { \n  ArrowLeft, \n  Clock, \n  CheckCircle, \n  Circle, \n  Play, \n  Pause,\n  BookOpen,\n  Brain,\n  Heart,\n  MessageSquare,\n  Target,\n  Award,\n  Timer,\n  Users\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface ModuleActivity {\n  id: string;\n  type: 'reading' | 'exercise' | 'reflection' | 'breathing' | 'worksheet' | 'assessment';\n  title: string;\n  description: string;\n  estimatedMinutes: number;\n  isCompleted: boolean;\n  content: any;\n}\n\nconst activityIcons = {\n  reading: BookOpen,\n  exercise: Target,\n  reflection: MessageSquare,\n  breathing: Heart,\n  worksheet: Brain,\n  assessment: Award\n};\n\nexport default function ModuleDetail() {\n  const [match, params] = useRoute(\"/anxiety-track/module/:weekNumber\");\n  const weekNumber = parseInt((params as any)?.weekNumber || \"1\");\n  const mockUserId = \"user-1\";\n  \n  const [currentActivity, setCurrentActivity] = useState<string | null>(null);\n  const [timer, setTimer] = useState(0);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [notes, setNotes] = useState(\"\");\n  const [reflections, setReflections] = useState<Record<string, string>>({});\n\n  // Timer effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isTimerRunning) {\n      interval = setInterval(() => {\n        setTimer(prev => prev + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning]);\n\n  const { data: modulesData, isLoading } = useQuery({\n    queryKey: [\"/api/modules\", mockUserId],\n  });\n\n  const updateModuleMutation = useMutation({\n    mutationFn: async ({ moduleId, updates }: { moduleId: string; updates: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/modules/${moduleId}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/modules\", mockUserId] });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">Loading module...</div>\n      </div>\n    );\n  }\n\n  const modules = (modulesData as any)?.modules || [];\n  const module = modules.find((m: any) => m.weekNumber === weekNumber);\n\n  if (!module) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p>Module not found for week {weekNumber}</p>\n          <p className=\"text-sm text-muted-foreground mt-2\">Available modules: {modules.length}</p>\n          <Link href=\"/anxiety-track\">\n            <Button variant=\"outline\" className=\"mt-4\">Back to Anxiety Track</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const getModuleContent = (weekNumber: number) => {\n    const contents = {\n      1: {\n        title: \"Understanding Anxiety\",\n        description: \"Learn about anxiety, its symptoms, and how it affects your body and mind\",\n        objectives: [\n          \"Understand what anxiety is and how it affects you\",\n          \"Recognize your personal anxiety symptoms\", \n          \"Learn about the fight-flight-freeze response\",\n          \"Identify your anxiety triggers\",\n          \"Create your personal anxiety profile\"\n        ],\n        activities: [\n          {\n            id: \"anxiety-intro\",\n            type: \"reading\" as const,\n            title: \"What is Anxiety?\",\n            description: \"Understanding the basics of anxiety and why it exists\",\n            estimatedMinutes: 8,\n            isCompleted: false,\n            content: {\n              text: `Anxiety is your body's natural alarm system. It's designed to keep you safe by alerting you to potential dangers. When you perceive a threat, your body releases stress hormones like adrenaline and cortisol, preparing you to either fight the danger, run away from it, or freeze.\n\nThis \"fight-flight-freeze\" response was crucial for our ancestors who faced physical dangers like wild animals. Today, our brains often react to psychological threats (like job interviews or social situations) in the same way they would to physical dangers.\n\n**Key Points:**\n• Anxiety is normal and serves a protective function\n• Everyone experiences anxiety sometimes\n• It becomes a problem when it's excessive or interferes with daily life\n• Understanding anxiety is the first step to managing it effectively\n\n**Remember:** Having anxiety doesn't mean you're weak or broken. It means you're human.`\n            }\n          },\n          {\n            id: \"symptoms-check\",\n            type: \"worksheet\" as const,\n            title: \"Your Anxiety Symptoms\",\n            description: \"Identify how anxiety shows up in your body and mind\",\n            estimatedMinutes: 12,\n            isCompleted: false,\n            content: {\n              checklist: [\n                { category: \"Physical\", items: [\"Racing heart\", \"Sweating\", \"Trembling\", \"Shortness of breath\", \"Dizziness\", \"Nausea\", \"Muscle tension\", \"Fatigue\"] },\n                { category: \"Emotional\", items: [\"Worry\", \"Fear\", \"Panic\", \"Irritability\", \"Restlessness\", \"Feeling overwhelmed\", \"Dread\", \"Helplessness\"] },\n                { category: \"Behavioral\", items: [\"Avoidance\", \"Procrastination\", \"Checking behaviors\", \"Seeking reassurance\", \"Fidgeting\", \"Pacing\", \"Difficulty concentrating\", \"Sleep problems\"] },\n                { category: \"Mental\", items: [\"Racing thoughts\", \"Catastrophizing\", \"Mind going blank\", \"Difficulty making decisions\", \"Negative self-talk\", \"Imagining worst-case scenarios\"] }\n              ]\n            }\n          },\n          {\n            id: \"trigger-identification\",\n            type: \"reflection\" as const,\n            title: \"Identifying Your Triggers\",\n            description: \"Discover what situations, thoughts, or feelings tend to trigger your anxiety\",\n            estimatedMinutes: 15,\n            isCompleted: false,\n            content: {\n              prompts: [\n                \"What situations make you feel most anxious?\",\n                \"Are there specific times of day when anxiety is worse?\",\n                \"What thoughts tend to spiral into anxiety?\",\n                \"Are there physical sensations that trigger anxious feelings?\",\n                \"How do other people or social situations affect your anxiety?\"\n              ]\n            }\n          },\n          {\n            id: \"anxiety-diary\",\n            type: \"exercise\" as const,\n            title: \"Start Your Anxiety Awareness Journal\",\n            description: \"Begin tracking your anxiety patterns to build self-awareness\",\n            estimatedMinutes: 10,\n            isCompleted: false,\n            content: {\n              instructions: `For the next week, keep a simple anxiety diary. Each time you notice anxiety, write down:\n\n**When:** Date and time\n**Where:** Location and situation  \n**What:** What was happening or what were you thinking about?\n**How intense:** Rate your anxiety from 1-10\n**How long:** How long did the anxious feelings last?\n**What helped:** What (if anything) helped you feel better?\n\nThis isn't about judgment - it's about awareness. The more you understand your patterns, the better you can manage them.`,\n              template: {\n                date: \"\",\n                time: \"\",\n                location: \"\",\n                situation: \"\",\n                thoughts: \"\",\n                intensity: 0,\n                duration: \"\",\n                whatHelped: \"\"\n              }\n            }\n          }\n        ]\n      },\n      2: {\n        title: \"Breathing & Relaxation\",\n        description: \"Master breathing techniques and progressive muscle relaxation\",\n        objectives: [\n          \"Master diaphragmatic breathing technique\",\n          \"Learn progressive muscle relaxation\",\n          \"Practice box breathing for acute anxiety\",\n          \"Create a personalized relaxation routine\"\n        ],\n        activities: [\n          {\n            id: \"breathing-basics\",\n            type: \"reading\" as const,\n            title: \"The Power of Breath\",\n            description: \"Understanding how breathing affects anxiety and stress\",\n            estimatedMinutes: 6,\n            isCompleted: false,\n            content: {\n              text: `Your breath is one of the most powerful tools for managing anxiety. Unlike your racing heart or sweaty palms, your breathing is something you can control directly.\n\n**Why Breathing Works:**\n• Slow, deep breathing activates your parasympathetic nervous system (the \"rest and digest\" response)\n• It signals to your brain that you're safe\n• Proper breathing increases oxygen flow to your brain, improving clarity\n• It gives your mind something specific to focus on\n\n**The Problem with Anxiety Breathing:**\nWhen anxious, people often breathe rapidly and shallowly from their chest. This can actually make anxiety worse by:\n• Reducing carbon dioxide in your blood\n• Creating physical sensations like dizziness or tingling\n• Sending danger signals to your brain\n\n**The Solution:**\nLearning to breathe slowly and deeply from your diaphragm (belly breathing) can quickly calm your nervous system.`\n            }\n          },\n          {\n            id: \"diaphragmatic-breathing\",\n            type: \"breathing\" as const,\n            title: \"Diaphragmatic Breathing Practice\",\n            description: \"Learn the fundamental breathing technique for anxiety management\",\n            estimatedMinutes: 15,\n            isCompleted: false,\n            content: {\n              instructions: [\n                \"Find a comfortable position, either sitting or lying down\",\n                \"Place one hand on your chest and one hand on your belly\",\n                \"Breathe in slowly through your nose for 4 counts\",\n                \"The hand on your belly should rise more than the hand on your chest\",\n                \"Hold your breath for 2 counts\",\n                \"Breathe out slowly through your mouth for 6 counts\",\n                \"The hand on your belly should fall as you exhale\",\n                \"Repeat for 5-10 breaths\"\n              ],\n              guidance: \"If you feel dizzy, slow down or take a break. This is normal when learning - your body is adjusting to breathing more efficiently.\"\n            }\n          },\n          {\n            id: \"box-breathing\",\n            type: \"breathing\" as const,\n            title: \"Box Breathing for Acute Anxiety\",\n            description: \"A powerful technique for managing anxiety attacks and high stress moments\",\n            estimatedMinutes: 10,\n            isCompleted: false,\n            content: {\n              pattern: \"4-4-4-4\",\n              instructions: [\n                \"Breathe in for 4 counts\",\n                \"Hold your breath for 4 counts\", \n                \"Breathe out for 4 counts\",\n                \"Hold empty for 4 counts\",\n                \"Repeat the cycle 4-8 times\"\n              ],\n              tips: \"Visualize drawing a box as you breathe. This technique is used by Navy SEALs and first responders to stay calm under pressure.\"\n            }\n          },\n          {\n            id: \"progressive-relaxation\",\n            type: \"exercise\" as const,\n            title: \"Progressive Muscle Relaxation\",\n            description: \"Learn to release physical tension and promote deep relaxation\",\n            estimatedMinutes: 20,\n            isCompleted: false,\n            content: {\n              script: `Progressive Muscle Relaxation (PMR) helps you learn the difference between tension and relaxation. You'll tense and then release different muscle groups.\n\n**Full Body PMR Script:**\n\n1. **Feet & Calves**: Point your toes and tighten your calf muscles. Hold for 5 seconds, then release and notice the relaxation.\n\n2. **Thighs & Glutes**: Squeeze your thigh muscles and buttocks. Hold for 5 seconds, then release.\n\n3. **Abdomen**: Tighten your stomach muscles as if someone were about to punch you. Hold for 5 seconds, then release.\n\n4. **Hands & Arms**: Make fists and tighten your arm muscles. Hold for 5 seconds, then release and let your arms go limp.\n\n5. **Shoulders**: Raise your shoulders up to your ears. Hold for 5 seconds, then let them drop.\n\n6. **Face**: Scrunch up your entire face - forehead, eyes, cheeks, jaw. Hold for 5 seconds, then release completely.\n\nTake a moment after each muscle group to notice the contrast between tension and relaxation.`\n            }\n          }\n        ]\n      },\n      3: {\n        title: \"Cognitive Strategies\",\n        description: \"Learn to identify and challenge anxious thoughts with cognitive behavioral techniques\",\n        objectives: [\n          \"Understand the connection between thoughts, feelings, and behaviors\",\n          \"Learn to identify anxious thinking patterns\",\n          \"Master cognitive restructuring techniques\",\n          \"Practice challenging unhelpful thoughts\"\n        ],\n        activities: [\n          {\n            id: \"thought-feelings-connection\",\n            type: \"reading\" as const,\n            title: \"Understanding Thoughts, Feelings, and Behaviors\",\n            description: \"Learn how your thoughts directly influence your emotions and actions\",\n            estimatedMinutes: 8,\n            isCompleted: false,\n            content: {\n              text: `One of the most powerful discoveries in psychology is understanding how our thoughts, feelings, and behaviors are interconnected. This is called the cognitive triangle.\n\n**The Cognitive Triangle:**\n• **Thoughts** influence how we **feel**\n• **Feelings** influence how we **behave**\n• **Behaviors** influence how we **think**\n\n**Example:**\n*Thought:* \"I'm going to fail this presentation\"\n*Feeling:* Anxious, nervous, scared\n*Behavior:* Avoid preparing, procrastinate, or cancel\n\n**The Good News:**\nSince these three elements are connected, changing any one of them can influence the others. The easiest place to start is often with your thoughts.\n\n**Common Anxious Thinking Patterns:**\n• **Catastrophizing:** Imagining the worst possible outcome\n• **All-or-nothing thinking:** Seeing things in black and white\n• **Mind reading:** Assuming you know what others are thinking\n• **Fortune telling:** Predicting negative outcomes\n• **Personalization:** Blaming yourself for things outside your control`\n            }\n          },\n          {\n            id: \"thought-record\",\n            type: \"worksheet\" as const,\n            title: \"Thought Record Practice\",\n            description: \"Learn to identify and examine your anxious thoughts\",\n            estimatedMinutes: 20,\n            isCompleted: false,\n            content: {\n              instructions: `When you notice anxiety rising, use this thought record to examine what's happening in your mind:\n\n**Step 1: Situation**\nWhat was happening when you felt anxious?\n\n**Step 2: Emotion**\nWhat emotion did you feel? Rate intensity 1-10.\n\n**Step 3: Automatic Thought**\nWhat thoughts went through your mind?\n\n**Step 4: Evidence For**\nWhat evidence supports this thought?\n\n**Step 5: Evidence Against**\nWhat evidence contradicts this thought?\n\n**Step 6: Balanced Thought**\nWhat's a more balanced, realistic way to think about this?\n\n**Step 7: New Emotion**\nHow do you feel now? Rate intensity 1-10.`,\n              template: {\n                situation: \"\",\n                emotion: \"\",\n                intensity_before: 0,\n                automatic_thought: \"\",\n                evidence_for: \"\",\n                evidence_against: \"\",\n                balanced_thought: \"\",\n                new_emotion: \"\",\n                intensity_after: 0\n              }\n            }\n          },\n          {\n            id: \"challenging-thoughts\",\n            type: \"exercise\" as const,\n            title: \"Challenging Anxious Thoughts\",\n            description: \"Practice questioning and reframing unhelpful thinking patterns\",\n            estimatedMinutes: 12,\n            isCompleted: false,\n            content: {\n              instructions: `Use these questions to challenge anxious thoughts:\n\n**Testing Reality:**\n• Is this thought realistic?\n• What evidence do I have that this thought is true?\n• What evidence do I have that this thought is not true?\n\n**Looking for Alternatives:**\n• Are there other ways to look at this situation?\n• What would I tell a friend in this situation?\n• What's the worst that could realistically happen?\n• What's the best that could happen?\n• What's most likely to happen?\n\n**Considering Consequences:**\n• If this thought were true, how would I cope?\n• Will this matter in 1 year? 5 years?\n• Am I making this bigger than it needs to be?\n\n**Practice Scenarios:**\n1. \"Everyone will notice I'm anxious\"\n2. \"I can't handle this situation\"\n3. \"Something terrible is going to happen\"\n4. \"I always mess things up\"`\n            }\n          }\n        ]\n      },\n      4: {\n        title: \"Mindfulness & Grounding\",\n        description: \"Develop mindfulness skills and grounding techniques to stay present during anxious moments\",\n        objectives: [\n          \"Learn the principles of mindfulness\",\n          \"Master grounding techniques for anxiety\",\n          \"Practice present-moment awareness\",\n          \"Develop a personal mindfulness routine\"\n        ],\n        activities: [\n          {\n            id: \"mindfulness-intro\",\n            type: \"reading\" as const,\n            title: \"Introduction to Mindfulness\",\n            description: \"Understanding how mindfulness can help with anxiety\",\n            estimatedMinutes: 7,\n            isCompleted: false,\n            content: {\n              text: `Mindfulness is the practice of paying attention to the present moment without judgment. For people with anxiety, this can be incredibly powerful.\n\n**Why Mindfulness Helps Anxiety:**\n• Anxiety often involves worrying about the future or ruminating about the past\n• Mindfulness brings you back to the present moment\n• It helps you observe anxious thoughts without being overwhelmed by them\n• Regular practice can reduce overall anxiety levels\n\n**The Mindful Approach to Anxiety:**\nInstead of fighting anxious thoughts, mindfulness teaches you to:\n• Notice them without judgment\n• Observe them like clouds passing in the sky\n• Let them come and go naturally\n• Focus on what's actually happening right now\n\n**Common Mindfulness Myths:**\n❌ \"I need to empty my mind\" - Mindfulness isn't about stopping thoughts\n❌ \"I'm bad at meditation\" - There's no \"perfect\" way to be mindful\n❌ \"It takes years to work\" - Benefits can be felt immediately\n❌ \"I don't have time\" - Even 2-3 minutes can be helpful\n\n**Starting Small:**\nYou don't need to meditate for hours. Start with just a few minutes of mindful breathing or awareness.`\n            }\n          },\n          {\n            id: \"grounding-techniques\",\n            type: \"exercise\" as const,\n            title: \"5-4-3-2-1 Grounding Technique\",\n            description: \"Learn a powerful technique to anchor yourself in the present moment\",\n            estimatedMinutes: 10,\n            isCompleted: false,\n            content: {\n              instructions: `When anxiety hits, use this grounding technique to reconnect with the present moment:\n\n**5 Things You Can See**\nLook around and name 5 things you can see. Really focus on them - their colors, shapes, textures.\n\n**4 Things You Can Touch**\nNotice 4 things you can feel - your feet on the floor, the temperature of the air, the texture of your clothes.\n\n**3 Things You Can Hear**\nListen for 3 different sounds - maybe traffic, birds, your own breathing, the hum of electronics.\n\n**2 Things You Can Smell**\nNotice 2 scents around you - coffee, fresh air, cleaning products, your perfume.\n\n**1 Thing You Can Taste**\nFocus on 1 taste in your mouth - maybe from something you drank, mint, or just the taste of your mouth.\n\n**Tips:**\n• Speak each item out loud if possible\n• Take your time with each sense\n• If your mind wanders, gently bring it back\n• Use this technique anywhere, anytime`,\n              guidance: \"This technique works by engaging your senses and pulling your attention away from anxious thoughts back to your immediate physical environment.\"\n            }\n          },\n          {\n            id: \"body-scan-meditation\",\n            type: \"breathing\" as const,\n            title: \"Progressive Body Scan\",\n            description: \"A guided relaxation to release tension and increase body awareness\",\n            estimatedMinutes: 15,\n            isCompleted: false,\n            content: {\n              instructions: [\n                \"Lie down comfortably or sit in a supportive chair\",\n                \"Close your eyes and take three deep breaths\",\n                \"Start at the top of your head - notice any sensations\",\n                \"Slowly move your attention down to your forehead, eyes, jaw\",\n                \"Continue down through your neck and shoulders\",\n                \"Notice your arms, hands, and fingers\",\n                \"Move to your chest and breathing\",\n                \"Scan your abdomen and lower back\",\n                \"Focus on your hips and pelvis\",\n                \"Notice your thighs, knees, and calves\",\n                \"End with your feet and toes\",\n                \"Take a moment to notice your whole body\"\n              ],\n              guidance: \"Don't try to change anything - just notice. If you find areas of tension, simply acknowledge them with kindness.\"\n            }\n          },\n          {\n            id: \"mindful-daily-activities\",\n            type: \"exercise\" as const,\n            title: \"Mindful Daily Activities\",\n            description: \"Practice bringing mindfulness into everyday activities\",\n            estimatedMinutes: 10,\n            isCompleted: false,\n            content: {\n              instructions: `Choose one routine activity to practice mindfully each day:\n\n**Mindful Eating:**\n• Notice the colors, textures, and smells of your food\n• Chew slowly and taste each bite\n• Pay attention to hunger and fullness cues\n\n**Mindful Walking:**\n• Feel your feet touching the ground\n• Notice the rhythm of your steps\n• Observe your surroundings without judgment\n\n**Mindful Breathing:**\n• Focus on the sensation of breath entering and leaving your body\n• Notice the rise and fall of your chest or belly\n• When your mind wanders, gently return to the breath\n\n**Mindful Listening:**\n• Give someone your full attention when they speak\n• Listen without planning your response\n• Notice the tone, pace, and emotion in their voice\n\n**Start with just 2-3 minutes of mindful activity each day.**`,\n              tips: \"The goal isn't perfection - it's practice. Every time you notice your mind has wandered and bring it back, you're strengthening your mindfulness muscle.\"\n            }\n          }\n        ]\n      },\n      5: {\n        title: \"Behavioral Activation\",\n        description: \"Build healthy routines and gradually expose yourself to anxiety-provoking situations in a safe way\",\n        objectives: [\n          \"Understand the role of behavior in maintaining anxiety\",\n          \"Learn about gradual exposure techniques\",\n          \"Create a behavioral activation plan\",\n          \"Build confidence through small wins\"\n        ],\n        activities: [\n          {\n            id: \"behavior-anxiety-cycle\",\n            type: \"reading\" as const,\n            title: \"Breaking the Avoidance Cycle\",\n            description: \"Understanding how avoidance maintains anxiety and what to do instead\",\n            estimatedMinutes: 8,\n            isCompleted: false,\n            content: {\n              text: `Avoidance is anxiety's best friend. When we avoid things that make us anxious, we feel better temporarily, but we actually make our anxiety stronger in the long run.\n\n**The Avoidance Cycle:**\n1. **Trigger:** Something makes you anxious\n2. **Avoidance:** You avoid or escape the situation\n3. **Relief:** You feel better immediately\n4. **Reinforcement:** Your brain learns \"avoiding = safety\"\n5. **Increased Anxiety:** Next time, the anxiety is stronger\n\n**Breaking the Cycle:**\nInstead of avoiding, we can use **gradual exposure** - slowly and safely facing our fears in small, manageable steps.\n\n**Behavioral Activation Principles:**\n• **Start small:** Begin with the easiest version of what you're avoiding\n• **Be consistent:** Regular practice is more important than perfection\n• **Celebrate wins:** Acknowledge every step forward, no matter how small\n• **Expect discomfort:** Anxiety during exposure is normal and temporary\n\n**Common Avoidance Behaviors:**\n• Canceling social plans\n• Avoiding phone calls or emails\n• Staying home instead of going out\n• Procrastinating on important tasks\n• Using substances to cope\n• Constantly seeking reassurance\n\n**The Goal:**\nNot to eliminate anxiety completely, but to do meaningful activities despite feeling anxious.`\n            }\n          },\n          {\n            id: \"values-assessment\",\n            type: \"worksheet\" as const,\n            title: \"Identifying Your Values\",\n            description: \"Discover what matters most to you to guide your behavioral changes\",\n            estimatedMinutes: 15,\n            isCompleted: false,\n            content: {\n              instructions: `Values are what give your life meaning and direction. When anxiety makes you avoid things, you often move away from your values. Let's reconnect with what matters to you:\n\n**Understanding Values vs. Goals:**\n• **Values** are ongoing directions (like \"being a loving parent\")\n• **Goals** are specific achievements (like \"help my child with homework tonight\")\n• Values guide your goals and give them meaning\n\n**Step 1: Life Areas Assessment**\nRate how important each area is to you (1-10):\n\n**Relationships & Connection:**\n• Family relationships (spouse, children, parents, siblings)\n• Friendships and social connections\n• Intimate relationships and romance\n• Community involvement and belonging\n\n**Personal Growth & Achievement:**\n• Career and work life\n• Education and learning\n• Personal development and self-improvement\n• Creativity and self-expression\n\n**Health & Well-being:**\n• Physical health and fitness\n• Mental and emotional well-being\n• Recreation, fun, and leisure\n• Self-care and relaxation\n\n**Meaning & Purpose:**\n• Spirituality or life philosophy\n• Contributing to causes you care about\n• Leaving a positive impact\n• Living authentically\n\n**Step 2: Identifying Core Values**\nFor your highest-rated life areas, identify your underlying values. Here are some examples:\n\n**Connection Values:** Love, intimacy, friendship, belonging, trust, loyalty, support\n**Growth Values:** Learning, creativity, achievement, mastery, adventure, curiosity\n**Contribution Values:** Helping others, making a difference, justice, compassion, service\n**Authenticity Values:** Honesty, integrity, being true to yourself, independence\n**Security Values:** Safety, stability, predictability, financial security\n**Fun Values:** Playfulness, humor, enjoyment, spontaneity, celebration\n\n**Step 3: Values Clarification Exercise**\nComplete these sentences:\n• \"I feel most alive and energized when I am...\"\n• \"The people I most admire tend to be...\"\n• \"If I had unlimited time and resources, I would spend my time...\"\n• \"When I look back on my life, I want to be remembered for...\"\n• \"The times I feel most proud of myself are when I...\"\n\n**Step 4: Current vs. Desired Alignment**\nFor each important life area and its associated values:\n• How much are you currently living according to these values? (1-10)\n• What specific behaviors demonstrate these values?\n• What would you be doing differently if you were fully aligned with these values?\n• What small actions could move you closer to your values?\n\n**Step 5: Anxiety as a Barrier**\nIdentify how anxiety interferes with your values:\n• What value-driven activities do you avoid due to anxiety?\n• How does anxiety-driven behavior conflict with your values?\n• When has anxiety caused you to act against your values?\n\n**Examples of Values in Action:**\n• **Connection:** Reaching out to an old friend despite social anxiety\n• **Growth:** Taking a course even though you're afraid of looking stupid\n• **Authenticity:** Speaking up about something important despite fear of conflict\n• **Health:** Going to the gym even when you feel self-conscious\n• **Contribution:** Volunteering despite anxiety about meeting new people\n\n**Values-Based Goal Setting:**\nChoose one core value and identify:\n• One thing you could do today that aligns with this value\n• One thing you could do this week\n• One thing you could work toward this month\n• How you'll handle anxiety that arises while pursuing these value-driven actions\n\n**Step 6: Creating Your Values Action Plan**\nNow that you've identified your core values, let's create a concrete plan:\n\n**Your Top 3 Values:**\n1. ________________________\n2. ________________________\n3. ________________________\n\n**For Each Value, Answer:**\n• How does this value show up in your life currently?\n• What would living this value more fully look like?\n• What anxiety-related barrier is holding you back?\n• What's one small action you could take this week?\n\n**Values vs. Anxiety Decision Matrix:**\nWhen facing a decision, ask yourself:\n• What would I do if I were guided by my values?\n• What would I do if I were guided by my anxiety?\n• How can I take a step toward my values despite feeling anxious?\n\n**Daily Values Check-In:**\nEach evening, reflect:\n• How did I honor my values today?\n• When did anxiety pull me away from my values?\n• What's one way I can live more aligned with my values tomorrow?\n\n**Values-Based Motivation:**\nWhen anxiety makes you want to avoid something, remind yourself:\n• \"This aligns with my value of ___________\"\n• \"By doing this, I'm being the person I want to be\"\n• \"I can feel anxious AND still act according to my values\"\n• \"This matters to me because ___________\"\n\n**Worksheet Instructions:**\nComplete the interactive worksheet below to identify your personal values and create your action plan. Take your time with each section and be honest about what truly matters to you.`,\n              reflection_questions: [\n                \"Which values feel most important to you right now?\",\n                \"What value-driven activities have you been avoiding because of anxiety?\",\n                \"How would your life look different if you let your values guide your decisions instead of your anxiety?\",\n                \"What's one small step toward your values you could take this week, even if it makes you anxious?\",\n                \"How can you use your values to motivate yourself when anxiety makes you want to avoid something?\"\n              ],\n              worksheet_template: {\n                life_areas: [\n                  { area: \"Family relationships\", importance: 0, current_alignment: 0, values: \"\", barriers: \"\" },\n                  { area: \"Friendships\", importance: 0, current_alignment: 0, values: \"\", barriers: \"\" },\n                  { area: \"Career/work\", importance: 0, current_alignment: 0, values: \"\", barriers: \"\" },\n                  { area: \"Education/learning\", importance: 0, current_alignment: 0, values: \"\", barriers: \"\" },\n                  { area: \"Health/fitness\", importance: 0, current_alignment: 0, values: \"\", barriers: \"\" },\n                  { area: \"Recreation/fun\", importance: 0, current_alignment: 0, values: \"\", barriers: \"\" },\n                  { area: \"Community involvement\", importance: 0, current_alignment: 0, values: \"\", barriers: \"\" },\n                  { area: \"Spirituality/personal growth\", importance: 0, current_alignment: 0, values: \"\", barriers: \"\" }\n                ],\n                top_3_values: [\"\", \"\", \"\"],\n                values_in_action: {\n                  today: \"\",\n                  this_week: \"\",\n                  this_month: \"\",\n                  anxiety_management: \"\"\n                },\n                completion_statements: {\n                  most_alive: \"\",\n                  admire_others: \"\",\n                  unlimited_resources: \"\",\n                  remembered_for: \"\",\n                  feel_proud: \"\"\n                }\n              }\n            }\n          },\n          {\n            id: \"exposure-hierarchy\",\n            type: \"exercise\" as const,\n            title: \"Building Your Exposure Ladder\",\n            description: \"Create a step-by-step plan to gradually face your fears\",\n            estimatedMinutes: 20,\n            isCompleted: false,\n            content: {\n              instructions: `Create a personalized exposure hierarchy - a ladder of increasingly challenging but manageable steps:\n\n**Step 1: Choose Your Target**\nPick one specific fear or avoidance behavior to work on first.\n\n**Step 2: Brainstorm Exposures**\nThink of different ways to approach your fear, from very easy to very challenging.\n\n**Step 3: Rate Anxiety Levels**\nRate each exposure from 0-10 for expected anxiety level.\n\n**Step 4: Build Your Ladder**\nArrange exposures from lowest to highest anxiety rating.\n\n**Example - Social Anxiety:**\n1. (2/10) Make eye contact with a cashier\n2. (3/10) Say \"good morning\" to a neighbor\n3. (4/10) Ask a store employee where something is\n4. (5/10) Call a restaurant to ask their hours\n5. (6/10) Attend a small social gathering for 30 minutes\n6. (7/10) Introduce yourself to someone new\n7. (8/10) Give a brief presentation at work\n8. (9/10) Host a dinner party\n\n**Exposure Rules:**\n• Start with 2-3/10 anxiety level\n• Stay in the situation until anxiety decreases\n• Repeat each step until it feels manageable\n• Move up the ladder gradually`,\n              template: {\n                target_fear: \"\",\n                exposures: [\n                  { situation: \"\", anxiety_rating: 0, completed: false },\n                  { situation: \"\", anxiety_rating: 0, completed: false },\n                  { situation: \"\", anxiety_rating: 0, completed: false }\n                ]\n              }\n            }\n          },\n          {\n            id: \"behavioral-experiments\",\n            type: \"exercise\" as const,\n            title: \"Behavioral Experiments\",\n            description: \"Test your anxious predictions against reality\",\n            estimatedMinutes: 12,\n            isCompleted: false,\n            content: {\n              instructions: `Behavioral experiments help you test whether your anxious thoughts are accurate. Instead of assuming the worst will happen, you gather evidence.\n\n**How to Design an Experiment:**\n\n**1. Identify the Prediction**\nWhat specific thing do you think will happen?\nExample: \"If I ask a question in the meeting, everyone will think I'm stupid.\"\n\n**2. Design the Test**\nWhat could you do to test this prediction?\nExample: \"Ask one question in tomorrow's team meeting.\"\n\n**3. Predict the Outcome**\nWhat exactly do you think will happen?\nExample: \"People will laugh, I'll turn red, my boss will think less of me.\"\n\n**4. Rate Your Belief**\nHow much do you believe your prediction? (0-100%)\nExample: 85%\n\n**5. Conduct the Experiment**\nDo the behavior and observe what actually happens.\n\n**6. Evaluate the Results**\nWhat actually happened? How does this compare to your prediction?\n\n**7. Update Your Belief**\nBased on the evidence, how much do you believe the original prediction now?\n\n**Common Experiment Ideas:**\n• Making small talk with a colleague\n• Expressing a different opinion\n• Asking for help\n• Making a minor mistake and seeing what happens\n• Not checking something multiple times`,\n              reminder: \"The goal isn't to prove you wrong, but to gather real evidence about what actually happens when you take small risks.\"\n            }\n          }\n        ]\n      },\n      6: {\n        title: \"Relapse Prevention & NHS Transition\",\n        description: \"Create your personal toolkit for maintaining progress and preparing for NHS transition\",\n        objectives: [\n          \"Develop a personalized anxiety management toolkit\",\n          \"Create a relapse prevention plan\",\n          \"Prepare for NHS mental health services transition\",\n          \"Build long-term resilience strategies\"\n        ],\n        activities: [\n          {\n            id: \"progress-review\",\n            type: \"assessment\" as const,\n            title: \"Progress Assessment & Reflection\",\n            description: \"Review your journey and celebrate your achievements\",\n            estimatedMinutes: 20,\n            isCompleted: false,\n            content: {\n              instructions: `Take time to reflect on your progress through this 6-week program:\n\n**Part 1: Skills Learned**\nFor each week, rate how helpful it was (1-10) and identify your key takeaways:\n\n**Week 1: Understanding Anxiety**\n• What insights about anxiety were most valuable to you?\n• How has understanding the fight-flight-freeze response helped?\n• What anxiety triggers have you identified?\n• Helpfulness rating: ___/10\n\n**Week 2: Breathing & Relaxation**\n• Which breathing techniques work best for you?\n• How often do you use relaxation skills now?\n• When do you most rely on these techniques?\n• Helpfulness rating: ___/10\n\n**Week 3: Cognitive Strategies**\n• How has your thinking about anxious thoughts changed?\n• What cognitive tools do you use most often?\n• Can you challenge anxious thoughts more effectively now?\n• Helpfulness rating: ___/10\n\n**Week 4: Mindfulness & Grounding**\n• What mindfulness practices have you incorporated into daily life?\n• How does the 5-4-3-2-1 technique work for you?\n• When do you feel most present and grounded?\n• Helpfulness rating: ___/10\n\n**Week 5: Behavioral Activation**\n• What fears or avoidance behaviors have you faced?\n• How have your values guided your actions?\n• What exposure exercises have you tried?\n• Helpfulness rating: ___/10\n\n**Part 2: Changes You've Noticed**\nRate each area before starting the program vs. now (1-10):\n\n**Anxiety Management:**\n• Before: ___/10  |  Now: ___/10\n• What specific changes have you noticed?\n\n**Daily Functioning:**\n• Before: ___/10  |  Now: ___/10  \n• How has your daily life improved?\n\n**Confidence:**\n• Before: ___/10  |  Now: ___/10\n• What situations feel more manageable now?\n\n**Relationships:**\n• Before: ___/10  |  Now: ___/10\n• How have your relationships been affected?\n\n**Work/School Performance:**\n• Before: ___/10  |  Now: ___/10\n• What changes have you noticed in your performance?\n\n**Overall Quality of Life:**\n• Before: ___/10  |  Now: ___/10\n• What are you most proud of achieving?\n\n**Part 3: Current Challenges Assessment**\n• What anxiety symptoms do you still struggle with?\n• What situations remain difficult for you?\n• Which coping strategies need more practice?\n• What would you like to continue working on?\n• Where might you need additional support?\n\n**Part 4: Future Readiness**\nRate your readiness in each area (1-10):\n• Using anxiety management tools independently: ___/10\n• Handling setbacks without professional support: ___/10\n• Maintaining progress during stressful periods: ___/10\n• Transitioning to NHS mental health services: ___/10\n• Continuing your anxiety management journey: ___/10\n\n**Part 5: Key Insights & Wisdom**\n• What is the most important thing you've learned about yourself?\n• What would you tell someone just starting this program?\n• What keeps you motivated to continue working on anxiety management?\n• How do you want to continue growing after this program?\n\n**Part 6: Success Stories**\nDescribe 2-3 specific situations where you:\n1. Used your new skills successfully\n2. Did something you previously avoided due to anxiety\n3. Felt proud of how you handled an anxious moment`,\n              reflection_prompts: [\n                \"What is the biggest change you've made during this program?\",\n                \"Which week was most helpful and why?\",\n                \"What advice would you give to someone starting this journey?\",\n                \"How do you want to continue growing after this program ends?\",\n                \"What are you most proud of achieving in these 6 weeks?\",\n                \"How will you remember and apply what you've learned?\"\n              ],\n              progress_tracking: {\n                weekly_ratings: [\n                  { week: 1, helpfulness: 0, key_takeaway: \"\" },\n                  { week: 2, helpfulness: 0, key_takeaway: \"\" },\n                  { week: 3, helpfulness: 0, key_takeaway: \"\" },\n                  { week: 4, helpfulness: 0, key_takeaway: \"\" },\n                  { week: 5, helpfulness: 0, key_takeaway: \"\" }\n                ],\n                before_after_ratings: {\n                  anxiety_management: { before: 0, after: 0 },\n                  daily_functioning: { before: 0, after: 0 },\n                  confidence: { before: 0, after: 0 },\n                  relationships: { before: 0, after: 0 },\n                  work_performance: { before: 0, after: 0 },\n                  quality_of_life: { before: 0, after: 0 }\n                },\n                readiness_ratings: {\n                  independent_tools: 0,\n                  handle_setbacks: 0,\n                  maintain_progress: 0,\n                  nhs_transition: 0,\n                  continue_journey: 0\n                }\n              }\n            }\n          },\n          {\n            id: \"personal-toolkit\",\n            type: \"worksheet\" as const,\n            title: \"Creating Your Personal Anxiety Toolkit\",\n            description: \"Compile your most effective techniques into a personalized toolkit\",\n            estimatedMinutes: 25,\n            isCompleted: false,\n            content: {\n              instructions: `Create a comprehensive, personalized toolkit with your most effective anxiety management strategies. This will be your go-to resource for managing anxiety independently.\n\n**Section 1: Emergency Techniques (For Acute Anxiety)**\nChoose 3-5 techniques that work quickly when anxiety is high:\n\n**Breathing Techniques:**\n□ Box breathing (4-4-4-4 pattern)\n□ Diaphragmatic breathing (belly breathing)\n□ 4-7-8 breathing (inhale 4, hold 7, exhale 8)\n□ Quick coherent breathing (5 seconds in, 5 seconds out)\n\n**Grounding Techniques:**\n□ 5-4-3-2-1 sensory grounding\n□ Physical grounding (feel feet on floor, hold an object)\n□ Mental grounding (count backwards from 100 by 7s)\n□ Cold water on wrists or face\n\n**Rapid Relaxation:**\n□ Progressive muscle relaxation (quick version)\n□ Visualization of calm place\n□ Mindful observation without judgment\n□ Positive self-talk phrases\n\n**Your Top 3 Emergency Techniques:**\n1. ________________________________\n2. ________________________________\n3. ________________________________\n\n**Section 2: Daily Maintenance Strategies**\nSelect ongoing practices to prevent anxiety buildup:\n\n**Morning Routine (Choose 2-3):**\n□ 5-minute mindfulness meditation\n□ Gratitude journaling (3 things)\n□ Gentle stretching or yoga\n□ Intention setting for the day\n□ Breathing exercise while having coffee/tea\n□ Review daily goals aligned with values\n\n**Throughout the Day (Choose 2-3):**\n□ Hourly breathing check-ins\n□ Mindful transitions between activities\n□ Regular movement breaks\n□ Anxiety level check-ins (1-10 scale)\n□ Values-based decision making\n□ Positive self-talk reminders\n\n**Evening Routine (Choose 2-3):**\n□ Reflection on the day's successes\n□ Progressive muscle relaxation\n□ Worry time (scheduled 15 minutes)\n□ Gratitude practice\n□ Preparation for tomorrow to reduce morning anxiety\n□ Reading or calming activity\n\n**Weekly Practices (Choose 1-2):**\n□ Values assessment and goal adjustment\n□ Exposure practice (facing a small fear)\n□ Social connection activity\n□ Nature time or outdoor activity\n□ Review and update anxiety management goals\n\n**Your Daily Maintenance Plan:**\nMorning: ________________________________\nDuring Day: ______________________________\nEvening: ________________________________\nWeekly: _________________________________\n\n**Section 3: Thought Management Tools**\nPick your favorite cognitive techniques:\n\n**For Identifying Anxious Thoughts:**\n□ Thought records and journaling\n□ Mindful awareness of thinking patterns\n□ Anxiety symptom tracking\n□ Trigger identification logs\n\n**For Challenging Thoughts:**\n□ Evidence for/against worksheets\n□ Alternative perspective questions\n□ Probability estimation exercises\n□ Worst case/best case/most likely scenarios\n\n**For Balanced Thinking:**\n□ Reframing negative thoughts\n□ Self-compassion phrases\n□ Perspective-taking exercises\n□ Reality testing questions\n\n**Your Top 3 Thought Tools:**\n1. ________________________________\n2. ________________________________\n3. ________________________________\n\n**Quick Thought Challenge Questions:**\n• Is this thought realistic?\n• What evidence supports/contradicts this?\n• What would I tell a friend in this situation?\n• Will this matter in 5 years?\n\n**Section 4: Behavioral Strategies**\nInclude gradual exposure and activation plans:\n\n**Exposure Practice:**\n□ Continue working through your exposure hierarchy\n□ Regular practice of anxiety-provoking situations\n□ Gradual increase in challenge level\n□ Behavioral experiments to test anxious predictions\n\n**Values-Based Actions:**\n□ Weekly goals aligned with your core values\n□ Regular review of values vs. anxiety-driven decisions\n□ Social activities that matter to you\n□ Work/hobby activities that bring meaning\n\n**Behavioral Activation:**\n□ Scheduling enjoyable activities\n□ Maintaining social connections\n□ Physical exercise routine\n□ Engaging in meaningful projects\n\n**Your Behavioral Strategy Plan:**\nWeekly exposure goal: ________________________\nValues-based activity: _______________________\nSocial connection goal: ______________________\nPhysical activity plan: ______________________\n\n**Section 5: Warning Signs & Early Intervention**\n\n**Physical Warning Signs:**\n□ Muscle tension (especially shoulders, jaw, back)\n□ Sleep changes (difficulty falling asleep, frequent waking)\n□ Appetite changes\n□ Headaches or stomach issues\n□ Fatigue or restlessness\n□ Heart racing or feeling short of breath\n\n**Emotional Warning Signs:**\n□ Increased worry or racing thoughts\n□ Irritability or mood swings\n□ Feeling overwhelmed or hopeless\n□ Difficulty concentrating\n□ Increased sensitivity to criticism\n□ Feeling disconnected from others\n\n**Behavioral Warning Signs:**\n□ Avoiding activities you usually enjoy\n□ Procrastinating on important tasks\n□ Isolating from friends and family\n□ Increased use of substances or unhealthy coping\n□ Changes in work or school performance\n□ Seeking excessive reassurance\n\n**Your Personal Warning Signs:**\n1. ________________________________\n2. ________________________________\n3. ________________________________\n\n**Early Intervention Action Plan:**\nWhen I notice 1-2 warning signs:\n• ________________________________\n• ________________________________\n\nWhen I notice 3+ warning signs:\n• ________________________________\n• ________________________________\n• Consider reaching out to: _______________\n\n**Section 6: Support Network & Resources**\n\n**Personal Support:**\n• Trusted friend: ________________________\n• Family member: _______________________\n• Professional contact: ___________________\n\n**Crisis Resources:**\n• Crisis Text Line: Text HOME to 741741\n• Samaritans: 116 123 (free, 24/7)\n• NHS 111 for urgent but non-emergency help\n• 999 for immediate emergency situations\n\n**Self-Help Resources:**\n• Apps I find helpful: ____________________\n• Books or websites: ____________________\n• Online communities: ___________________\n\n**Section 7: Toolkit Quick Reference Card**\nCreate a summary card to keep with you:\n\n**When anxiety hits, try:**\n1. ________________________________\n2. ________________________________\n3. ________________________________\n\n**Daily practices:**\n________________________________\n\n**Emergency contacts:**\n________________________________\n\n**Reminder phrases:**\n• ________________________________\n• ________________________________`,\n              toolkit_builder: {\n                emergency_techniques: {\n                  breathing: [],\n                  grounding: [],\n                  relaxation: [],\n                  selected: []\n                },\n                daily_practices: {\n                  morning: [],\n                  throughout_day: [],\n                  evening: [],\n                  weekly: []\n                },\n                thought_tools: {\n                  identifying: [],\n                  challenging: [],\n                  balancing: [],\n                  quick_questions: []\n                },\n                behavioral_strategies: {\n                  exposure_goal: \"\",\n                  values_activity: \"\",\n                  social_goal: \"\",\n                  physical_plan: \"\"\n                },\n                warning_signs: {\n                  physical: [],\n                  emotional: [],\n                  behavioral: [],\n                  personal_top3: []\n                },\n                action_plan: {\n                  early_signs: [],\n                  multiple_signs: [],\n                  emergency_contact: \"\"\n                },\n                support_network: {\n                  trusted_friend: \"\",\n                  family_member: \"\",\n                  professional: \"\",\n                  helpful_apps: \"\",\n                  resources: \"\"\n                },\n                quick_reference: {\n                  emergency_steps: [],\n                  daily_practice: \"\",\n                  emergency_contact: \"\",\n                  reminder_phrases: []\n                }\n              }\n            }\n          },\n          {\n            id: \"relapse-prevention-plan\",\n            type: \"worksheet\" as const,\n            title: \"Relapse Prevention Plan\",\n            description: \"Prepare strategies for managing setbacks and maintaining progress\",\n            estimatedMinutes: 20,\n            isCompleted: false,\n            content: {\n              instructions: `Recovery isn't linear - there will be ups and downs. A comprehensive relapse prevention plan helps you navigate difficult periods and maintain your progress long-term.\n\n**Section 1: Understanding Setbacks**\nSetbacks are a normal part of recovery and don't erase your progress. They're opportunities to practice your skills and learn more about yourself.\n\n**What a Setback IS:**\n• A temporary return of stronger anxiety symptoms\n• Using old coping patterns during stress\n• Feeling like you've \"lost\" some progress\n• Having a particularly difficult day, week, or period\n\n**What a Setback IS NOT:**\n• A sign that you've failed or the program didn't work\n• Permanent loss of all your progress\n• A reason to give up on your anxiety management\n• Evidence that you \"can't get better\"\n\n**Setback Mindset Reframe:**\nInstead of: \"I'm back to square one\"\nTry: \"I'm having a tough time and can use this as practice\"\n\nInstead of: \"This proves I can't handle anxiety\"\nTry: \"This shows I'm human and need to use my tools more consistently\"\n\n**Section 2: High-Risk Situations**\nIdentify when your anxiety might be more challenging:\n\n**Life Transitions:**\n□ Starting a new job or school\n□ Moving to a new home\n□ Relationship changes (marriage, breakup, divorce)\n□ Health issues (yours or family members)\n□ Financial stress or changes\n□ Loss or grief\n\n**Stressful Periods:**\n□ Work deadlines or high-pressure projects\n□ Exam periods or important presentations\n□ Family conflicts or relationship problems\n□ Holiday seasons or special events\n□ Anniversary dates of difficult events\n□ Legal issues or major decisions\n\n**Physical Factors:**\n□ Illness or injury\n□ Hormonal changes\n□ Sleep deprivation\n□ Medication changes\n□ Substance use\n□ Poor nutrition or dehydration\n\n**Environmental Factors:**\n□ Seasonal changes (especially winter)\n□ Weather extremes\n□ Major world events or news\n□ Changes in living situation\n□ Social isolation\n□ Information overload\n\n**Your Personal High-Risk Situations:**\n1. ________________________________\n2. ________________________________\n3. ________________________________\n4. ________________________________\n\n**Section 3: Early Warning System**\nRecognize when anxiety is becoming problematic again:\n\n**Level 1 - Yellow Alert (Mild Increase):**\n□ Slight increase in worry or tension\n□ Occasional difficulty sleeping\n□ Minor avoidance of some activities\n□ Feeling slightly more stressed than usual\n□ Forgetting to use coping strategies occasionally\n\n**Level 2 - Orange Alert (Moderate Increase):**\n□ Noticeable increase in physical anxiety symptoms\n□ Sleep problems several times per week\n□ Avoiding important activities more frequently\n□ Difficulty concentrating at work or school\n□ Feeling overwhelmed by daily tasks\n□ Increased irritability or mood changes\n\n**Level 3 - Red Alert (Significant Increase):**\n□ Severe anxiety symptoms interfering with daily life\n□ Sleep problems most nights\n□ Avoiding multiple important activities\n□ Unable to function normally at work/school/home\n□ Complete abandonment of coping strategies\n□ Thoughts of self-harm or substance use\n\n**Your Personal Warning Signs:**\nEarly signs (Yellow): ________________________\nModerate signs (Orange): ____________________\nSevere signs (Red): _________________________\n\n**Section 4: Action Plans for Each Level**\n\n**Yellow Alert Response Plan:**\n□ Increase daily mindfulness/breathing practice\n□ Review and restart neglected coping strategies\n□ Ensure good sleep hygiene and self-care\n□ Reach out to a friend or family member\n□ Schedule enjoyable or meaningful activities\n□ Review your personal toolkit\n\nYour specific Yellow Alert plan:\n1. ________________________________\n2. ________________________________\n3. ________________________________\n\n**Orange Alert Response Plan:**\n□ Implement emergency techniques more frequently\n□ Temporarily reduce non-essential commitments\n□ Increase social support and check-ins\n□ Consider speaking with a healthcare provider\n□ Review and adjust your routine\n□ Use your support network more actively\n\nYour specific Orange Alert plan:\n1. ________________________________\n2. ________________________________\n3. ________________________________\n\n**Red Alert Response Plan:**\n□ Seek professional help immediately\n□ Inform trusted people about your struggles\n□ Consider time off work/school if possible\n□ Use crisis resources if needed\n□ Return to basics: sleep, eat, breathe, move\n□ Remove additional stressors temporarily\n\nYour specific Red Alert plan:\n1. ________________________________\n2. ________________________________\n3. ________________________________\n\n**Section 5: Building Resilience**\nStrengthen your ability to bounce back:\n\n**Daily Resilience Habits:**\n□ Consistent sleep schedule (even on weekends)\n□ Regular physical activity or movement\n□ Healthy eating patterns\n□ Daily mindfulness or relaxation practice\n□ Social connection (even brief check-ins)\n□ Time in nature or outdoors\n□ Engaging in meaningful activities\n\n**Weekly Resilience Activities:**\n□ Values assessment and goal adjustment\n□ Social activities with friends or family\n□ Hobbies or creative activities\n□ Planning and preparation for the week ahead\n□ Review of what's working and what needs adjustment\n□ Time for rest and recovery\n\n**Monthly Resilience Review:**\n□ Assess overall mental health and progress\n□ Adjust goals and strategies as needed\n□ Plan for upcoming stressors or challenges\n□ Celebrate achievements and progress\n□ Connect with healthcare providers if needed\n\n**Section 6: Support Network Planning**\n\n**Primary Support Person:**\nName: _________________________________\nRelationship: ____________________________\nPhone: ________________________________\nWhen to contact: ________________________\n\n**Secondary Support People:**\nName: _________________________________\nName: _________________________________\nName: _________________________________\n\n**Professional Support:**\nGP: ___________________________________\nMental health professional: ________________\nCrisis contact: ____________________________\n\n**Support Group/Community:**\nOnline community: _______________________\nLocal group: ____________________________\nMental health charity: ____________________\n\n**Section 7: Professional Help Triggers**\nSeek professional help when:\n\n**Immediate/Crisis Situations:**\n□ Thoughts of suicide or self-harm\n□ Inability to ensure personal safety\n□ Severe panic attacks lasting hours\n□ Psychotic symptoms (hallucinations, delusions)\n□ Substance abuse to cope with anxiety\n\n**Urgent Situations (Within 1-2 weeks):**\n□ Inability to function at work/school for 1+ weeks\n□ Complete isolation from friends and family\n□ Severe sleep deprivation (less than 4 hours for several nights)\n□ Anxiety preventing basic self-care\n□ Significant increase in physical symptoms\n\n**Non-Urgent Professional Support:**\n□ Moderate symptoms persisting for 3+ weeks\n□ Feeling stuck despite using all your tools\n□ Wanting to learn additional coping strategies\n□ Major life changes requiring extra support\n□ Medication review or adjustment needed\n\n**Section 8: Long-Term Success Strategies**\n\n**3-Month Goals:**\n□ Maintain daily anxiety management routine\n□ Continue practicing exposure exercises\n□ Build and maintain social connections\n□ Monitor and adjust strategies as needed\n\n**6-Month Goals:**\n□ Handle minor setbacks independently\n□ Pursue values-based goals despite anxiety\n□ Maintain progress during stressful periods\n□ Develop additional coping strategies\n\n**1-Year Goals:**\n□ Integrate anxiety management into lifestyle\n□ Support others with similar struggles\n□ Pursue major life goals without anxiety interference\n□ Maintain overall life satisfaction and well-being\n\n**Your Personal Long-Term Goals:**\n3 months: ______________________________\n6 months: ______________________________\n1 year: ________________________________\n\n**Section 9: Emergency Crisis Resources**\n\n**UK Crisis Contacts:**\n• **Samaritans:** 116 123 (free, 24/7)\n• **Crisis Text Line:** Text SHOUT to 85258\n• **NHS 111:** For urgent but non-emergency help\n• **999:** For immediate emergency situations\n\n**Mental Health Helplines:**\n• **Mind Info Line:** 0300 123 3393\n• **Anxiety UK:** 03444 775 774\n• **Rethink Mental Illness:** 0300 5000 927\n• **CALM (Campaign Against Living Miserably):** 0800 58 58 58\n\n**Online Resources:**\n• **NHS Mental Health Services:** nhs.uk/mental-health\n• **Mind:** mind.org.uk\n• **Anxiety UK:** anxietyuk.org.uk\n• **Mental Health Foundation:** mentalhealth.org.uk\n\n**Apps for Support:**\n• **SilverCloud:** NHS-approved therapy platform\n• **Sanvello:** Anxiety and mood tracking\n• **Headspace:** Mindfulness and meditation\n• **Calm:** Sleep and relaxation\n\n**Section 10: Relapse Prevention Checklist**\n□ I've identified my personal high-risk situations\n□ I know my early warning signs\n□ I have action plans for different levels of difficulty\n□ I've built a strong support network\n□ I know when to seek professional help\n□ I have crisis resources easily accessible\n□ I've set realistic long-term goals\n□ I understand that setbacks are normal\n□ I'm committed to ongoing self-care and practice`,\n              relapse_prevention: {\n                high_risk_situations: [],\n                warning_signs: {\n                  yellow: [],\n                  orange: [],\n                  red: []\n                },\n                action_plans: {\n                  yellow: [],\n                  orange: [],\n                  red: []\n                },\n                support_network: {\n                  primary_contact: \"\",\n                  secondary_contacts: [],\n                  professional_contacts: [],\n                  community_resources: []\n                },\n                long_term_goals: {\n                  three_months: \"\",\n                  six_months: \"\",\n                  one_year: \"\"\n                },\n                resilience_habits: {\n                  daily: [],\n                  weekly: [],\n                  monthly: []\n                }\n              }\n            }\n          },\n          {\n            id: \"nhs-transition-prep\",\n            type: \"reading\" as const,\n            title: \"Preparing for NHS Mental Health Services\",\n            description: \"Get ready for your transition to NHS care with confidence\",\n            estimatedMinutes: 15,\n            isCompleted: false,\n            content: {\n              text: `As you transition to NHS mental health services, you're in a much stronger position than when you started this program. Here's your comprehensive guide to making the most of NHS care:\n\n**Section 1: Understanding NHS Mental Health Services**\n\n**Primary Mental Health Team (PMHT):**\n• Often the first point of contact for mental health support\n• Provides assessments, brief interventions, and treatment planning\n• May offer cognitive behavioral therapy (CBT), counseling, or other therapies\n• Can refer to more specialist services if needed\n\n**Community Mental Health Teams (CMHT):**\n• For people with more complex or severe mental health needs\n• Multi-disciplinary teams including psychiatrists, nurses, social workers\n• Provide ongoing support and treatment in the community\n• Coordinate care between different services\n\n**IAPT Services (Improving Access to Psychological Therapies):**\n• Focus on evidence-based psychological treatments\n• Primarily for anxiety and depression\n• Often shorter-term, structured therapy programs\n• May include group therapy options\n\n**Crisis Services:**\n• For urgent mental health support\n• Available 24/7 in most areas\n• Include crisis teams, safe havens, and crisis cafes\n• Alternative to A&E for mental health emergencies\n\n**Section 2: What to Expect from Your Assessment**\n\n**The Initial Assessment Process:**\n• Usually 1-2 hours with a mental health professional\n• Discussion of your current symptoms and their impact\n• Review of your mental health history\n• Assessment of risk factors and support systems\n• Development of initial treatment recommendations\n\n**What They'll Ask About:**\n• Current anxiety symptoms and triggers\n• How anxiety affects your daily life\n• Previous mental health treatment or support\n• Physical health and medication\n• Social support and relationships\n• Work, education, and housing situation\n• Risk factors and safety concerns\n\n**Section 3: Preparing for Your Assessment**\n\n**Documents to Bring:**\n□ GP referral letter (if you have one)\n□ List of current medications\n□ Summary of this 6-week program and what you've learned\n□ Your personal anxiety toolkit\n□ Any previous mental health records\n□ List of questions you want to ask\n\n**Your 6-Week Program Summary:**\nCreate a one-page summary including:\n• Techniques that have been most helpful\n• Situations you've successfully managed\n• Areas where you still need support\n• Your current anxiety levels and functioning\n• Goals for ongoing treatment\n\n**Information to Share:**\n□ Specific anxiety symptoms and their frequency\n□ Triggers you've identified\n□ Coping strategies you've developed\n□ Progress you've made and challenges remaining\n□ Your values and treatment goals\n□ Support systems you have in place\n\n**Section 4: Treatment Options You Might Be Offered**\n\n**Cognitive Behavioral Therapy (CBT):**\n• Evidence-based treatment for anxiety disorders\n• Focuses on changing unhelpful thought and behavior patterns\n• Usually 12-20 sessions over several months\n• May be individual or group therapy\n• Builds on skills you've already learned in this program\n\n**Other Psychological Therapies:**\n• **Acceptance and Commitment Therapy (ACT):** Focus on accepting anxiety while pursuing values\n• **Mindfulness-Based Therapies:** Structured mindfulness programs\n• **Counseling:** Supportive talking therapy to explore feelings and experiences\n• **EMDR:** For anxiety related to trauma or specific incidents\n\n**Medication Options:**\n• **SSRIs (Selective Serotonin Reuptake Inhibitors):** Common first-line treatment\n• **SNRIs:** Alternative antidepressants that can help with anxiety\n• **Beta-blockers:** For physical symptoms of anxiety\n• **Short-term options:** Rarely prescribed, only for severe cases\n\n**Group Therapy Options:**\n• Anxiety management groups\n• Social anxiety groups\n• Mindfulness or relaxation groups\n• Peer support groups\n\n**Section 5: Questions to Ask During Your Assessment**\n\n**About Treatment Options:**\n• What treatment approaches do you recommend for my specific type of anxiety?\n• How long is the typical treatment course?\n• What are the benefits and potential side effects of recommended treatments?\n• Are there group therapy options available?\n• What happens if the first treatment approach doesn't work?\n\n**About Waiting Times:**\n• How long is the wait for treatment to begin?\n• What support is available while I'm waiting?\n• Can I continue using the skills I've learned in this program?\n• Are there any resources or support groups I can access immediately?\n\n**About Ongoing Support:**\n• What should I do if I'm struggling between appointments?\n• How often will I be seen once treatment begins?\n• What crisis support is available if I need it?\n• How will my progress be monitored?\n\n**About Your Role:**\n• What can I do to prepare for treatment?\n• How can I make the most of therapy sessions?\n• What should I do between sessions?\n• How involved will my family or friends be in treatment?\n\n**Section 6: Your Strengths Going Forward**\n\n**Skills You've Developed:**\n□ Understanding of anxiety and how it affects you\n□ Toolkit of proven anxiety management techniques\n□ Experience with breathing and relaxation exercises\n□ Cognitive strategies for challenging anxious thoughts\n□ Mindfulness and grounding skills\n□ Values-based decision making\n□ Exposure and behavioral activation experience\n□ Relapse prevention planning\n\n**Personal Insights:**\n□ Knowledge of your anxiety triggers\n□ Understanding of your warning signs\n□ Awareness of your personal values\n□ Recognition of your support systems\n□ Experience with what works and what doesn't\n\n**Progress You've Made:**\n□ Situations you can now handle that you couldn't before\n□ Improved confidence in managing anxiety\n□ Better understanding of yourself and your needs\n□ Stronger sense of what you want from life\n\n**Section 7: Continuing Your Progress While Waiting**\n\n**Maintain Your Daily Practices:**\n□ Continue using breathing and relaxation techniques\n□ Keep practicing mindfulness and grounding\n□ Maintain your values-based goal setting\n□ Use your personal anxiety toolkit regularly\n\n**Stay Connected:**\n□ Keep in touch with your support network\n□ Continue social activities and relationships\n□ Engage with online communities if helpful\n□ Consider peer support groups\n\n**Keep Learning:**\n□ Read self-help books on anxiety management\n□ Use mental health apps for additional support\n□ Practice the skills you've learned consistently\n□ Try new anxiety management techniques\n\n**Monitor Your Progress:**\n□ Keep track of your anxiety levels and triggers\n□ Note what techniques are working well\n□ Document any new challenges or successes\n□ Prepare updates for your first NHS appointment\n\n**Section 8: Making the Most of NHS Treatment**\n\n**Be an Active Participant:**\n• Come prepared to sessions with questions and updates\n• Practice techniques between sessions\n• Be honest about what's working and what isn't\n• Ask for clarification if you don't understand something\n\n**Set Clear Goals:**\n• Work with your therapist to set specific, achievable goals\n• Regularly review and adjust goals as you progress\n• Celebrate small wins along the way\n• Be patient with the process\n\n**Use Your Existing Skills:**\n• Share the techniques you've learned in this program\n• Build on the foundation you've already created\n• Integrate new skills with what you already know\n• Maintain the progress you've made\n\n**Section 9: Advocacy and Self-Advocacy**\n\n**Know Your Rights:**\n• You have the right to be involved in decisions about your care\n• You can ask for a second opinion if needed\n• You can request a different therapist if the fit isn't right\n• You can access your medical records\n\n**Speak Up for Yourself:**\n• Express your preferences for treatment approaches\n• Share what you've learned about yourself\n• Ask questions if something isn't clear\n• Request additional support if you need it\n\n**Get Support with Advocacy:**\n• Bring a trusted friend or family member to appointments\n• Contact mental health charities for advocacy support\n• Use patient advice and liaison services (PALS) if needed\n• Join patient groups or forums for peer support\n\n**Section 10: Emergency and Crisis Support**\n\n**When to Seek Urgent Help:**\n□ Thoughts of suicide or self-harm\n□ Severe panic attacks that won't subside\n□ Inability to function or care for yourself\n□ Substance use to cope with anxiety\n□ Feeling unsafe or out of control\n\n**How to Access Crisis Support:**\n• **NHS 111:** For urgent but non-emergency mental health needs\n• **Crisis Team:** Contact through your GP or NHS 111\n• **A&E:** For immediate emergencies\n• **Samaritans:** 116 123 for emotional support anytime\n\n**Crisis Planning:**\n• Have emergency numbers easily accessible\n• Identify early warning signs of crisis\n• Plan who to contact and when\n• Know where your nearest crisis services are located\n\n**Section 11: Long-Term Success with NHS Services**\n\n**Building a Good Relationship with Your Mental Health Team:**\n• Be honest and open about your experiences\n• Follow through with agreed plans and homework\n• Communicate any concerns or difficulties\n• Appreciate that building therapeutic relationships takes time\n\n**Continuing Self-Care:**\n• Maintain the healthy habits you've developed\n• Keep using your anxiety management toolkit\n• Stay connected with your support network\n• Continue pursuing your values and goals\n\n**Planning for the Future:**\n• Work towards independence in managing your anxiety\n• Develop a long-term maintenance plan\n• Know how to access support if you need it again\n• Consider how you might help others with similar struggles\n\n**Remember: You're Not Starting from Scratch**\nYou're building on a strong foundation of:\n• Self-awareness and understanding\n• Proven anxiety management skills\n• Personal insights and strategies\n• Progress and achievements\n• Resilience and determination\n\n**Your Next Steps:**\n1. Complete your program summary document\n2. Gather any relevant medical records\n3. Prepare your list of questions\n4. Continue practicing your anxiety management skills\n5. Stay connected with your support network\n6. Approach NHS services with confidence in what you've already achieved\n\nYou're ready for this next phase of your mental health journey. Trust in the progress you've made and the skills you've developed. NHS services will build on this strong foundation to support your continued growth and recovery.`\n            }\n          }\n        ]\n      }\n    };\n    \n    return contents[weekNumber as keyof typeof contents] || contents[1];\n  };\n\n  const moduleContent = getModuleContent(weekNumber);\n  const activities: ModuleActivity[] = moduleContent.activities;\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const handleActivityComplete = (activityId: string) => {\n    // In real implementation, this would update the backend\n    // Activity completed - update progress\n  };\n\n  const handleStartActivity = (activityId: string) => {\n    setCurrentActivity(activityId);\n    setIsTimerRunning(true);\n    setTimer(0);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <CrisisBanner />\n      <TabNavigation />\n      \n      <main className=\"flex-1 bg-background\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          \n          {/* Header */}\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/anxiety-track\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Track\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">\n                Week {weekNumber}: {moduleContent.title}\n              </h1>\n              <p className=\"text-muted-foreground\">{moduleContent.description}</p>\n            </div>\n          </div>\n\n          {/* Progress & Timer */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">\n                      Session Time: {formatTime(timer)}\n                    </span>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => setIsTimerRunning(!isTimerRunning)}\n                    data-testid={isTimerRunning ? \"button-pause-timer\" : \"button-start-timer\"}\n                  >\n                    {isTimerRunning ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                    {isTimerRunning ? \"Pause\" : \"Start\"}\n                  </Button>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {activities.filter(a => a.isCompleted).length} of {activities.length} activities completed\n                </div>\n              </div>\n              <Progress \n                value={(activities.filter(a => a.isCompleted).length / activities.length) * 100} \n                className=\"mt-3\"\n              />\n            </CardContent>\n          </Card>\n\n          {/* Learning Objectives */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"w-5 h-5\" />\n                Learning Objectives\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2\">\n                {moduleContent.objectives.map((objective, index) => (\n                  <li key={index} className=\"flex items-start gap-2\">\n                    <CheckCircle className=\"w-4 h-4 mt-0.5 text-accent flex-shrink-0\" />\n                    <span className=\"text-sm\">{objective}</span>\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n\n          {/* Activities */}\n          <div className=\"space-y-4\">\n            {activities.map((activity, index) => {\n              const IconComponent = activityIcons[activity.type];\n              const isActive = currentActivity === activity.id;\n              \n              return (\n                <Card key={activity.id} className={cn(\"transition-all\", isActive && \"border-primary\")}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className={cn(\n                          \"w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0\",\n                          activity.isCompleted ? \"bg-accent\" : \"bg-muted\"\n                        )}>\n                          {activity.isCompleted ? (\n                            <CheckCircle className=\"w-5 h-5 text-accent-foreground\" />\n                          ) : (\n                            <IconComponent className=\"w-5 h-5 text-muted-foreground\" />\n                          )}\n                        </div>\n                        <div className=\"flex-1\">\n                          <CardTitle className=\"text-lg\">{activity.title}</CardTitle>\n                          <p className=\"text-muted-foreground text-sm mt-1\">{activity.description}</p>\n                          <div className=\"flex items-center gap-4 mt-2\">\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              <Timer className=\"w-3 h-3 mr-1\" />\n                              {activity.estimatedMinutes} min\n                            </Badge>\n                            <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                              {activity.type}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-2\">\n                        {!activity.isCompleted && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleStartActivity(activity.id)}\n                            data-testid={`button-start-activity-${activity.id}`}\n                          >\n                            Start\n                          </Button>\n                        )}\n                        <Checkbox\n                          checked={activity.isCompleted}\n                          onCheckedChange={() => handleActivityComplete(activity.id)}\n                          data-testid={`checkbox-complete-activity-${activity.id}`}\n                        />\n                      </div>\n                    </div>\n                  </CardHeader>\n\n                  {/* Activity Content (expanded when active) */}\n                  {isActive && (\n                    <CardContent className=\"border-t\">\n                      <div className=\"pt-4\">\n                        {activity.type === 'reading' && (\n                          <div className=\"prose prose-sm max-w-none\">\n                            <div \n                              className=\"whitespace-pre-line text-sm leading-relaxed\"\n                              dangerouslySetInnerHTML={{ \n                                __html: activity.content.text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>') \n                              }}\n                            />\n                          </div>\n                        )}\n                        \n                        {activity.type === 'breathing' && (\n                          <div className=\"space-y-4\">\n                            <div className=\"bg-muted/50 p-4 rounded-lg\">\n                              <h4 className=\"font-medium mb-2\">Instructions:</h4>\n                              <ol className=\"list-decimal list-inside space-y-1 text-sm\">\n                                {activity.content.instructions.map((instruction: string, idx: number) => (\n                                  <li key={idx}>{instruction}</li>\n                                ))}\n                              </ol>\n                            </div>\n                            {activity.content.guidance && (\n                              <p className=\"text-sm text-muted-foreground italic\">\n                                💡 {activity.content.guidance}\n                              </p>\n                            )}\n                          </div>\n                        )}\n                        \n                        {activity.type === 'worksheet' && activity.content.checklist && (\n                          <div className=\"space-y-4\">\n                            {activity.content.checklist.map((category: any, idx: number) => (\n                              <div key={idx}>\n                                <h4 className=\"font-medium mb-2\">{category.category} Symptoms:</h4>\n                                <div className=\"grid grid-cols-2 gap-2\">\n                                  {category.items.map((item: string, itemIdx: number) => (\n                                    <div key={itemIdx} className=\"flex items-center space-x-2\">\n                                      <Checkbox id={`${category.category}-${itemIdx}`} />\n                                      <label \n                                        htmlFor={`${category.category}-${itemIdx}`}\n                                        className=\"text-sm\"\n                                      >\n                                        {item}\n                                      </label>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n\n                        {activity.type === 'worksheet' && activity.id === 'values-assessment' && (\n                          <div className=\"mt-6\">\n                            <ValuesWorksheet />\n                          </div>\n                        )}\n\n                        {activity.type === 'assessment' && activity.id === 'progress-review' && (\n                          <div className=\"mt-6\">\n                            <ProgressTracker />\n                          </div>\n                        )}\n\n                        {activity.type === 'worksheet' && activity.id === 'personal-toolkit' && (\n                          <div className=\"mt-6\">\n                            <ToolkitBuilder />\n                          </div>\n                        )}\n\n                        {activity.type === 'worksheet' && activity.id === 'relapse-prevention-plan' && (\n                          <div className=\"mt-6\">\n                            <RelapsePlanner />\n                          </div>\n                        )}\n\n                        {activity.type === 'reading' && activity.id === 'nhs-transition-prep' && (\n                          <div className=\"mt-6\">\n                            <NhsPrepGuide />\n                          </div>\n                        )}\n                        \n                        {activity.type === 'reflection' && (\n                          <div className=\"space-y-4\">\n                            {activity.content.prompts.map((prompt: string, idx: number) => (\n                              <div key={idx} className=\"space-y-2\">\n                                <label className=\"text-sm font-medium\">{prompt}</label>\n                                <Textarea\n                                  placeholder=\"Write your thoughts here...\"\n                                  value={reflections[`${activity.id}-${idx}`] || \"\"}\n                                  onChange={(e) => setReflections(prev => ({\n                                    ...prev,\n                                    [`${activity.id}-${idx}`]: e.target.value\n                                  }))}\n                                  data-testid={`textarea-reflection-${activity.id}-${idx}`}\n                                />\n                              </div>\n                            ))}\n                          </div>\n                        )}\n\n                        {activity.type === 'exercise' && (\n                          <div className=\"space-y-4\">\n                            <div className=\"prose prose-sm max-w-none\">\n                              <div \n                                className=\"whitespace-pre-line text-sm leading-relaxed\"\n                                dangerouslySetInnerHTML={{ \n                                  __html: activity.content.instructions?.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>') ||\n                                         activity.content.script?.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n                                }}\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  )}\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Notes Section */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"w-5 h-5\" />\n                Personal Notes & Reflections\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Textarea\n                placeholder=\"Write down any insights, questions, or thoughts about this module...\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                className=\"min-h-[100px]\"\n                data-testid=\"textarea-module-notes\"\n              />\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":86265},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Heart, ArrowLeft, ArrowRight } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst userSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  nhsNumber: z.string().optional(),\n});\n\nconst onboardingSchema = z.object({\n  anxietyFrequency: z.string(),\n  worryFrequency: z.string(),\n  depressionFrequency: z.string(),\n  anhedoniaFrequency: z.string(),\n  sleepQuality: z.string(),\n  suicidalThoughts: z.string(),\n  selfHarm: z.string(),\n  substanceUse: z.string(),\n  socialWithdrawal: z.string(),\n  functioningImpairment: z.string(),\n});\n\nconst questions = [\n  {\n    id: \"anxietyFrequency\",\n    question: \"Over the past 2 weeks, how often have you been bothered by feeling nervous, anxious, or on edge?\",\n    type: \"frequency\",\n  },\n  {\n    id: \"worryFrequency\",\n    question: \"Over the past 2 weeks, how often have you been bothered by not being able to stop or control worrying?\",\n    type: \"frequency\",\n  },\n  {\n    id: \"depressionFrequency\",\n    question: \"Over the past 2 weeks, how often have you been bothered by feeling down, depressed, or hopeless?\",\n    type: \"frequency\",\n  },\n  {\n    id: \"anhedoniaFrequency\",\n    question: \"Over the past 2 weeks, how often have you been bothered by little interest or pleasure in doing things?\",\n    type: \"frequency\",\n  },\n  {\n    id: \"sleepQuality\",\n    question: \"How would you describe your sleep quality over the past week?\",\n    type: \"quality\",\n    options: [\n      { value: \"excellent\", label: \"Excellent\" },\n      { value: \"good\", label: \"Good\" },\n      { value: \"fair\", label: \"Fair\" },\n      { value: \"poor\", label: \"Poor\" },\n    ],\n  },\n  {\n    id: \"suicidalThoughts\",\n    question: \"Have you had any thoughts of self-harm or suicide in the past month?\",\n    type: \"yesno\",\n  },\n  {\n    id: \"selfHarm\",\n    question: \"Have you engaged in any self-harm behaviors in the past month?\",\n    type: \"yesno\",\n  },\n  {\n    id: \"substanceUse\",\n    question: \"Has your use of alcohol or other substances changed recently?\",\n    type: \"substance\",\n    options: [\n      { value: \"decreased\", label: \"Decreased\" },\n      { value: \"same\", label: \"About the same\" },\n      { value: \"increased\", label: \"Increased\" },\n      { value: \"not-applicable\", label: \"I don't use substances\" },\n    ],\n  },\n];\n\nconst frequencyOptions = [\n  { value: \"0\", label: \"Not at all\" },\n  { value: \"1\", label: \"Several days\" },\n  { value: \"2\", label: \"More than half the days\" },\n  { value: \"3\", label: \"Nearly every day\" },\n];\n\nconst yesNoOptions = [\n  { value: \"no\", label: \"No\" },\n  { value: \"yes\", label: \"Yes\" },\n];\n\nexport default function Onboarding() {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState<\"personal\" | \"screening\">(\"personal\");\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [userId, setUserId] = useState<string>(\"\");\n\n  const userForm = useForm({\n    resolver: zodResolver(userSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      nhsNumber: \"\",\n    },\n  });\n\n  const onboardingForm = useForm({\n    resolver: zodResolver(onboardingSchema),\n    defaultValues: Object.fromEntries(questions.map(q => [q.id, \"\"])),\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/users\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUserId(data.user.id);\n      setStep(\"screening\");\n    },\n  });\n\n  const createOnboardingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/onboarding\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setLocation(\"/\");\n    },\n  });\n\n  const onUserSubmit = (data: any) => {\n    createUserMutation.mutate(data);\n  };\n\n  const onNext = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      // Submit onboarding\n      const responses = onboardingForm.getValues();\n      createOnboardingMutation.mutate({\n        userId,\n        responses,\n      });\n    }\n  };\n\n  const onPrevious = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  };\n\n  if (step === \"personal\") {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <Heart className=\"text-primary-foreground w-6 h-6\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Welcome to Waitlist Companion™</CardTitle>\n            <p className=\"text-muted-foreground\">Let's start with your basic information</p>\n          </CardHeader>\n          <CardContent>\n            <Form {...userForm}>\n              <form onSubmit={userForm.handleSubmit(onUserSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={userForm.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-first-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={userForm.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-last-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={userForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" {...field} data-testid=\"input-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={userForm.control}\n                  name=\"nhsNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>NHS Number (Optional)</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"123 456 7890\" data-testid=\"input-nhs-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={createUserMutation.isPending}\n                  data-testid=\"button-continue-to-screening\"\n                >\n                  {createUserMutation.isPending ? \"Creating Account...\" : \"Continue to Health Screening\"}\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const currentQ = questions[currentQuestion];\n  const progress = ((currentQuestion + 1) / questions.length) * 100;\n\n  let questionOptions = frequencyOptions;\n  if (currentQ.type === \"yesno\") questionOptions = yesNoOptions;\n  else if (currentQ.options) questionOptions = currentQ.options;\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between mb-4\">\n            <span className=\"text-sm text-muted-foreground\">\n              Question {currentQuestion + 1} of {questions.length}\n            </span>\n            <span className=\"text-sm text-muted-foreground\">~{Math.ceil((questions.length - currentQuestion) * 0.5)} min remaining</span>\n          </div>\n          <Progress value={progress} className=\"mb-4\" />\n          <CardTitle className=\"text-lg\">{currentQ.question}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...onboardingForm}>\n            <FormField\n              control={onboardingForm.control}\n              name={currentQ.id as keyof typeof onboardingForm.formState.defaultValues}\n              render={({ field }) => (\n                <FormItem>\n                  <FormControl>\n                    <RadioGroup \n                      value={field.value} \n                      onValueChange={field.onChange}\n                      className=\"space-y-3\"\n                    >\n                      {questionOptions.map((option) => (\n                        <div \n                          key={option.value}\n                          className=\"flex items-center p-4 border border-border rounded-md hover:bg-secondary/50 cursor-pointer transition-colors\"\n                        >\n                          <RadioGroupItem \n                            value={option.value} \n                            id={option.value}\n                            className=\"mr-3\"\n                            data-testid={`radio-${currentQ.id}-${option.value}`}\n                          />\n                          <Label \n                            htmlFor={option.value}\n                            className=\"text-card-foreground cursor-pointer flex-1\"\n                          >\n                            {option.label}\n                          </Label>\n                        </div>\n                      ))}\n                    </RadioGroup>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </Form>\n\n          <div className=\"flex justify-between pt-6\">\n            <Button \n              variant=\"outline\"\n              onClick={onPrevious}\n              disabled={currentQuestion === 0}\n              data-testid=\"button-previous-question\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Previous\n            </Button>\n            \n            <Button \n              onClick={onNext}\n              disabled={!onboardingForm.watch(currentQ.id as any) || createOnboardingMutation.isPending}\n              data-testid=\"button-next-question\"\n            >\n              {currentQuestion === questions.length - 1 ? \"Complete Screening\" : \"Next\"}\n              <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11888},"client/src/pages/resources.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/ui/header\";\nimport { TabNavigation } from \"@/components/ui/tab-navigation\";\nimport { CrisisBanner } from \"@/components/ui/crisis-banner\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle, Gavel, GraduationCap, FileText, Check, Download, ArrowLeft } from \"lucide-react\";\nimport { generateProgressReport } from \"@/lib/pdf-generator\";\nimport { Footer } from \"@/components/ui/footer\";\nimport { BreathingExercise } from \"@/components/BreathingExercise\";\nimport { ThoughtRecord } from \"@/components/ThoughtRecord\";\nimport { GroundingExercises } from \"@/components/GroundingExercises\";\nimport { MoodTracker } from \"@/components/MoodTracker\";\nimport { RelaxationTools } from \"@/components/RelaxationTools\";\nimport { AnxietyGuideComprehensive } from \"@/components/AnxietyGuideComprehensive\";\nimport { SleepGuideComprehensive } from \"@/components/SleepGuideComprehensive\";\nimport { LifestyleGuideComprehensive } from \"@/components/LifestyleGuideComprehensive\";\n\nexport default function Resources() {\n  const mockUserId = \"user-1\";\n  const [activeToolView, setActiveToolView] = useState<string | null>(null);\n  \n\n  const handleExportReport = async () => {\n    try {\n      const response = await fetch(\"/api/reports\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: mockUserId }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to generate report\");\n      \n      const { report } = await response.json();\n      const doc = generateProgressReport(report.reportData);\n      doc.save(\"waitlist-companion-progress-report.pdf\");\n    } catch (error) {\n      alert(\"Error generating report. Please try again.\");\n    }\n  };\n\n  const renderToolView = () => {\n    switch (activeToolView) {\n      case 'breathing':\n        return <BreathingExercise />;\n      case 'thought-record':\n        return <ThoughtRecord />;\n      case 'grounding':\n        return <GroundingExercises />;\n      case 'mood-tracker':\n        return <MoodTracker />;\n      case 'relaxation':\n        return <RelaxationTools />;\n      case 'anxiety-guide':\n        return <AnxietyGuideComprehensive />;\n      case 'sleep-anxiety':\n        return <SleepGuideComprehensive />;\n      case 'lifestyle-guide':\n        return <LifestyleGuideComprehensive />;\n      default:\n        return null;\n    }\n  };\n\n  if (activeToolView) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n        <CrisisBanner />\n        <TabNavigation />\n        \n        <main className=\"flex-1 bg-background\">\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            <div className=\"mb-8\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => setActiveToolView(null)}\n                className=\"mb-4 gap-2\"\n                data-testid=\"button-back-to-resources\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                Back to Resources\n              </Button>\n            </div>\n            {renderToolView()}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <CrisisBanner />\n      <TabNavigation />\n      \n      <main className=\"flex-1 bg-background\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Support Resources</h2>\n            <p className=\"text-muted-foreground\">Interactive tools and information to support your mental health journey</p>\n          </div>\n\n          {/* Emergency Contacts */}\n          <div className=\"bg-destructive/10 border border-destructive p-6 rounded-lg mb-8\">\n            <h3 className=\"text-lg font-semibold text-destructive mb-4\">\n              <AlertTriangle className=\"w-5 h-5 mr-2 inline\" />\n              Emergency Support\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <p className=\"font-semibold text-destructive mb-1\">Emergency Services</p>\n                <p className=\"text-lg font-bold text-destructive\">999</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"font-semibold text-destructive mb-1\">Samaritans</p>\n                <p className=\"text-lg font-bold text-destructive\">116 123</p>\n                <p className=\"text-xs text-destructive/80\">Free, 24/7</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"font-semibold text-destructive mb-1\">Crisis Text Line</p>\n                <p className=\"text-lg font-bold text-destructive\">Text SHOUT to 85258</p>\n                <p className=\"text-xs text-destructive/80\">Free, 24/7</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Resource Categories */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Self-Help Tools */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <Gavel className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-card-foreground\">Self-Help Tools</h3>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <Button \n                    variant=\"secondary\" \n                    className=\"w-full justify-start p-3 h-auto\"\n                    onClick={() => setActiveToolView('breathing')}\n                    data-testid=\"button-breathing-exercise\"\n                  >\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Breathing Exercises</p>\n                      <p className=\"text-sm text-muted-foreground\">5 interactive techniques with timer</p>\n                    </div>\n                  </Button>\n                  \n                  <Button \n                    variant=\"secondary\" \n                    className=\"w-full justify-start p-3 h-auto\"\n                    onClick={() => setActiveToolView('thought-record')}\n                    data-testid=\"button-thought-record\"\n                  >\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Thought Record</p>\n                      <p className=\"text-sm text-muted-foreground\">CBT-based thought challenging</p>\n                    </div>\n                  </Button>\n                  \n                  <Button \n                    variant=\"secondary\" \n                    className=\"w-full justify-start p-3 h-auto\"\n                    onClick={() => setActiveToolView('grounding')}\n                    data-testid=\"button-grounding-exercises\"\n                  >\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Grounding Exercises</p>\n                      <p className=\"text-sm text-muted-foreground\">5-4-3-2-1 & mindfulness tools</p>\n                    </div>\n                  </Button>\n                  \n                  <Button \n                    variant=\"secondary\" \n                    className=\"w-full justify-start p-3 h-auto\"\n                    onClick={() => setActiveToolView('mood-tracker')}\n                    data-testid=\"button-mood-tracker\"\n                  >\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Mood Tracker</p>\n                      <p className=\"text-sm text-muted-foreground\">Daily wellbeing & pattern insights</p>\n                    </div>\n                  </Button>\n                  \n                  <Button \n                    variant=\"secondary\" \n                    className=\"w-full justify-start p-3 h-auto\"\n                    onClick={() => setActiveToolView('relaxation')}\n                    data-testid=\"button-relaxation-tools\"\n                  >\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Relaxation Tools</p>\n                      <p className=\"text-sm text-muted-foreground\">Progressive muscle & visualization</p>\n                    </div>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Educational Content */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <GraduationCap className=\"w-8 h-8 text-accent\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-card-foreground\">Educational Content</h3>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <Button \n                    variant=\"secondary\" \n                    className=\"w-full justify-start p-3 h-auto\"\n                    onClick={() => setActiveToolView('anxiety-guide')}\n                    data-testid=\"button-understanding-anxiety\"\n                  >\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Understanding Anxiety</p>\n                      <p className=\"text-sm text-muted-foreground\">NHS-approved interactive guide with quizzes</p>\n                    </div>\n                  </Button>\n                  \n                  <Button \n                    variant=\"secondary\" \n                    className=\"w-full justify-start p-3 h-auto\"\n                    onClick={() => setActiveToolView('sleep-anxiety')}\n                    data-testid=\"button-sleep-anxiety\"\n                  >\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Sleep & Anxiety</p>\n                      <p className=\"text-sm text-muted-foreground\">Evidence-based tips with personal assessment</p>\n                    </div>\n                  </Button>\n                  \n                  <Button \n                    variant=\"secondary\" \n                    className=\"w-full justify-start p-3 h-auto\"\n                    onClick={() => setActiveToolView('lifestyle-guide')}\n                    data-testid=\"button-lifestyle-factors\"\n                  >\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Lifestyle Factors</p>\n                      <p className=\"text-sm text-muted-foreground\">Diet, exercise & wellbeing with action plan</p>\n                    </div>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Clinical Handoff */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"w-16 h-16 bg-secondary/50 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <FileText className=\"w-8 h-8 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-card-foreground\">Clinical Handoff</h3>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-accent/10 rounded-md\">\n                    <p className=\"text-sm text-accent font-medium mb-2\">\n                      <Check className=\"w-4 h-4 mr-2 inline\" />\n                      Report Ready\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Your progress data is ready for NHS handoff when your appointment becomes available.\n                    </p>\n                  </div>\n                  \n                  <Button \n                    className=\"w-full\"\n                    onClick={handleExportReport}\n                    data-testid=\"button-download-progress-report\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download Progress Report (PDF)\n                  </Button>\n                  \n                  <p className=\"text-xs text-muted-foreground text-center\">\n                    Report includes assessment scores, module completion, and clinical recommendations\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12774},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/ui/header\";\nimport { TabNavigation } from \"@/components/ui/tab-navigation\";\nimport { CrisisBanner } from \"@/components/ui/crisis-banner\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Download, Phone, MessageSquare, HelpCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst profileSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"), \n  email: z.string().email(\"Valid email is required\"),\n});\n\ninterface NotificationSettings {\n  weeklyCheckInReminders: boolean;\n  moduleReminders: boolean;\n}\n\ninterface PrivacySettings {\n  nhsDataSharing: boolean;\n}\n\nexport default function Settings() {\n  const mockUserId = \"user-1\";\n  const { toast } = useToast();\n  \n  const [notifications, setNotifications] = useState<NotificationSettings>({\n    weeklyCheckInReminders: true,\n    moduleReminders: true,\n  });\n  \n  const [privacy, setPrivacy] = useState<PrivacySettings>({\n    nhsDataSharing: true,\n  });\n\n  // Mock user data - in production this would come from API\n  const mockUser = {\n    id: mockUserId,\n    firstName: \"James\",\n    lastName: \"Smith\", \n    email: \"james.smith@example.com\",\n  };\n\n  const form = useForm({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: mockUser.firstName,\n      lastName: mockUser.lastName,\n      email: mockUser.email,\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PATCH\", `/api/users/${mockUserId}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile information has been saved successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const downloadDataMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/reports\", { userId: mockUserId });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Data Export Started\",\n        description: \"Your data export will be downloaded shortly.\",\n      });\n    },\n  });\n\n  const onProfileSubmit = (data: any) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handleNotificationToggle = (key: keyof NotificationSettings) => {\n    setNotifications(prev => ({\n      ...prev,\n      [key]: !prev[key],\n    }));\n    \n    toast({\n      title: \"Notification Settings Updated\",\n      description: `${key === 'weeklyCheckInReminders' ? 'Weekly check-in reminders' : 'Module reminders'} ${!notifications[key] ? 'enabled' : 'disabled'}.`,\n    });\n  };\n\n  const handlePrivacyToggle = (key: keyof PrivacySettings) => {\n    setPrivacy(prev => ({\n      ...prev,\n      [key]: !prev[key],\n    }));\n    \n    toast({\n      title: \"Privacy Settings Updated\", \n      description: \"Your data sharing preferences have been updated.\",\n    });\n  };\n\n  const handleDownloadData = () => {\n    downloadDataMutation.mutate();\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header user={mockUser} />\n      <CrisisBanner />\n      <TabNavigation />\n      \n      <main className=\"flex-1 bg-background\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Settings</h2>\n            <p className=\"text-muted-foreground\">Manage your account, notifications, and privacy preferences</p>\n          </div>\n\n          <div className=\"space-y-6\">\n            {/* Profile Settings */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Profile Information</h3>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onProfileSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-first-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-last-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email Address</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" {...field} data-testid=\"input-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <Button \n                      type=\"submit\"\n                      disabled={updateProfileMutation.isPending}\n                      data-testid=\"button-save-profile\"\n                    >\n                      {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n\n            {/* Notification Settings */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Notifications</h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium text-card-foreground\">Weekly Check-in Reminders</p>\n                      <p className=\"text-sm text-muted-foreground\">Get reminded when it's time for your weekly assessment</p>\n                    </div>\n                    <Switch\n                      checked={notifications.weeklyCheckInReminders}\n                      onCheckedChange={() => handleNotificationToggle('weeklyCheckInReminders')}\n                      data-testid=\"switch-checkin-reminders\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium text-card-foreground\">Module Reminders</p>\n                      <p className=\"text-sm text-muted-foreground\">Gentle nudges to continue your anxiety support track</p>\n                    </div>\n                    <Switch\n                      checked={notifications.moduleReminders}\n                      onCheckedChange={() => handleNotificationToggle('moduleReminders')}\n                      data-testid=\"switch-module-reminders\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Privacy & Data */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Privacy & Data</h3>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium text-card-foreground mb-2\">Data Sharing with NHS</h4>\n                    <p className=\"text-sm text-muted-foreground mb-3\">Allow sharing of progress data when transitioning to NHS services</p>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id=\"nhs-sharing\"\n                        checked={privacy.nhsDataSharing}\n                        onCheckedChange={() => handlePrivacyToggle('nhsDataSharing')}\n                        data-testid=\"checkbox-nhs-sharing\"\n                      />\n                      <label htmlFor=\"nhs-sharing\" className=\"text-sm text-card-foreground\">\n                        Enable NHS data sharing\n                      </label>\n                    </div>\n                  </div>\n                  \n                  <div className=\"pt-4 border-t border-border\">\n                    <Button \n                      variant=\"ghost\"\n                      onClick={handleDownloadData}\n                      disabled={downloadDataMutation.isPending}\n                      data-testid=\"button-download-data\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      {downloadDataMutation.isPending ? \"Preparing Download...\" : \"Download My Data\"}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Support */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Support</h3>\n                \n                <div className=\"space-y-3\">\n                  <Dialog>\n                    <DialogTrigger asChild>\n                      <Button \n                        variant=\"secondary\" \n                        className=\"w-full justify-start p-4 h-auto\"\n                        data-testid=\"button-contact-support\"\n                      >\n                        <Phone className=\"w-5 h-5 mr-3\" />\n                        <div className=\"text-left\">\n                          <p className=\"font-medium\">Contact Support Team</p>\n                          <p className=\"text-sm text-muted-foreground\">Get help with technical issues</p>\n                        </div>\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Contact Support</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div className=\"bg-secondary p-4 rounded-md\">\n                          <h4 className=\"font-medium mb-2\">Support Hours</h4>\n                          <p className=\"text-sm text-muted-foreground\">Monday - Friday: 9:00 AM - 5:00 PM</p>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm\">\n                            <strong>Email:</strong> support@waitlistcompanion.nhs.uk\n                          </p>\n                          <p className=\"text-sm\">\n                            <strong>Phone:</strong> 0300 123 1234\n                          </p>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                  \n                  <Button \n                    variant=\"secondary\" \n                    className=\"w-full justify-start p-4 h-auto\"\n                    data-testid=\"button-faq\"\n                  >\n                    <HelpCircle className=\"w-5 h-5 mr-3\" />\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Frequently Asked Questions</p>\n                      <p className=\"text-sm text-muted-foreground\">Common questions and answers</p>\n                    </div>\n                  </Button>\n                  \n                  <Dialog>\n                    <DialogTrigger asChild>\n                      <Button \n                        variant=\"secondary\" \n                        className=\"w-full justify-start p-4 h-auto\"\n                        data-testid=\"button-feedback\"\n                      >\n                        <MessageSquare className=\"w-5 h-5 mr-3\" />\n                        <div className=\"text-left\">\n                          <p className=\"font-medium\">Provide Feedback</p>\n                          <p className=\"text-sm text-muted-foreground\">Help us improve the app</p>\n                        </div>\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Share Your Feedback</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          Your feedback helps us improve Waitlist Companion™ for everyone. Please share your thoughts, suggestions, or concerns.\n                        </p>\n                        <div className=\"bg-secondary p-4 rounded-md\">\n                          <p className=\"text-sm\">\n                            <strong>Feedback Email:</strong> feedback@waitlistcompanion.nhs.uk\n                          </p>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-6\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between\">\n            <div className=\"flex items-center space-x-6 mb-4 md:mb-0\">\n              <p className=\"text-sm text-muted-foreground\">© 2024 Waitlist Companion™</p>\n              <a href=\"#\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                Privacy Policy\n              </a>\n              <a href=\"#\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                Terms of Service\n              </a>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <p className=\"text-xs text-muted-foreground\">Powered by rethink.org</p>\n              <div className=\"text-xs text-muted-foreground\">\n                <Download className=\"inline w-3 h-3 mr-1\" />\n                NHS Data Compliant\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":15832},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/crisis-banner.tsx":{"content":"import { AlertTriangle, Phone } from \"lucide-react\";\nimport { Button } from \"./button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"./dialog\";\n\nexport function CrisisBanner() {\n  return (\n    <div className=\"crisis-banner text-center py-3 text-destructive-foreground\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <p className=\"text-sm font-medium\">\n          <AlertTriangle className=\"inline w-4 h-4 mr-2\" />\n          If you're experiencing a mental health crisis, call 999 or contact Samaritans: 116 123 (free, 24/7)\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport function CrisisButton() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button \n          className=\"crisis-banner text-destructive-foreground px-4 py-2 font-medium text-sm hover:opacity-90 transition-opacity\"\n          data-testid=\"button-crisis-support\"\n        >\n          <Phone className=\"w-4 h-4 mr-2\" />\n          Crisis Support\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center text-destructive\">\n            <AlertTriangle className=\"w-5 h-5 mr-2\" />\n            Emergency Support\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"bg-destructive/10 p-4 rounded-md\">\n            <h3 className=\"font-semibold text-destructive mb-2\">Immediate Help</h3>\n            <div className=\"space-y-2\">\n              <p className=\"text-sm\">\n                <strong>Emergency Services:</strong> 999\n              </p>\n              <p className=\"text-sm\">\n                <strong>Samaritans:</strong> 116 123 (Free, 24/7)\n              </p>\n              <p className=\"text-sm\">\n                <strong>Crisis Text Line:</strong> Text SHOUT to 85258\n              </p>\n            </div>\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            <p>If you are having thoughts of self-harm or suicide, please reach out for immediate support. You are not alone.</p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2170},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/header.tsx":{"content":"import { Heart, ChevronDown, User } from \"lucide-react\";\nimport { CrisisButton } from \"./crisis-banner\";\nimport { Button } from \"./button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"./dropdown-menu\";\n\ninterface HeaderProps {\n  user?: {\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n}\n\nexport function Header({ user }: HeaderProps) {\n  const initials = user ? `${user.firstName[0]}${user.lastName[0]}` : \"U\";\n\n  return (\n    <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Heart className=\"text-primary-foreground w-4 h-4\" />\n            </div>\n            <div>\n              <h1 className=\"font-semibold text-lg text-foreground\">Waitlist Companion™</h1>\n              <p className=\"text-xs text-muted-foreground\">Interim Care Support</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <CrisisButton />\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  className=\"flex items-center space-x-2 text-muted-foreground hover:text-foreground\"\n                  data-testid=\"button-user-menu\"\n                >\n                  <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                    <span className=\"text-sm font-medium\">{initials}</span>\n                  </div>\n                  <ChevronDown className=\"w-4 h-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem>\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Profile Settings\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2229},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress-ring.tsx":{"content":"interface ProgressRingProps {\n  percentage: number;\n  size?: number;\n  strokeWidth?: number;\n  className?: string;\n}\n\nexport function ProgressRing({ \n  percentage, \n  size = 128, \n  strokeWidth = 4,\n  className = \"\"\n}: ProgressRingProps) {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDashoffset = circumference - (percentage / 100) * circumference;\n\n  return (\n    <div className={`relative ${className}`} style={{ width: size, height: size }}>\n      <svg \n        className=\"progress-ring\" \n        width={size} \n        height={size}\n        viewBox={`0 0 ${size} ${size}`}\n      >\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"hsl(var(--border))\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n        />\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"hsl(var(--primary))\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeDasharray={circumference}\n          strokeDashoffset={strokeDashoffset}\n          className=\"transition-all duration-500 ease-in-out\"\n        />\n      </svg>\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <span className=\"text-2xl font-bold text-primary\">{percentage}%</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1375},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/tab-navigation.tsx":{"content":"import { Activity, Brain, ClipboardCheck, BriefcaseMedical, Settings } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nconst tabs = [\n  { id: \"dashboard\", label: \"Dashboard\", icon: Activity, path: \"/\" },\n  { id: \"anxiety-track\", label: \"Anxiety Support\", icon: Brain, path: \"/anxiety-track\" },\n  { id: \"check-ins\", label: \"Check-ins\", icon: ClipboardCheck, path: \"/check-ins\" },\n  { id: \"resources\", label: \"Resources\", icon: BriefcaseMedical, path: \"/resources\" },\n  { id: \"settings\", label: \"Settings\", icon: Settings, path: \"/settings\" },\n];\n\nexport function TabNavigation() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"bg-card border-b border-border\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <nav className=\"flex space-x-8 overflow-x-auto py-4\" aria-label=\"Main navigation\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            const isActive = location === tab.path;\n            \n            return (\n              <Link\n                key={tab.id}\n                href={tab.path}\n                className={cn(\n                  \"whitespace-nowrap pb-2 px-1 border-b-2 font-medium text-sm transition-colors\",\n                  isActive \n                    ? \"border-primary text-primary\" \n                    : \"border-transparent text-muted-foreground hover:text-foreground\"\n                )}\n                data-testid={`tab-${tab.id}`}\n              >\n                <Icon className=\"inline w-4 h-4 mr-2\" />\n                {tab.label}\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1680},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/AnxietyGuideComprehensive.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  BookOpen, \n  Brain, \n  Shield, \n  CheckCircle, \n  ArrowRight, \n  Lightbulb,\n  Heart,\n  Target,\n  FileText,\n  PenTool,\n  Star\n} from \"lucide-react\";\n\ninterface QuizAnswer {\n  id: string;\n  text: string;\n  correct: boolean;\n  explanation: string;\n}\n\ninterface WorksheetEntry {\n  situation: string;\n  physicalSymptoms: string[];\n  thoughts: string;\n  emotions: string;\n  behaviors: string;\n  copingStrategies: string[];\n  notes: string;\n}\n\nexport function AnxietyGuideComprehensive() {\n  const [currentSection, setCurrentSection] = useState(0);\n  const [completedSections, setCompletedSections] = useState<number[]>([]);\n  const [quizAnswers, setQuizAnswers] = useState<Record<string, string>>({});\n  const [showQuizResults, setShowQuizResults] = useState(false);\n  const [worksheetEntries, setWorksheetEntries] = useState<WorksheetEntry[]>([]);\n  const [personalNotes, setPersonalNotes] = useState<Record<string, string>>({});\n  const [copingToolsRating, setCopingToolsRating] = useState<Record<string, number>>({});\n\n  const sections = [\n    {\n      id: 0,\n      title: \"Understanding Anxiety\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-blue-50 p-6 rounded-lg border-l-4 border-blue-400\">\n            <h3 className=\"text-xl font-semibold text-blue-800 mb-3\">What is Anxiety?</h3>\n            <p className=\"text-blue-700 mb-4\">\n              Anxiety is a natural response to stress or danger. It's part of your body's \"fight-flight-freeze\" \n              system that helped our ancestors survive. However, when anxiety becomes persistent, excessive, \n              or interferes with daily life, it may indicate an anxiety disorder.\n            </p>\n            <div className=\"bg-white p-4 rounded border\">\n              <h4 className=\"font-semibold text-blue-800 mb-2\">According to NICE Guidelines:</h4>\n              <p className=\"text-blue-700 text-sm\">\n                \"Anxiety disorders are among the most common mental health problems, affecting up to 1 in 6 people. \n                They are highly treatable with psychological interventions, particularly Cognitive Behavioural Therapy (CBT).\"\n              </p>\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card className=\"bg-green-50 border-green-200\">\n              <CardHeader>\n                <CardTitle className=\"text-green-800 flex items-center gap-2\">\n                  <Shield className=\"w-5 h-5\" />\n                  Normal Anxiety\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-green-700\">\n                <ul className=\"space-y-2\">\n                  <li>• Temporary response to specific stressors</li>\n                  <li>• Proportionate to the situation</li>\n                  <li>• Motivates helpful action</li>\n                  <li>• Resolves when threat passes</li>\n                  <li>• Doesn't significantly impair functioning</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-amber-50 border-amber-200\">\n              <CardHeader>\n                <CardTitle className=\"text-amber-800 flex items-center gap-2\">\n                  <Heart className=\"w-5 h-5\" />\n                  Anxiety Disorders\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-amber-700\">\n                <ul className=\"space-y-2\">\n                  <li>• Persistent and excessive worry</li>\n                  <li>• Out of proportion to actual threat</li>\n                  <li>• Interferes with daily activities</li>\n                  <li>• Lasts for weeks or months</li>\n                  <li>• Causes significant distress</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"bg-purple-50 p-6 rounded-lg\">\n            <h3 className=\"text-xl font-semibold text-purple-800 mb-4 flex items-center gap-2\">\n              <Brain className=\"w-6 h-6\" />\n              The Anxiety Cycle (CBT Model)\n            </h3>\n            <div className=\"grid md:grid-cols-4 gap-4\">\n              <div className=\"text-center p-4 bg-white rounded border\">\n                <div className=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-red-600 font-bold\">1</span>\n                </div>\n                <h4 className=\"font-semibold text-purple-800 mb-1\">Trigger</h4>\n                <p className=\"text-sm text-purple-600\">Situation or thought</p>\n              </div>\n              <div className=\"text-center p-4 bg-white rounded border\">\n                <div className=\"w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-orange-600 font-bold\">2</span>\n                </div>\n                <h4 className=\"font-semibold text-purple-800 mb-1\">Thoughts</h4>\n                <p className=\"text-sm text-purple-600\">Negative predictions</p>\n              </div>\n              <div className=\"text-center p-4 bg-white rounded border\">\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-yellow-600 font-bold\">3</span>\n                </div>\n                <h4 className=\"font-semibold text-purple-800 mb-1\">Physical</h4>\n                <p className=\"text-sm text-purple-600\">Body sensations</p>\n              </div>\n              <div className=\"text-center p-4 bg-white rounded border\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-blue-600 font-bold\">4</span>\n                </div>\n                <h4 className=\"font-semibent text-purple-800 mb-1\">Behavior</h4>\n                <p className=\"text-sm text-purple-600\">Actions taken</p>\n              </div>\n            </div>\n            <div className=\"mt-4 p-4 bg-white rounded border\">\n              <p className=\"text-purple-700 text-center\">\n                <strong>Breaking the cycle:</strong> Changing any part of this cycle can reduce anxiety\n              </p>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Personal Reflection</h3>\n            <Textarea\n              placeholder=\"Describe a recent situation where you felt anxious. What triggered it? How did your body feel? What thoughts went through your mind?\"\n              value={personalNotes['section0'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section0: e.target.value}))}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 1,\n      title: \"Recognizing Symptoms\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-indigo-50 p-6 rounded-lg border-l-4 border-indigo-400\">\n            <h3 className=\"text-xl font-semibold text-indigo-800 mb-3\">Anxiety Symptoms Assessment</h3>\n            <p className=\"text-indigo-700 mb-4\">\n              Understanding your specific anxiety symptoms helps you recognize patterns and develop targeted coping strategies.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <Card className=\"bg-red-50 border-red-200\">\n              <CardHeader>\n                <CardTitle className=\"text-red-800\">Physical Symptoms</CardTitle>\n                <p className=\"text-sm text-red-600\">How anxiety affects your body</p>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {[\n                  'Rapid or pounding heartbeat',\n                  'Sweating or hot flashes',\n                  'Trembling or shaking',\n                  'Shortness of breath',\n                  'Chest tightness',\n                  'Nausea or stomach upset',\n                  'Dizziness or lightheadedness',\n                  'Muscle tension',\n                  'Fatigue or weakness',\n                  'Sleep disturbances'\n                ].map((symptom, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <Checkbox id={`physical-${index}`} />\n                    <Label htmlFor={`physical-${index}`} className=\"text-sm text-red-700\">{symptom}</Label>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-purple-50 border-purple-200\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-800\">Emotional Symptoms</CardTitle>\n                <p className=\"text-sm text-purple-600\">How anxiety affects your feelings</p>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {[\n                  'Excessive worry or fear',\n                  'Feeling on edge or restless',\n                  'Irritability or mood swings',\n                  'Feeling overwhelmed',\n                  'Sense of impending doom',\n                  'Difficulty concentrating',\n                  'Fear of losing control',\n                  'Feeling detached or unreal',\n                  'Low mood or sadness',\n                  'Guilt or self-blame'\n                ].map((symptom, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <Checkbox id={`emotional-${index}`} />\n                    <Label htmlFor={`emotional-${index}`} className=\"text-sm text-purple-700\">{symptom}</Label>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-blue-50 border-blue-200\">\n              <CardHeader>\n                <CardTitle className=\"text-blue-800\">Behavioral Changes</CardTitle>\n                <p className=\"text-sm text-blue-600\">How anxiety affects your actions</p>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {[\n                  'Avoiding certain situations',\n                  'Procrastination or delays',\n                  'Seeking frequent reassurance',\n                  'Checking behaviors',\n                  'Social withdrawal',\n                  'Increased use of alcohol/substances',\n                  'Restlessness or pacing',\n                  'Difficulty making decisions',\n                  'Changes in eating habits',\n                  'Increased phone/internet use'\n                ].map((symptom, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <Checkbox id={`behavioral-${index}`} />\n                    <Label htmlFor={`behavioral-${index}`} className=\"text-sm text-blue-700\">{symptom}</Label>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card className=\"bg-yellow-50 border-yellow-200\">\n            <CardHeader>\n              <CardTitle className=\"text-yellow-800 flex items-center gap-2\">\n                <Target className=\"w-5 h-5\" />\n                Symptom Tracking Worksheet\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-yellow-700 text-sm\">\n                Use this worksheet to track your anxiety symptoms over the next week. This will help identify patterns and triggers.\n              </p>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"most-common\" className=\"text-yellow-800 font-medium\">Most Common Physical Symptoms:</Label>\n                  <Textarea \n                    id=\"most-common\"\n                    placeholder=\"List your 3-5 most frequent physical symptoms...\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"triggers\" className=\"text-yellow-800 font-medium\">Common Triggers:</Label>\n                  <Textarea \n                    id=\"triggers\"\n                    placeholder=\"Situations, thoughts, or events that typically trigger your anxiety...\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Personal Symptom Notes</h3>\n            <Textarea\n              placeholder=\"Reflect on your anxiety symptoms. Which ones do you experience most often? Are there any patterns you've noticed?\"\n              value={personalNotes['section1'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section1: e.target.value}))}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 2,\n      title: \"Coping Strategies & Techniques\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-green-50 p-6 rounded-lg border-l-4 border-green-400\">\n            <h3 className=\"text-xl font-semibold text-green-800 mb-3\">Evidence-Based Coping Strategies</h3>\n            <p className=\"text-green-700 mb-4\">\n              These techniques are recommended by NICE and have been proven effective in managing anxiety symptoms.\n            </p>\n          </div>\n\n          <div className=\"space-y-8\">\n            {/* Immediate Coping Strategies */}\n            <Card className=\"bg-emerald-50 border-emerald-200\">\n              <CardHeader>\n                <CardTitle className=\"text-emerald-800 flex items-center gap-2\">\n                  <Shield className=\"w-6 h-6\" />\n                  Immediate Relief Techniques (In-the-Moment)\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border\">\n                    <h4 className=\"font-semibold text-emerald-800 mb-3\">Box Breathing (4-4-4-4)</h4>\n                    <ol className=\"text-emerald-700 space-y-1 text-sm mb-3\">\n                      <li>1. Breathe in for 4 seconds</li>\n                      <li>2. Hold for 4 seconds</li>\n                      <li>3. Breathe out for 4 seconds</li>\n                      <li>4. Hold empty for 4 seconds</li>\n                      <li>5. Repeat 4-8 times</li>\n                    </ol>\n                    <div className=\"flex items-center space-x-2\">\n                      <Label className=\"text-emerald-700 text-sm\">Rate effectiveness (1-5):</Label>\n                      <div className=\"flex space-x-1\">\n                        {[1,2,3,4,5].map(num => (\n                          <button\n                            key={num}\n                            onClick={() => setCopingToolsRating(prev => ({...prev, boxBreathing: num}))}\n                            className={`w-6 h-6 rounded ${copingToolsRating.boxBreathing === num ? 'bg-emerald-500 text-white' : 'bg-gray-200'}`}\n                          >\n                            {num}\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"p-4 bg-white rounded border\">\n                    <h4 className=\"font-semibold text-emerald-800 mb-3\">5-4-3-2-1 Grounding</h4>\n                    <ul className=\"text-emerald-700 space-y-1 text-sm mb-3\">\n                      <li>• 5 things you can <strong>see</strong></li>\n                      <li>• 4 things you can <strong>touch</strong></li>\n                      <li>• 3 things you can <strong>hear</strong></li>\n                      <li>• 2 things you can <strong>smell</strong></li>\n                      <li>• 1 thing you can <strong>taste</strong></li>\n                    </ul>\n                    <div className=\"flex items-center space-x-2\">\n                      <Label className=\"text-emerald-700 text-sm\">Rate effectiveness (1-5):</Label>\n                      <div className=\"flex space-x-1\">\n                        {[1,2,3,4,5].map(num => (\n                          <button\n                            key={num}\n                            onClick={() => setCopingToolsRating(prev => ({...prev, grounding: num}))}\n                            className={`w-6 h-6 rounded ${copingToolsRating.grounding === num ? 'bg-emerald-500 text-white' : 'bg-gray-200'}`}\n                          >\n                            {num}\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border\">\n                    <h4 className=\"font-semibold text-emerald-800 mb-3\">Progressive Muscle Relaxation</h4>\n                    <ol className=\"text-emerald-700 space-y-1 text-sm mb-3\">\n                      <li>1. Tense feet muscles for 5 seconds</li>\n                      <li>2. Release and notice relaxation</li>\n                      <li>3. Move up to calves, thighs, etc.</li>\n                      <li>4. Work through whole body</li>\n                      <li>5. End with whole-body scan</li>\n                    </ol>\n                    <div className=\"flex items-center space-x-2\">\n                      <Label className=\"text-emerald-700 text-sm\">Rate effectiveness (1-5):</Label>\n                      <div className=\"flex space-x-1\">\n                        {[1,2,3,4,5].map(num => (\n                          <button\n                            key={num}\n                            onClick={() => setCopingToolsRating(prev => ({...prev, pmr: num}))}\n                            className={`w-6 h-6 rounded ${copingToolsRating.pmr === num ? 'bg-emerald-500 text-white' : 'bg-gray-200'}`}\n                          >\n                            {num}\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"p-4 bg-white rounded border\">\n                    <h4 className=\"font-semibold text-emerald-800 mb-3\">Thought Challenging</h4>\n                    <ul className=\"text-emerald-700 space-y-1 text-sm mb-3\">\n                      <li>• Is this thought realistic?</li>\n                      <li>• What evidence supports/contradicts it?</li>\n                      <li>• What would I tell a friend?</li>\n                      <li>• What's the most likely outcome?</li>\n                      <li>• How will this matter in 5 years?</li>\n                    </ul>\n                    <div className=\"flex items-center space-x-2\">\n                      <Label className=\"text-emerald-700 text-sm\">Rate effectiveness (1-5):</Label>\n                      <div className=\"flex space-x-1\">\n                        {[1,2,3,4,5].map(num => (\n                          <button\n                            key={num}\n                            onClick={() => setCopingToolsRating(prev => ({...prev, thoughtChallenge: num}))}\n                            className={`w-6 h-6 rounded ${copingToolsRating.thoughtChallenge === num ? 'bg-emerald-500 text-white' : 'bg-gray-200'}`}\n                          >\n                            {num}\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Long-term Strategies */}\n            <Card className=\"bg-blue-50 border-blue-200\">\n              <CardHeader>\n                <CardTitle className=\"text-blue-800 flex items-center gap-2\">\n                  <Target className=\"w-6 h-6\" />\n                  Long-term Management Strategies\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-semibold text-blue-800\">Lifestyle Factors</h4>\n                    <ul className=\"text-blue-700 space-y-2\">\n                      <li>• Regular exercise (even 10 minutes daily)</li>\n                      <li>• Consistent sleep schedule (7-9 hours)</li>\n                      <li>• Limit caffeine (especially after 2 PM)</li>\n                      <li>• Reduce alcohol consumption</li>\n                      <li>• Practice mindfulness or meditation</li>\n                      <li>• Maintain social connections</li>\n                    </ul>\n                  </div>\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-semibold text-blue-800\">Cognitive Strategies</h4>\n                    <ul className=\"text-blue-700 space-y-2\">\n                      <li>• Challenge negative thought patterns</li>\n                      <li>• Practice acceptance of uncertainty</li>\n                      <li>• Set realistic, achievable goals</li>\n                      <li>• Focus on problem-solving, not worry</li>\n                      <li>• Develop a worry time (15 min daily)</li>\n                      <li>• Keep a thought diary</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Anxiety Management Plan */}\n            <Card className=\"bg-purple-50 border-purple-200\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-800 flex items-center gap-2\">\n                  <FileText className=\"w-6 h-6\" />\n                  Personal Anxiety Management Plan\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-purple-800 font-medium\">My Most Effective Immediate Strategies:</Label>\n                    <Textarea \n                      placeholder=\"Based on your ratings above, list your top 3 immediate coping techniques...\"\n                      className=\"mt-1 min-h-[80px]\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-purple-800 font-medium\">My Long-term Management Goals:</Label>\n                    <Textarea \n                      placeholder=\"What lifestyle changes will you commit to? Set 2-3 realistic goals...\"\n                      className=\"mt-1 min-h-[80px]\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-purple-800 font-medium\">Early Warning Signs to Watch For:</Label>\n                  <Textarea \n                    placeholder=\"List physical, emotional, or behavioral signs that indicate your anxiety is increasing...\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Strategy Reflection</h3>\n            <Textarea\n              placeholder=\"Which coping strategies resonate most with you? What barriers might prevent you from using them?\"\n              value={personalNotes['section2'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section2: e.target.value}))}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 3,\n      title: \"Knowledge Check & Action Plan\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-indigo-50 p-6 rounded-lg border-l-4 border-indigo-400\">\n            <h3 className=\"text-xl font-semibold text-indigo-800 mb-3\">Knowledge Check Quiz</h3>\n            <p className=\"text-indigo-700\">\n              Test your understanding of anxiety management concepts. This helps reinforce key learning points.\n            </p>\n          </div>\n\n          <Card className=\"bg-white border-2\">\n            <CardContent className=\"p-6 space-y-6\">\n              {/* Quiz Questions */}\n              <div className=\"space-y-6\">\n                <div>\n                  <h4 className=\"font-semibold mb-3\">1. Which of the following is a key component of the anxiety cycle?</h4>\n                  <RadioGroup value={quizAnswers['q1']} onValueChange={(value) => setQuizAnswers(prev => ({...prev, q1: value}))}>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"a\" id=\"q1a\" />\n                      <Label htmlFor=\"q1a\">Triggers → Thoughts → Physical sensations → Behaviors</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"b\" id=\"q1b\" />\n                      <Label htmlFor=\"q1b\">Sleep → Food → Exercise → Medication</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"c\" id=\"q1c\" />\n                      <Label htmlFor=\"q1c\">Work → Family → Friends → Hobbies</Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n\n                <div>\n                  <h4 className=\"font-semibold mb-3\">2. What is the recommended breathing technique for immediate anxiety relief?</h4>\n                  <RadioGroup value={quizAnswers['q2']} onValueChange={(value) => setQuizAnswers(prev => ({...prev, q2: value}))}>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"a\" id=\"q2a\" />\n                      <Label htmlFor=\"q2a\">Breathe as fast as possible</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"b\" id=\"q2b\" />\n                      <Label htmlFor=\"q2b\">Hold your breath for as long as possible</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"c\" id=\"q2c\" />\n                      <Label htmlFor=\"q2c\">Slow, controlled breathing (e.g., 4-4-4-4 pattern)</Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n\n                <div>\n                  <h4 className=\"font-semibold mb-3\">3. Which lifestyle factor is most important for long-term anxiety management?</h4>\n                  <RadioGroup value={quizAnswers['q3']} onValueChange={(value) => setQuizAnswers(prev => ({...prev, q3: value}))}>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"a\" id=\"q3a\" />\n                      <Label htmlFor=\"q3a\">Avoiding all stressful situations</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"b\" id=\"q3b\" />\n                      <Label htmlFor=\"q3b\">Regular exercise, good sleep, and stress management</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"c\" id=\"q3c\" />\n                      <Label htmlFor=\"q3c\">Taking medication only</Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n              </div>\n\n              <Button \n                onClick={() => setShowQuizResults(true)} \n                className=\"w-full\"\n                disabled={Object.keys(quizAnswers).length < 3}\n              >\n                Check Answers\n              </Button>\n\n              {showQuizResults && (\n                <div className=\"space-y-4 p-4 bg-green-50 rounded border\">\n                  <h4 className=\"font-semibold text-green-800\">Quiz Results:</h4>\n                  <div className=\"space-y-3\">\n                    <div className={`p-3 rounded ${quizAnswers.q1 === 'a' ? 'bg-green-100 border-green-300' : 'bg-red-100 border-red-300'} border`}>\n                      <p className=\"font-medium\">Question 1: {quizAnswers.q1 === 'a' ? '✓ Correct' : '✗ Incorrect'}</p>\n                      <p className=\"text-sm\">The anxiety cycle involves: Triggers → Thoughts → Physical sensations → Behaviors. Each component influences the others.</p>\n                    </div>\n                    <div className={`p-3 rounded ${quizAnswers.q2 === 'c' ? 'bg-green-100 border-green-300' : 'bg-red-100 border-red-300'} border`}>\n                      <p className=\"font-medium\">Question 2: {quizAnswers.q2 === 'c' ? '✓ Correct' : '✗ Incorrect'}</p>\n                      <p className=\"text-sm\">Slow, controlled breathing activates the parasympathetic nervous system, reducing anxiety symptoms.</p>\n                    </div>\n                    <div className={`p-3 rounded ${quizAnswers.q3 === 'b' ? 'bg-green-100 border-green-300' : 'bg-red-100 border-red-300'} border`}>\n                      <p className=\"font-medium\">Question 3: {quizAnswers.q3 === 'b' ? '✓ Correct' : '✗ Incorrect'}</p>\n                      <p className=\"text-sm\">A holistic approach including exercise, sleep, and stress management provides the best long-term results.</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Action Plan */}\n          <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-200\">\n            <CardHeader>\n              <CardTitle className=\"text-green-800 flex items-center gap-2\">\n                <Star className=\"w-6 h-6\" />\n                Your Personal Anxiety Management Action Plan\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-green-800 font-semibold\">This Week's Goals (Choose 2-3):</Label>\n                  <div className=\"space-y-2 mt-2\">\n                    {[\n                      'Practice box breathing daily for 5 minutes',\n                      'Go for a 10-minute walk each day',\n                      'Use the 5-4-3-2-1 technique when anxious',\n                      'Keep a worry diary for 15 minutes daily',\n                      'Get 7-8 hours of sleep each night',\n                      'Limit caffeine after 2 PM'\n                    ].map((goal, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox id={`goal-${index}`} />\n                        <Label htmlFor={`goal-${index}`} className=\"text-green-700 text-sm\">{goal}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-green-800 font-semibold\">Support Resources:</Label>\n                  <div className=\"space-y-2 mt-2 text-sm text-green-700\">\n                    <div className=\"p-3 bg-white rounded border\">\n                      <p className=\"font-medium\">NHS Self-Help Resources</p>\n                      <p>Every Mind Matters: nhs.uk/every-mind-matters</p>\n                    </div>\n                    <div className=\"p-3 bg-white rounded border\">\n                      <p className=\"font-medium\">Crisis Support</p>\n                      <p>Samaritans: 116 123 (free, 24/7)</p>\n                    </div>\n                    <div className=\"p-3 bg-white rounded border\">\n                      <p className=\"font-medium\">Your GP</p>\n                      <p>For referral to NHS psychological therapies</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <Label className=\"text-green-800 font-semibold\">Additional Notes & Commitments:</Label>\n                <Textarea \n                  placeholder=\"What specific steps will you take this week? How will you remember to practice these techniques?\"\n                  className=\"mt-2\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )\n    }\n  ];\n\n  const markSectionComplete = (sectionId: number) => {\n    if (!completedSections.includes(sectionId)) {\n      setCompletedSections([...completedSections, sectionId]);\n    }\n  };\n\n  const progressPercentage = Math.round((completedSections.length / sections.length) * 100);\n\n  return (\n    <div className=\"max-w-5xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-blue-600 to-purple-700 text-white\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center gap-3 text-3xl\">\n            <Brain className=\"w-10 h-10\" />\n            Understanding Anxiety\n          </CardTitle>\n          <p className=\"text-blue-100 text-lg\">\n            Evidence-based education following NICE guidelines for anxiety management\n          </p>\n          <Badge variant=\"secondary\" className=\"bg-white/20 text-white w-fit mx-auto\">\n            Clinical Content • Interactive Worksheets • Personal Action Plan\n          </Badge>\n        </CardHeader>\n      </Card>\n\n      {/* Progress */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"font-semibold flex items-center gap-2\">\n              <Target className=\"w-5 h-5\" />\n              Learning Progress\n            </h3>\n            <Badge variant=\"outline\">{completedSections.length}/{sections.length} sections completed</Badge>\n          </div>\n          <Progress value={progressPercentage} className=\"mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">{progressPercentage}% complete • Estimated time: 25-30 minutes</p>\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"flex flex-wrap gap-2\">\n        {sections.map((section) => (\n          <Button\n            key={section.id}\n            variant={currentSection === section.id ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setCurrentSection(section.id)}\n            className=\"flex items-center gap-2\"\n          >\n            {completedSections.includes(section.id) && <CheckCircle className=\"w-4 h-4\" />}\n            {section.title}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"w-6 h-6\" />\n            {sections[currentSection].title}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {sections[currentSection].content}\n          \n          <div className=\"flex justify-between pt-6 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentSection(Math.max(0, currentSection - 1))}\n              disabled={currentSection === 0}\n            >\n              Previous Section\n            </Button>\n            \n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => markSectionComplete(currentSection)}\n                disabled={completedSections.includes(currentSection)}\n              >\n                {completedSections.includes(currentSection) ? (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Section Complete\n                  </>\n                ) : (\n                  <>\n                    <PenTool className=\"w-4 h-4 mr-2\" />\n                    Mark Complete\n                  </>\n                )}\n              </Button>\n              \n              <Button\n                onClick={() => setCurrentSection(Math.min(sections.length - 1, currentSection + 1))}\n                disabled={currentSection === sections.length - 1}\n              >\n                Next Section\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Completion Certificate */}\n      {completedSections.length === sections.length && (\n        <Card className=\"bg-gradient-to-r from-green-50 to-emerald-50 border-2 border-green-300\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-10 h-10 text-white\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-green-800 mb-3\">\n              🎉 Congratulations! You've completed the Understanding Anxiety guide.\n            </h3>\n            <p className=\"text-green-700 text-lg mb-4\">\n              You now have evidence-based knowledge and practical tools to manage your anxiety effectively.\n            </p>\n            <div className=\"bg-white p-4 rounded border border-green-200 text-left\">\n              <h4 className=\"font-semibold text-green-800 mb-2\">What You've Learned:</h4>\n              <ul className=\"text-green-700 space-y-1 text-sm\">\n                <li>✓ The anxiety cycle and how it maintains anxiety symptoms</li>\n                <li>✓ How to recognize your personal anxiety symptoms and triggers</li>\n                <li>✓ Evidence-based immediate coping techniques</li>\n                <li>✓ Long-term management strategies following NICE guidelines</li>\n                <li>✓ Your personalized anxiety management action plan</li>\n              </ul>\n            </div>\n            <p className=\"text-green-600 text-sm mt-4\">\n              Remember: Recovery is a process. Be patient with yourself and practice these techniques regularly.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":38742},"client/src/components/AnxietyGuideSimple.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BookOpen, Brain, Shield, CheckCircle, ArrowRight } from \"lucide-react\";\n\nexport function AnxietyGuideSimple() {\n  const [currentSection, setCurrentSection] = useState(0);\n  const [completedSections, setCompletedSections] = useState<number[]>([]);\n\n  const sections = [\n    {\n      id: 0,\n      title: \"What is Anxiety?\",\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-lg\">\n            Anxiety is your body's natural response to stress or perceived danger. It's completely normal and can actually be helpful in small doses.\n          </p>\n          <div className=\"bg-blue-50 p-4 rounded-lg border-l-4 border-blue-400\">\n            <h4 className=\"font-semibold text-blue-800 mb-2\">Key Point</h4>\n            <p className=\"text-blue-700\">\n              Anxiety becomes a problem when it's persistent, excessive, or interferes with daily activities.\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"p-4 bg-green-50 rounded-lg\">\n              <h4 className=\"font-semibold text-green-800 mb-2\">Normal Anxiety</h4>\n              <ul className=\"text-green-700 space-y-1\">\n                <li>• Before a job interview</li>\n                <li>• Taking an exam</li>\n                <li>• Meeting new people</li>\n                <li>• Making important decisions</li>\n              </ul>\n            </div>\n            <div className=\"p-4 bg-amber-50 rounded-lg\">\n              <h4 className=\"font-semibold text-amber-800 mb-2\">When to Seek Help</h4>\n              <ul className=\"text-amber-700 space-y-1\">\n                <li>• Daily worry for weeks</li>\n                <li>• Avoiding normal activities</li>\n                <li>• Physical symptoms persist</li>\n                <li>• Sleep problems</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 1,\n      title: \"Common Symptoms\",\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-lg\">\n            Anxiety affects people differently, but there are common physical, emotional, and behavioral symptoms.\n          </p>\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <Card className=\"bg-red-50\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg text-red-800\">Physical</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-red-700\">\n                <ul className=\"space-y-2\">\n                  <li>• Rapid heartbeat</li>\n                  <li>• Sweating</li>\n                  <li>• Trembling</li>\n                  <li>• Shortness of breath</li>\n                  <li>• Muscle tension</li>\n                  <li>• Fatigue</li>\n                </ul>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-purple-50\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg text-purple-800\">Emotional</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-purple-700\">\n                <ul className=\"space-y-2\">\n                  <li>• Excessive worry</li>\n                  <li>• Fear of losing control</li>\n                  <li>• Feeling on edge</li>\n                  <li>• Irritability</li>\n                  <li>• Restlessness</li>\n                  <li>• Difficulty concentrating</li>\n                </ul>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-indigo-50\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg text-indigo-800\">Behavioral</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-indigo-700\">\n                <ul className=\"space-y-2\">\n                  <li>• Avoiding situations</li>\n                  <li>• Procrastination</li>\n                  <li>• Seeking reassurance</li>\n                  <li>• Checking behaviors</li>\n                  <li>• Sleep problems</li>\n                  <li>• Social withdrawal</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 2,\n      title: \"Coping Strategies\",\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-lg\">\n            Here are evidence-based techniques you can use to manage anxiety in the moment and long-term.\n          </p>\n          <div className=\"space-y-6\">\n            <div className=\"p-4 bg-green-50 rounded-lg border-l-4 border-green-400\">\n              <h4 className=\"font-semibold text-green-800 mb-3\">Immediate Relief (In the Moment)</h4>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <h5 className=\"font-medium text-green-700 mb-2\">4-7-8 Breathing</h5>\n                  <p className=\"text-green-600 text-sm\">Inhale for 4, hold for 7, exhale for 8 seconds</p>\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-green-700 mb-2\">5-4-3-2-1 Grounding</h5>\n                  <p className=\"text-green-600 text-sm\">5 things you see, 4 hear, 3 touch, 2 smell, 1 taste</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400\">\n              <h4 className=\"font-semibold text-blue-800 mb-3\">Long-term Management</h4>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <ul className=\"text-blue-700 space-y-2\">\n                  <li>• Regular exercise (even 10 minutes helps)</li>\n                  <li>• Consistent sleep schedule</li>\n                  <li>• Limit caffeine and alcohol</li>\n                  <li>• Practice mindfulness or meditation</li>\n                </ul>\n                <ul className=\"text-blue-700 space-y-2\">\n                  <li>• Connect with supportive people</li>\n                  <li>• Challenge negative thoughts</li>\n                  <li>• Set realistic goals</li>\n                  <li>• Maintain regular routines</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const markSectionComplete = (sectionId: number) => {\n    if (!completedSections.includes(sectionId)) {\n      setCompletedSections([...completedSections, sectionId]);\n    }\n  };\n\n  const progressPercentage = Math.round((completedSections.length / sections.length) * 100);\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-3 text-2xl\">\n            <Brain className=\"w-8 h-8\" />\n            Understanding Anxiety\n          </CardTitle>\n          <p className=\"text-blue-100 text-lg\">\n            Learn about anxiety, recognize symptoms, and discover effective coping strategies\n          </p>\n        </CardHeader>\n      </Card>\n\n      {/* Progress */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"font-semibold\">Your Progress</h3>\n            <Badge variant=\"secondary\">{completedSections.length}/{sections.length} completed</Badge>\n          </div>\n          <Progress value={progressPercentage} className=\"mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">{progressPercentage}% complete</p>\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"flex flex-wrap gap-2\">\n        {sections.map((section) => (\n          <Button\n            key={section.id}\n            variant={currentSection === section.id ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setCurrentSection(section.id)}\n            className=\"flex items-center gap-2\"\n          >\n            {completedSections.includes(section.id) && <CheckCircle className=\"w-4 h-4\" />}\n            {section.title}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"w-5 h-5\" />\n            {sections[currentSection].title}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {sections[currentSection].content}\n          \n          <div className=\"flex justify-between pt-6 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentSection(Math.max(0, currentSection - 1))}\n              disabled={currentSection === 0}\n            >\n              Previous\n            </Button>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => markSectionComplete(currentSection)}\n                disabled={completedSections.includes(currentSection)}\n              >\n                {completedSections.includes(currentSection) ? (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Completed\n                  </>\n                ) : (\n                  \"Mark Complete\"\n                )}\n              </Button>\n              \n              <Button\n                onClick={() => setCurrentSection(Math.min(sections.length - 1, currentSection + 1))}\n                disabled={currentSection === sections.length - 1}\n              >\n                Next\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Completion Message */}\n      {completedSections.length === sections.length && (\n        <Card className=\"bg-green-50 border-green-200\">\n          <CardContent className=\"p-6 text-center\">\n            <CheckCircle className=\"w-12 h-12 text-green-600 mx-auto mb-3\" />\n            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\n              Congratulations! You've completed the Understanding Anxiety guide.\n            </h3>\n            <p className=\"text-green-700\">\n              You now have a solid foundation for understanding and managing anxiety. \n              Practice the techniques regularly for best results.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":10729},"client/src/components/BreathingExercise.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Play, \n  Pause, \n  RotateCcw, \n  Settings,\n  Wind,\n  Heart,\n  Clock,\n  CheckCircle,\n  Zap\n} from \"lucide-react\";\n\ninterface BreathingSession {\n  technique: string;\n  duration: number;\n  completedCycles: number;\n  startTime: Date;\n}\n\nexport function BreathingExercise() {\n  const [isActive, setIsActive] = useState(false);\n  const [currentPhase, setCurrentPhase] = useState<'inhale' | 'hold' | 'exhale' | 'pause'>('inhale');\n  const [timeRemaining, setTimeRemaining] = useState(4);\n  const [currentCycle, setCurrentCycle] = useState(0);\n  const [totalCycles, setTotalCycles] = useState(5);\n  const [selectedTechnique, setSelectedTechnique] = useState('478');\n  const [sessions, setSessions] = useState<BreathingSession[]>([]);\n  const [showSettings, setShowSettings] = useState(false);\n  \n  const intervalRef = useRef<NodeJS.Timeout>();\n  const audioRef = useRef<HTMLAudioElement>();\n\n  const techniques = {\n    '478': {\n      name: '4-7-8 Breathing',\n      description: 'Calming technique for anxiety and sleep',\n      pattern: { inhale: 4, hold: 7, exhale: 8, pause: 0 },\n      benefits: ['Reduces anxiety', 'Promotes sleep', 'Calms nervous system'],\n      difficulty: 'Beginner',\n      duration: '2-5 minutes'\n    },\n    'box': {\n      name: 'Box Breathing',\n      description: 'Military-style breathing for focus and calm',\n      pattern: { inhale: 4, hold: 4, exhale: 4, pause: 4 },\n      benefits: ['Improves focus', 'Reduces stress', 'Enhances performance'],\n      difficulty: 'Beginner',\n      duration: '3-10 minutes'\n    },\n    'coherent': {\n      name: 'Coherent Breathing',\n      description: '5-5 breathing for heart rate variability',\n      pattern: { inhale: 5, hold: 0, exhale: 5, pause: 0 },\n      benefits: ['Heart rhythm coherence', 'Balanced nervous system', 'Emotional regulation'],\n      difficulty: 'Intermediate',\n      duration: '5-20 minutes'\n    },\n    'wim': {\n      name: 'Wim Hof Method',\n      description: 'Energizing breathing technique',\n      pattern: { inhale: 2, hold: 0, exhale: 1, pause: 0 },\n      benefits: ['Increases energy', 'Boosts immune system', 'Improves cold tolerance'],\n      difficulty: 'Advanced',\n      duration: '10-15 minutes'\n    },\n    'calming': {\n      name: 'Extended Exhale',\n      description: 'Longer exhale for deep relaxation',\n      pattern: { inhale: 4, hold: 2, exhale: 8, pause: 2 },\n      benefits: ['Deep relaxation', 'Activates rest response', 'Reduces tension'],\n      difficulty: 'Beginner',\n      duration: '3-10 minutes'\n    }\n  };\n\n  const currentTechnique = techniques[selectedTechnique as keyof typeof techniques];\n\n  useEffect(() => {\n    if (isActive) {\n      intervalRef.current = setInterval(() => {\n        setTimeRemaining((prev) => {\n          if (prev <= 1) {\n            // Move to next phase\n            const phases = Object.keys(currentTechnique.pattern).filter(\n              phase => currentTechnique.pattern[phase as keyof typeof currentTechnique.pattern] > 0\n            );\n            const currentIndex = phases.indexOf(currentPhase);\n            const nextIndex = (currentIndex + 1) % phases.length;\n            const nextPhase = phases[nextIndex] as 'inhale' | 'hold' | 'exhale' | 'pause';\n            \n            setCurrentPhase(nextPhase);\n            \n            // If we completed a full cycle (back to inhale)\n            if (nextPhase === 'inhale' && currentPhase !== 'inhale') {\n              setCurrentCycle(prev => {\n                const newCycle = prev + 1;\n                if (newCycle >= totalCycles) {\n                  // Session complete\n                  setIsActive(false);\n                  completeSession();\n                  return 0;\n                }\n                return newCycle;\n              });\n            }\n            \n            return currentTechnique.pattern[nextPhase];\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      clearInterval(intervalRef.current);\n    }\n\n    return () => clearInterval(intervalRef.current);\n  }, [isActive, currentPhase, currentTechnique.pattern, totalCycles, currentCycle]);\n\n  const completeSession = () => {\n    const session: BreathingSession = {\n      technique: currentTechnique.name,\n      duration: totalCycles * getTotalCycleDuration(),\n      completedCycles: currentCycle,\n      startTime: new Date()\n    };\n    setSessions(prev => [session, ...prev].slice(0, 10)); // Keep last 10 sessions\n  };\n\n  const getTotalCycleDuration = () => {\n    return Object.values(currentTechnique.pattern).reduce((sum, time) => sum + time, 0);\n  };\n\n  const getProgress = () => {\n    const totalTime = getTotalCycleDuration();\n    const currentPhaseTime = currentTechnique.pattern[currentPhase];\n    const elapsedInPhase = currentPhaseTime - timeRemaining;\n    \n    let phaseOffset = 0;\n    const phases = Object.keys(currentTechnique.pattern).filter(\n      phase => currentTechnique.pattern[phase as keyof typeof currentTechnique.pattern] > 0\n    );\n    \n    for (let i = 0; i < phases.indexOf(currentPhase); i++) {\n      phaseOffset += currentTechnique.pattern[phases[i] as keyof typeof currentTechnique.pattern];\n    }\n    \n    const cycleProgress = ((phaseOffset + elapsedInPhase) / totalTime) * 100;\n    return cycleProgress;\n  };\n\n  const getOverallProgress = () => {\n    return ((currentCycle / totalCycles) * 100) + (getProgress() / totalCycles);\n  };\n\n  const startExercise = () => {\n    setIsActive(true);\n    setCurrentCycle(0);\n    setCurrentPhase('inhale');\n    setTimeRemaining(currentTechnique.pattern.inhale);\n  };\n\n  const pauseExercise = () => {\n    setIsActive(false);\n  };\n\n  const resetExercise = () => {\n    setIsActive(false);\n    setCurrentCycle(0);\n    setCurrentPhase('inhale');\n    setTimeRemaining(currentTechnique.pattern.inhale);\n  };\n\n  const getPhaseInstruction = () => {\n    switch (currentPhase) {\n      case 'inhale':\n        return 'Breathe in slowly through your nose';\n      case 'hold':\n        return 'Hold your breath gently';\n      case 'exhale':\n        return 'Breathe out slowly through your mouth';\n      case 'pause':\n        return 'Rest naturally';\n      default:\n        return 'Follow your breath';\n    }\n  };\n\n  const getPhaseColor = () => {\n    switch (currentPhase) {\n      case 'inhale':\n        return 'bg-blue-500';\n      case 'hold':\n        return 'bg-yellow-500';\n      case 'exhale':\n        return 'bg-green-500';\n      case 'pause':\n        return 'bg-gray-400';\n      default:\n        return 'bg-blue-500';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-gradient-to-br from-blue-50 to-purple-50 border-blue-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Wind className=\"w-5 h-5 text-blue-600\" />\n            Interactive Breathing Exercises\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Guided breathing techniques to reduce anxiety and promote relaxation\n          </p>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={selectedTechnique} onValueChange={setSelectedTechnique} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-5\">\n              <TabsTrigger value=\"478\">4-7-8</TabsTrigger>\n              <TabsTrigger value=\"box\">Box</TabsTrigger>\n              <TabsTrigger value=\"coherent\">Coherent</TabsTrigger>\n              <TabsTrigger value=\"wim\">Wim Hof</TabsTrigger>\n              <TabsTrigger value=\"calming\">Extended</TabsTrigger>\n            </TabsList>\n\n            {Object.entries(techniques).map(([key, technique]) => (\n              <TabsContent key={key} value={key} className=\"mt-6\">\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-xl\">{technique.name}</CardTitle>\n                        <p className=\"text-muted-foreground mt-1\">{technique.description}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge variant=\"secondary\">{technique.difficulty}</Badge>\n                        <p className=\"text-sm text-muted-foreground mt-1\">{technique.duration}</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {/* Breathing Pattern */}\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">Breathing Pattern</h4>\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                        {Object.entries(technique.pattern).map(([phase, duration]) => (\n                          duration > 0 && (\n                            <div key={phase} className=\"text-center p-3 bg-secondary/50 rounded-lg\">\n                              <div className=\"text-2xl font-bold text-primary\">{duration}s</div>\n                              <div className=\"text-sm text-muted-foreground capitalize\">{phase}</div>\n                            </div>\n                          )\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Benefits */}\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">Benefits</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {technique.benefits.map((benefit, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-green-700 border-green-200\">\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            {benefit}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Exercise Control */}\n                    <div className=\"bg-white p-6 rounded-lg border\">\n                      <div className=\"text-center space-y-6\">\n                        {/* Visual Breathing Guide */}\n                        <div className=\"relative\">\n                          <div \n                            className={`w-32 h-32 mx-auto rounded-full ${getPhaseColor()} transition-all duration-1000 flex items-center justify-center`}\n                            style={{\n                              transform: currentPhase === 'inhale' ? 'scale(1.2)' : \n                                        currentPhase === 'exhale' ? 'scale(0.8)' : 'scale(1)',\n                              opacity: isActive ? 0.8 : 0.5\n                            }}\n                          >\n                            <div className=\"text-white text-center\">\n                              <div className=\"text-3xl font-bold\">{timeRemaining}</div>\n                              <div className=\"text-sm uppercase tracking-wider\">{currentPhase}</div>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Instructions */}\n                        <div>\n                          <p className=\"text-lg font-medium text-center mb-2\">{getPhaseInstruction()}</p>\n                          <div className=\"flex items-center justify-center gap-4 text-sm text-muted-foreground\">\n                            <span>Cycle {currentCycle + 1} of {totalCycles}</span>\n                            <span>•</span>\n                            <span>{Math.round(getOverallProgress())}% Complete</span>\n                          </div>\n                        </div>\n\n                        {/* Progress Bar */}\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm text-muted-foreground\">\n                            <span>Current Cycle</span>\n                            <span>{Math.round(getProgress())}%</span>\n                          </div>\n                          <Progress value={getProgress()} className=\"h-2\" />\n                          \n                          <div className=\"flex justify-between text-sm text-muted-foreground\">\n                            <span>Overall Progress</span>\n                            <span>{Math.round(getOverallProgress())}%</span>\n                          </div>\n                          <Progress value={getOverallProgress()} className=\"h-3\" />\n                        </div>\n\n                        {/* Controls */}\n                        <div className=\"flex items-center justify-center gap-4\">\n                          {!isActive ? (\n                            <Button onClick={startExercise} className=\"gap-2\" data-testid=\"button-start-breathing\">\n                              <Play className=\"w-4 h-4\" />\n                              Start Exercise\n                            </Button>\n                          ) : (\n                            <Button onClick={pauseExercise} variant=\"secondary\" className=\"gap-2\" data-testid=\"button-pause-breathing\">\n                              <Pause className=\"w-4 h-4\" />\n                              Pause\n                            </Button>\n                          )}\n                          \n                          <Button onClick={resetExercise} variant=\"outline\" className=\"gap-2\" data-testid=\"button-reset-breathing\">\n                            <RotateCcw className=\"w-4 h-4\" />\n                            Reset\n                          </Button>\n                        </div>\n\n                        {/* Settings */}\n                        <div className=\"pt-4 border-t\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => setShowSettings(!showSettings)}\n                            className=\"gap-2\"\n                          >\n                            <Settings className=\"w-4 h-4\" />\n                            Settings\n                          </Button>\n                          \n                          {showSettings && (\n                            <div className=\"mt-4 p-4 bg-secondary/20 rounded-lg\">\n                              <div className=\"flex items-center gap-4\">\n                                <label className=\"text-sm font-medium\">Total Cycles:</label>\n                                <div className=\"flex gap-2\">\n                                  {[3, 5, 8, 10, 15].map(num => (\n                                    <Button\n                                      key={num}\n                                      variant={totalCycles === num ? \"default\" : \"outline\"}\n                                      size=\"sm\"\n                                      onClick={() => setTotalCycles(num)}\n                                      data-testid={`button-cycles-${num}`}\n                                    >\n                                      {num}\n                                    </Button>\n                                  ))}\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            ))}\n          </Tabs>\n\n          {/* Session History */}\n          {sessions.length > 0 && (\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"w-5 h-5\" />\n                  Recent Sessions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {sessions.slice(0, 5).map((session, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-sm\">{session.technique}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {session.completedCycles} cycles • {Math.round(session.duration / 60)} min\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-xs text-muted-foreground\">\n                          {session.startTime.toLocaleDateString()}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {session.startTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Quick Tips */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-semibold mb-3 text-blue-800\">💡 Breathing Exercise Tips</h4>\n              <div className=\"space-y-2 text-sm text-blue-700\">\n                <p>• Find a comfortable, quiet space where you won't be interrupted</p>\n                <p>• Sit with your back straight or lie down comfortably</p>\n                <p>• Place one hand on your chest, one on your belly - the belly should move more</p>\n                <p>• Don't force the breath - let it flow naturally within the timing</p>\n                <p>• If you feel dizzy, return to normal breathing and try a shorter session</p>\n                <p>• Practice regularly for best results - even 3-5 minutes daily helps</p>\n              </div>\n            </CardContent>\n          </Card>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":18433},"client/src/components/GroundingExercises.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Eye,\n  Ear,\n  Hand,\n  Heart,\n  Timer,\n  Play,\n  Pause,\n  RotateCcw,\n  CheckCircle,\n  Mountain,\n  Waves,\n  TreePine,\n  Sun,\n  Sparkles,\n  Wind\n} from \"lucide-react\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface GroundingSession {\n  technique: string;\n  duration: number;\n  completedSteps: number;\n  startTime: Date;\n}\n\nexport function GroundingExercises() {\n  const [activeExercise, setActiveExercise] = useState<string | null>(null);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [userInputs, setUserInputs] = useState<string[]>([]);\n  const [sessions, setSessions] = useState<GroundingSession[]>([]);\n  const [selectedTab, setSelectedTab] = useState(\"54321\");\n\n  const exercises = {\n    \"54321\": {\n      name: \"5-4-3-2-1 Technique\",\n      description: \"Use your senses to ground yourself in the present moment\",\n      duration: 300, // 5 minutes\n      icon: Eye,\n      steps: [\n        { \n          type: \"observation\", \n          instruction: \"Look around and identify 5 things you can SEE\",\n          timePerStep: 60\n        },\n        { \n          type: \"observation\", \n          instruction: \"Notice 4 things you can TOUCH or FEEL\",\n          timePerStep: 60\n        },\n        { \n          type: \"observation\", \n          instruction: \"Listen for 3 things you can HEAR\",\n          timePerStep: 60\n        },\n        { \n          type: \"observation\", \n          instruction: \"Identify 2 things you can SMELL\",\n          timePerStep: 60\n        },\n        { \n          type: \"observation\", \n          instruction: \"Notice 1 thing you can TASTE\",\n          timePerStep: 60\n        }\n      ],\n      benefits: [\"Reduces anxiety\", \"Grounds in present\", \"Engages all senses\"]\n    },\n    \"body-scan\": {\n      name: \"Progressive Body Scan\",\n      description: \"Systematically relax each part of your body\",\n      duration: 600, // 10 minutes\n      icon: Heart,\n      steps: [\n        { type: \"instruction\", instruction: \"Close your eyes and take 3 deep breaths\", timePerStep: 30 },\n        { type: \"instruction\", instruction: \"Focus on your toes - notice any tension, then let it go\", timePerStep: 45 },\n        { type: \"instruction\", instruction: \"Move to your feet - feel them relax completely\", timePerStep: 45 },\n        { type: \"instruction\", instruction: \"Let the relaxation flow up to your calves and shins\", timePerStep: 45 },\n        { type: \"instruction\", instruction: \"Feel your knees and thighs becoming heavy and relaxed\", timePerStep: 45 },\n        { type: \"instruction\", instruction: \"Release any tension in your hips and lower back\", timePerStep: 45 },\n        { type: \"instruction\", instruction: \"Let your stomach and chest soften and expand\", timePerStep: 45 },\n        { type: \"instruction\", instruction: \"Drop your shoulders away from your ears\", timePerStep: 45 },\n        { type: \"instruction\", instruction: \"Relax your arms from shoulders to fingertips\", timePerStep: 45 },\n        { type: \"instruction\", instruction: \"Release tension in your neck and jaw\", timePerStep: 45 },\n        { type: \"instruction\", instruction: \"Soften your face, eyes, and forehead\", timePerStep: 45 },\n        { type: \"instruction\", instruction: \"Feel your whole body relaxed and grounded\", timePerStep: 60 }\n      ],\n      benefits: [\"Physical relaxation\", \"Body awareness\", \"Tension release\"]\n    },\n    \"breathing-anchor\": {\n      name: \"Breathing Anchor\", \n      description: \"Use breath as an anchor to the present moment\",\n      duration: 480, // 8 minutes\n      icon: Heart,\n      steps: [\n        { type: \"instruction\", instruction: \"Sit comfortably and close your eyes\", timePerStep: 30 },\n        { type: \"instruction\", instruction: \"Place one hand on chest, one on belly\", timePerStep: 30 },\n        { type: \"instruction\", instruction: \"Breathe naturally and notice which hand moves more\", timePerStep: 60 },\n        { type: \"instruction\", instruction: \"Focus on the sensation of air entering your nostrils\", timePerStep: 60 },\n        { type: \"instruction\", instruction: \"Notice the pause between inhale and exhale\", timePerStep: 60 },\n        { type: \"instruction\", instruction: \"Feel the warm air leaving through your mouth or nose\", timePerStep: 60 },\n        { type: \"instruction\", instruction: \"When your mind wanders, gently return to your breath\", timePerStep: 90 },\n        { type: \"instruction\", instruction: \"Continue focusing on breath as your anchor\", timePerStep: 90 }\n      ],\n      benefits: [\"Present moment awareness\", \"Calms mind\", \"Anxiety reduction\"]\n    },\n    \"mental-safe-space\": {\n      name: \"Mental Safe Space\",\n      description: \"Visualize and create your personal sanctuary\",\n      duration: 540, // 9 minutes\n      icon: Mountain,\n      steps: [\n        { \n          type: \"visualization\", \n          instruction: \"Close your eyes and imagine a place where you feel completely safe and peaceful\",\n          timePerStep: 90\n        },\n        { \n          type: \"visualization\", \n          instruction: \"Notice the colors, textures, and lighting in your safe space\",\n          timePerStep: 90\n        },\n        { \n          type: \"visualization\", \n          instruction: \"What sounds do you hear in this peaceful place?\",\n          timePerStep: 90\n        },\n        { \n          type: \"visualization\", \n          instruction: \"Feel the temperature and any physical sensations\",\n          timePerStep: 90\n        },\n        { \n          type: \"visualization\", \n          instruction: \"Notice any pleasant scents in your safe space\",\n          timePerStep: 90\n        },\n        { \n          type: \"affirmation\", \n          instruction: \"Repeat: 'I am safe, I am calm, I am in control'\",\n          timePerStep: 90\n        }\n      ],\n      benefits: [\"Creates inner refuge\", \"Builds resilience\", \"Emotional regulation\"]\n    },\n    \"mindful-observation\": {\n      name: \"Mindful Object Focus\",\n      description: \"Focus completely on a single object to anchor attention\",\n      duration: 420, // 7 minutes\n      icon: Eye,\n      steps: [\n        { \n          type: \"preparation\", \n          instruction: \"Choose a small object you can hold (coin, stone, pen, etc.)\",\n          timePerStep: 60\n        },\n        { \n          type: \"observation\", \n          instruction: \"Look at the object - notice its shape, color, and size\",\n          timePerStep: 60\n        },\n        { \n          type: \"observation\", \n          instruction: \"Feel its texture, weight, and temperature\",\n          timePerStep: 60\n        },\n        { \n          type: \"observation\", \n          instruction: \"Notice any sounds it makes when you move it\",\n          timePerStep: 60\n        },\n        { \n          type: \"observation\", \n          instruction: \"Smell the object - does it have a scent?\",\n          timePerStep: 60\n        },\n        { \n          type: \"reflection\", \n          instruction: \"Reflect on how this focused attention made you feel\",\n          timePerStep: 120\n        }\n      ],\n      benefits: [\"Improves focus\", \"Reduces rumination\", \"Present moment awareness\"]\n    }\n  };\n\n  const currentExercise = activeExercise ? exercises[activeExercise as keyof typeof exercises] : null;\n  const currentStepData = currentExercise?.steps[currentStep];\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (isActive && timeRemaining > 0) {\n      timer = setTimeout(() => {\n        setTimeRemaining(prev => prev - 1);\n      }, 1000);\n    } else if (isActive && timeRemaining === 0) {\n      // Move to next step or complete exercise\n      if (currentStep < (currentExercise?.steps.length || 0) - 1) {\n        setCurrentStep(prev => prev + 1);\n        setTimeRemaining(currentExercise?.steps[currentStep + 1]?.timePerStep || 60);\n        if (currentStepData?.type === \"observation\" || currentStepData?.type === \"visualization\") {\n          setUserInputs(prev => [...prev, \"\"]);\n        }\n      } else {\n        // Exercise complete\n        completeExercise();\n      }\n    }\n    return () => clearTimeout(timer);\n  }, [isActive, timeRemaining, currentStep, currentExercise, currentStepData]);\n\n  const startExercise = (exerciseKey: string) => {\n    const exercise = exercises[exerciseKey as keyof typeof exercises];\n    setActiveExercise(exerciseKey);\n    setCurrentStep(0);\n    setTimeRemaining(exercise.steps[0]?.timePerStep || 60);\n    setIsActive(true);\n    setUserInputs([]);\n  };\n\n  const pauseExercise = () => {\n    setIsActive(false);\n  };\n\n  const resumeExercise = () => {\n    setIsActive(true);\n  };\n\n  const resetExercise = () => {\n    setIsActive(false);\n    setCurrentStep(0);\n    setTimeRemaining(currentExercise?.steps[0]?.timePerStep || 60);\n    setUserInputs([]);\n  };\n\n  const completeExercise = () => {\n    if (currentExercise) {\n      const session: GroundingSession = {\n        technique: currentExercise.name,\n        duration: currentExercise.duration,\n        completedSteps: currentStep + 1,\n        startTime: new Date()\n      };\n      setSessions(prev => [session, ...prev].slice(0, 10));\n    }\n    setIsActive(false);\n    setActiveExercise(null);\n    setCurrentStep(0);\n    setUserInputs([]);\n  };\n\n  const updateUserInput = (value: string) => {\n    setUserInputs(prev => {\n      const newInputs = [...prev];\n      newInputs[currentStep] = value;\n      return newInputs;\n    });\n  };\n\n  const getProgress = () => {\n    if (!currentExercise) return 0;\n    return ((currentStep + 1) / currentExercise.steps.length) * 100;\n  };\n\n  const getStepIcon = (type: string) => {\n    switch (type) {\n      case \"observation\": return Eye;\n      case \"visualization\": return Mountain;\n      case \"instruction\": return Heart;\n      case \"affirmation\": return Sparkles;\n      default: return CheckCircle;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-gradient-to-br from-green-50 to-blue-50 border-green-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Mountain className=\"w-5 h-5 text-green-600\" />\n            Interactive Grounding & Mindfulness\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Evidence-based techniques to bring your attention to the present moment\n          </p>\n        </CardHeader>\n      </Card>\n\n      {!activeExercise ? (\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"54321\">5-4-3-2-1</TabsTrigger>\n            <TabsTrigger value=\"body-scan\">Body Scan</TabsTrigger>\n            <TabsTrigger value=\"breathing-anchor\">Breathing</TabsTrigger>\n            <TabsTrigger value=\"mental-safe-space\">Safe Space</TabsTrigger>\n            <TabsTrigger value=\"mindful-observation\">Object Focus</TabsTrigger>\n          </TabsList>\n\n          {Object.entries(exercises).map(([key, exercise]) => (\n            <TabsContent key={key} value={key}>\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                        <exercise.icon className=\"w-6 h-6 text-green-600\" />\n                      </div>\n                      <div>\n                        <CardTitle>{exercise.name}</CardTitle>\n                        <p className=\"text-muted-foreground\">{exercise.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant=\"secondary\">{Math.round(exercise.duration / 60)} min</Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Exercise Steps</h4>\n                    <div className=\"space-y-2\">\n                      {exercise.steps.map((step, index) => {\n                        const StepIcon = getStepIcon(step.type);\n                        return (\n                          <div key={index} className=\"flex items-start gap-3 p-3 bg-secondary/30 rounded-lg\">\n                            <div className=\"w-6 h-6 bg-white rounded-full flex items-center justify-center text-xs font-bold\">\n                              {index + 1}\n                            </div>\n                            <div className=\"flex items-start gap-2 flex-1\">\n                              <StepIcon className=\"w-4 h-4 mt-0.5 text-muted-foreground\" />\n                              <div>\n                                <p className=\"text-sm\">{step.instruction}</p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  ~{Math.round(step.timePerStep / 60)} minute{step.timePerStep >= 120 ? 's' : ''}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Benefits</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {exercise.benefits.map((benefit, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-green-700 border-green-200\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          {benefit}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={() => startExercise(key)}\n                    className=\"w-full gap-2\"\n                    data-testid={`button-start-${key}`}\n                  >\n                    <Play className=\"w-4 h-4\" />\n                    Start {exercise.name}\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          ))}\n        </Tabs>\n      ) : (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <currentExercise.icon className=\"w-8 h-8 text-primary\" />\n                <div>\n                  <CardTitle>{currentExercise.name}</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Step {currentStep + 1} of {currentExercise.steps.length}\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-2xl font-bold text-primary\">{timeRemaining}s</div>\n                <div className=\"text-sm text-muted-foreground\">Remaining</div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Progress */}\n            <div>\n              <div className=\"flex justify-between text-sm text-muted-foreground mb-2\">\n                <span>Overall Progress</span>\n                <span>{Math.round(getProgress())}%</span>\n              </div>\n              <Progress value={getProgress()} className=\"h-3\" />\n            </div>\n\n            {/* Current Step */}\n            <div className=\"bg-blue-50 p-6 rounded-lg text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                {React.createElement(getStepIcon(currentStepData?.type || \"instruction\"), {\n                  className: \"w-8 h-8 text-blue-600\"\n                })}\n              </div>\n              <h3 className=\"text-lg font-semibold mb-3\">\n                {currentStepData?.instruction}\n              </h3>\n              \n              {(currentStepData?.type === \"observation\" || currentStepData?.type === \"visualization\") && (\n                <div className=\"mt-4\">\n                  <Textarea\n                    value={userInputs[currentStep] || \"\"}\n                    onChange={(e) => updateUserInput(e.target.value)}\n                    placeholder=\"Take your time to observe and describe what you notice...\"\n                    rows={3}\n                    className=\"mt-2\"\n                    data-testid={`textarea-step-${currentStep}`}\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Controls */}\n            <div className=\"flex items-center justify-center gap-4\">\n              {isActive ? (\n                <Button onClick={pauseExercise} variant=\"secondary\" className=\"gap-2\">\n                  <Pause className=\"w-4 h-4\" />\n                  Pause\n                </Button>\n              ) : (\n                <Button onClick={resumeExercise} className=\"gap-2\">\n                  <Play className=\"w-4 h-4\" />\n                  Resume\n                </Button>\n              )}\n              \n              <Button onClick={resetExercise} variant=\"outline\" className=\"gap-2\">\n                <RotateCcw className=\"w-4 h-4\" />\n                Restart\n              </Button>\n              \n              <Button onClick={() => setActiveExercise(null)} variant=\"ghost\">\n                Exit Exercise\n              </Button>\n            </div>\n\n            {/* Previous Inputs Summary */}\n            {userInputs.length > 0 && (\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium mb-3\">Your Observations So Far</h4>\n                <div className=\"space-y-2\">\n                  {userInputs.map((input, index) => (\n                    input && (\n                      <div key={index} className=\"text-sm\">\n                        <strong>Step {index + 1}:</strong> {input}\n                      </div>\n                    )\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Session History */}\n      {sessions.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Timer className=\"w-5 h-5\" />\n              Recent Grounding Sessions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {sessions.slice(0, 5).map((session, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-sm\">{session.technique}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {session.completedSteps} steps • {Math.round(session.duration / 60)} min\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-muted-foreground\">\n                      {session.startTime.toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Tips */}\n      <Card className=\"bg-green-50 border-green-200\">\n        <CardContent className=\"p-4\">\n          <h4 className=\"font-semibold mb-3 text-green-800\">💡 Grounding Tips</h4>\n          <div className=\"space-y-2 text-sm text-green-700\">\n            <p>• Use grounding exercises when you feel overwhelmed, anxious, or disconnected</p>\n            <p>• There's no \"right\" way - adapt these techniques to what works for you</p>\n            <p>• Practice regularly, even when calm, to build your grounding skills</p>\n            <p>• If one technique doesn't help, try another - different methods work for different situations</p>\n            <p>• Remember: the goal is to bring your attention to the present moment</p>\n            <p>• Be patient with yourself - grounding skills improve with practice</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20901},"client/src/components/LifestyleGuideComprehensive.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Heart, \n  Activity, \n  Apple, \n  Users, \n  Shield, \n  CheckCircle, \n  ArrowRight, \n  Target,\n  FileText,\n  PenTool,\n  Star,\n  Sun,\n  Clock,\n  BookOpen\n} from \"lucide-react\";\n\ninterface LifestyleAssessment {\n  exerciseFrequency: number;\n  exerciseTypes: string[];\n  dietQuality: number;\n  socialConnections: number;\n  stressManagement: string[];\n  sleepQuality: number;\n  screenTime: number;\n  outdoorTime: number;\n  hobbies: string[];\n  barriers: string[];\n}\n\nexport function LifestyleGuideComprehensive() {\n  const [currentSection, setCurrentSection] = useState(0);\n  const [completedSections, setCompletedSections] = useState<number[]>([]);\n  const [assessment, setAssessment] = useState<LifestyleAssessment>({\n    exerciseFrequency: 2,\n    exerciseTypes: [],\n    dietQuality: 5,\n    socialConnections: 5,\n    stressManagement: [],\n    sleepQuality: 5,\n    screenTime: 6,\n    outdoorTime: 1,\n    hobbies: [],\n    barriers: []\n  });\n  const [personalGoals, setPersonalGoals] = useState<string[]>([]);\n  const [personalNotes, setPersonalNotes] = useState<Record<string, string>>({});\n\n  const sections = [\n    {\n      id: 0,\n      title: \"Lifestyle Factors & Mental Health\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-emerald-50 p-6 rounded-lg border-l-4 border-emerald-400\">\n            <h3 className=\"text-xl font-semibold text-emerald-800 mb-3\">The Foundation of Mental Wellbeing</h3>\n            <p className=\"text-emerald-700 mb-4\">\n              Lifestyle factors play a crucial role in mental health. Research consistently shows that \n              physical activity, nutrition, sleep, social connections, and stress management work together \n              to support emotional wellbeing and reduce anxiety symptoms.\n            </p>\n            <div className=\"bg-white p-4 rounded border border-emerald-200\">\n              <h4 className=\"font-semibold text-emerald-800 mb-2\">NICE Guidelines on Lifestyle Interventions:</h4>\n              <p className=\"text-emerald-700 text-sm\">\n                \"Lifestyle interventions including physical activity, dietary improvements, and social support \n                should be considered as part of a comprehensive approach to treating anxiety disorders. \n                These interventions have strong evidence for improving mental health outcomes.\"\n              </p>\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card className=\"bg-blue-50 border-blue-200\">\n              <CardHeader>\n                <CardTitle className=\"text-blue-800 flex items-center gap-2\">\n                  <Activity className=\"w-5 h-5\" />\n                  Physical Activity & Exercise\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-white rounded border border-blue-200\">\n                    <h4 className=\"font-semibold text-blue-800 mb-1\">Immediate Effects</h4>\n                    <p className=\"text-blue-700 text-sm\">Releases endorphins, reduces stress hormones, improves mood within minutes</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-blue-200\">\n                    <h4 className=\"font-semibold text-blue-800 mb-1\">Long-term Benefits</h4>\n                    <p className=\"text-blue-700 text-sm\">Builds resilience, improves sleep quality, enhances self-esteem</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-blue-200\">\n                    <h4 className=\"font-semibold text-blue-800 mb-1\">Evidence</h4>\n                    <p className=\"text-blue-700 text-sm\">30 minutes moderate exercise 3-5 times weekly reduces anxiety by 20-30%</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-orange-50 border-orange-200\">\n              <CardHeader>\n                <CardTitle className=\"text-orange-800 flex items-center gap-2\">\n                  <Apple className=\"w-5 h-5\" />\n                  Nutrition & Brain Health\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-white rounded border border-orange-200\">\n                    <h4 className=\"font-semibold text-orange-800 mb-1\">Brain-Gut Connection</h4>\n                    <p className=\"text-orange-700 text-sm\">90% of serotonin is produced in the gut - diet directly affects mood</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-orange-200\">\n                    <h4 className=\"font-semibold text-orange-800 mb-1\">Blood Sugar Stability</h4>\n                    <p className=\"text-orange-700 text-sm\">Stable glucose levels prevent anxiety-mimicking symptoms</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-orange-200\">\n                    <h4 className=\"font-semibold text-orange-800 mb-1\">Anti-inflammatory Foods</h4>\n                    <p className=\"text-orange-700 text-sm\">Reduce inflammation linked to anxiety and depression</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card className=\"bg-purple-50 border-purple-200\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-800 flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  Social Connections\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-white rounded border border-purple-200\">\n                    <h4 className=\"font-semibold text-purple-800 mb-1\">Oxytocin Release</h4>\n                    <p className=\"text-purple-700 text-sm\">Social bonding releases natural anxiety-reducing hormones</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-purple-200\">\n                    <h4 className=\"font-semibold text-purple-800 mb-1\">Stress Buffering</h4>\n                    <p className=\"text-purple-700 text-sm\">Strong relationships protect against stress and anxiety</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-purple-200\">\n                    <h4 className=\"font-semibold text-purple-800 mb-1\">Perspective & Support</h4>\n                    <p className=\"text-purple-700 text-sm\">Others provide different viewpoints and emotional support</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-green-50 border-green-200\">\n              <CardHeader>\n                <CardTitle className=\"text-green-800 flex items-center gap-2\">\n                  <Sun className=\"w-5 h-5\" />\n                  Environment & Nature\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-white rounded border border-green-200\">\n                    <h4 className=\"font-semibold text-green-800 mb-1\">Nature Exposure</h4>\n                    <p className=\"text-green-700 text-sm\">20 minutes in nature reduces cortisol levels significantly</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-green-200\">\n                    <h4 className=\"font-semibold text-green-800 mb-1\">Sunlight & Vitamin D</h4>\n                    <p className=\"text-green-700 text-sm\">Natural light regulates mood and circadian rhythms</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-green-200\">\n                    <h4 className=\"font-semibold text-green-800 mb-1\">Mindful Environment</h4>\n                    <p className=\"text-green-700 text-sm\">Clutter-free, calming spaces support mental clarity</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card className=\"bg-indigo-50 border-indigo-200\">\n            <CardHeader>\n              <CardTitle className=\"text-indigo-800 flex items-center gap-2\">\n                <Heart className=\"w-5 h-5\" />\n                The Synergistic Effect\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold text-indigo-800 mb-3\">Research Findings</h4>\n                  <ul className=\"text-indigo-700 space-y-2\">\n                    <li>• People with 4+ healthy lifestyle factors have 50% lower anxiety risk</li>\n                    <li>• Combined interventions are more effective than single approaches</li>\n                    <li>• Small changes in multiple areas create significant improvements</li>\n                    <li>• Benefits compound over time - effects increase with consistency</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-indigo-800 mb-3\">The Positive Cycle</h4>\n                  <div className=\"p-4 bg-white rounded border border-indigo-200\">\n                    <div className=\"text-center\">\n                      <div className=\"text-sm text-indigo-600 mb-2\">Better Sleep</div>\n                      <div className=\"text-xs text-indigo-500\">↓</div>\n                      <div className=\"text-sm text-indigo-600 mb-2\">More Energy</div>\n                      <div className=\"text-xs text-indigo-500\">↓</div>\n                      <div className=\"text-sm text-indigo-600 mb-2\">More Activity</div>\n                      <div className=\"text-xs text-indigo-500\">↓</div>\n                      <div className=\"text-sm text-indigo-600 mb-2\">Better Mood</div>\n                      <div className=\"text-xs text-indigo-500\">↓</div>\n                      <div className=\"text-sm text-indigo-600\">Better Sleep...</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Your Current Lifestyle Perspective</h3>\n            <Textarea\n              placeholder=\"Reflect on your current lifestyle. Which areas feel supportive of your mental health? Which areas might need attention?\"\n              value={personalNotes['section0'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section0: e.target.value}))}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 1,\n      title: \"Personal Lifestyle Assessment\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-blue-50 p-6 rounded-lg border-l-4 border-blue-400\">\n            <h3 className=\"text-xl font-semibold text-blue-800 mb-3\">Lifestyle Factors Assessment</h3>\n            <p className=\"text-blue-700\">\n              This comprehensive assessment helps identify your current lifestyle patterns and areas \n              for potential improvement. Be honest - this is for your benefit and growth.\n            </p>\n          </div>\n\n          <Card className=\"bg-white border-2\">\n            <CardHeader>\n              <CardTitle className=\"text-blue-800 flex items-center gap-2\">\n                <Activity className=\"w-5 h-5\" />\n                Physical Activity & Movement\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label className=\"font-semibold text-blue-800\">How many days per week do you engage in physical activity (20+ minutes)?</Label>\n                <div className=\"mt-2\">\n                  <Slider\n                    value={[assessment.exerciseFrequency]}\n                    onValueChange={(value) => setAssessment(prev => ({...prev, exerciseFrequency: value[0]}))}\n                    max={7}\n                    min={0}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <div className=\"flex justify-between text-sm text-blue-600 mt-1\">\n                    <span>0 days</span>\n                    <span className=\"font-medium\">{assessment.exerciseFrequency} days/week</span>\n                    <span>7 days</span>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"font-semibold text-blue-800 mb-3 block\">Types of physical activity you enjoy or do regularly: (check all that apply)</Label>\n                <div className=\"grid md:grid-cols-3 gap-3\">\n                  {[\n                    'Walking', 'Running/Jogging', 'Cycling', 'Swimming', 'Dancing', 'Yoga/Pilates',\n                    'Strength training', 'Team sports', 'Hiking', 'Gardening', 'Household tasks', 'Other active hobbies'\n                  ].map((activity, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id={`activity-${index}`}\n                        checked={assessment.exerciseTypes.includes(activity)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setAssessment(prev => ({\n                              ...prev, \n                              exerciseTypes: [...prev.exerciseTypes, activity]\n                            }));\n                          } else {\n                            setAssessment(prev => ({\n                              ...prev,\n                              exerciseTypes: prev.exerciseTypes.filter(a => a !== activity)\n                            }));\n                          }\n                        }}\n                      />\n                      <Label htmlFor={`activity-${index}`} className=\"text-blue-700 text-sm\">{activity}</Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-orange-50 border-orange-200\">\n            <CardHeader>\n              <CardTitle className=\"text-orange-800 flex items-center gap-2\">\n                <Apple className=\"w-5 h-5\" />\n                Nutrition & Eating Patterns\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label className=\"font-semibold text-orange-800\">Overall diet quality (1 = very poor, 10 = excellent)</Label>\n                <div className=\"mt-2\">\n                  <Slider\n                    value={[assessment.dietQuality]}\n                    onValueChange={(value) => setAssessment(prev => ({...prev, dietQuality: value[0]}))}\n                    max={10}\n                    min={1}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <div className=\"flex justify-between text-sm text-orange-600 mt-1\">\n                    <span>Very Poor</span>\n                    <span className=\"font-medium\">{assessment.dietQuality}/10</span>\n                    <span>Excellent</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-orange-800\">Current Eating Habits (check if true for you)</h4>\n                  <div className=\"space-y-3\">\n                    {[\n                      'I eat regular meals (don\\'t skip meals)',\n                      'I include fruits and vegetables daily',\n                      'I limit processed/fast foods',\n                      'I stay well hydrated',\n                      'I limit caffeine (especially afternoon)',\n                      'I limit alcohol consumption'\n                    ].map((habit, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox id={`eating-${index}`} />\n                        <Label htmlFor={`eating-${index}`} className=\"text-orange-700 text-sm\">{habit}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-orange-800\">Nutrition Challenges (check if applies)</h4>\n                  <div className=\"space-y-3\">\n                    {[\n                      'Emotional eating when stressed/anxious',\n                      'Irregular eating schedule',\n                      'Too much caffeine (>3 cups coffee/day)',\n                      'Frequent fast food or takeaways',\n                      'Skipping meals due to anxiety',\n                      'Using food to cope with emotions'\n                    ].map((challenge, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox id={`challenge-${index}`} />\n                        <Label htmlFor={`challenge-${index}`} className=\"text-orange-700 text-sm\">{challenge}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-purple-50 border-purple-200\">\n            <CardHeader>\n              <CardTitle className=\"text-purple-800 flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                Social Connections & Support\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label className=\"font-semibold text-purple-800\">Quality of social connections (1 = very isolated, 10 = very connected)</Label>\n                <div className=\"mt-2\">\n                  <Slider\n                    value={[assessment.socialConnections]}\n                    onValueChange={(value) => setAssessment(prev => ({...prev, socialConnections: value[0]}))}\n                    max={10}\n                    min={1}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <div className=\"flex justify-between text-sm text-purple-600 mt-1\">\n                    <span>Very Isolated</span>\n                    <span className=\"font-medium\">{assessment.socialConnections}/10</span>\n                    <span>Very Connected</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"font-semibold text-purple-800 mb-3 block\">My social support includes: (check all that apply)</Label>\n                  <div className=\"space-y-3\">\n                    {[\n                      'Close family relationships',\n                      'Trusted friends I can confide in',\n                      'Regular social activities or groups',\n                      'Work colleagues I connect with',\n                      'Community involvement (clubs, volunteering)',\n                      'Online communities or support groups'\n                    ].map((support, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox id={`support-${index}`} />\n                        <Label htmlFor={`support-${index}`} className=\"text-purple-700 text-sm\">{support}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"font-semibold text-purple-800 mb-3 block\">Social challenges I face: (check if applies)</Label>\n                  <div className=\"space-y-3\">\n                    {[\n                      'Anxiety makes socializing difficult',\n                      'Limited time for social activities',\n                      'Few people I feel close to',\n                      'Difficulty making new connections',\n                      'Prefer to isolate when stressed',\n                      'Feel like a burden to others'\n                    ].map((barrier, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox id={`social-barrier-${index}`} />\n                        <Label htmlFor={`social-barrier-${index}`} className=\"text-purple-700 text-sm\">{barrier}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-green-50 border-green-200\">\n            <CardHeader>\n              <CardTitle className=\"text-green-800 flex items-center gap-2\">\n                <Sun className=\"w-5 h-5\" />\n                Environment & Daily Habits\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"font-semibold text-green-800\">Hours spent on screens daily (excluding work)</Label>\n                  <div className=\"mt-2\">\n                    <Slider\n                      value={[assessment.screenTime]}\n                      onValueChange={(value) => setAssessment(prev => ({...prev, screenTime: value[0]}))}\n                      max={12}\n                      min={1}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-sm text-green-600 mt-1\">\n                      <span>1 hour</span>\n                      <span className=\"font-medium\">{assessment.screenTime} hours</span>\n                      <span>12+ hours</span>\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"font-semibold text-green-800\">Hours spent outdoors daily</Label>\n                  <div className=\"mt-2\">\n                    <Slider\n                      value={[assessment.outdoorTime]}\n                      onValueChange={(value) => setAssessment(prev => ({...prev, outdoorTime: value[0]}))}\n                      max={8}\n                      min={0}\n                      step={0.5}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-sm text-green-600 mt-1\">\n                      <span>0 hours</span>\n                      <span className=\"font-medium\">{assessment.outdoorTime} hours</span>\n                      <span>8+ hours</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"font-semibold text-green-800 mb-3 block\">Hobbies and interests I pursue: (check all that apply)</Label>\n                <div className=\"grid md:grid-cols-3 gap-3\">\n                  {[\n                    'Reading', 'Music (playing/listening)', 'Art/Crafts', 'Cooking/Baking', 'Gardening',\n                    'Photography', 'Writing/Journaling', 'Learning new skills', 'Board games/Puzzles',\n                    'Nature activities', 'Building/DIY projects', 'Collecting'\n                  ].map((hobby, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id={`hobby-${index}`}\n                        checked={assessment.hobbies.includes(hobby)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setAssessment(prev => ({\n                              ...prev, \n                              hobbies: [...prev.hobbies, hobby]\n                            }));\n                          } else {\n                            setAssessment(prev => ({\n                              ...prev,\n                              hobbies: prev.hobbies.filter(h => h !== hobby)\n                            }));\n                          }\n                        }}\n                      />\n                      <Label htmlFor={`hobby-${index}`} className=\"text-green-700 text-sm\">{hobby}</Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Additional Lifestyle Notes</h3>\n            <Textarea\n              placeholder=\"Describe any other lifestyle factors that affect your wellbeing - work patterns, living situation, health conditions, medications, etc.\"\n              value={personalNotes['section1'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section1: e.target.value}))}\n              className=\"min-h-[80px]\"\n            />\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 2,\n      title: \"Evidence-Based Lifestyle Strategies\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-emerald-50 p-6 rounded-lg border-l-4 border-emerald-400\">\n            <h3 className=\"text-xl font-semibold text-emerald-800 mb-3\">Research-Backed Lifestyle Interventions</h3>\n            <p className=\"text-emerald-700 mb-4\">\n              These strategies are based on extensive research and clinical evidence. Small, consistent \n              changes often produce significant improvements in anxiety and overall mental health.\n            </p>\n          </div>\n\n          <div className=\"space-y-8\">\n            {/* Physical Activity Strategies */}\n            <Card className=\"bg-blue-50 border-blue-200\">\n              <CardHeader>\n                <CardTitle className=\"text-blue-800 flex items-center gap-2\">\n                  <Activity className=\"w-6 h-6\" />\n                  Movement & Exercise Strategies\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border border-blue-200\">\n                    <h4 className=\"font-semibold text-blue-800 mb-3\">Starting Small (0-2 days/week currently)</h4>\n                    <ul className=\"text-blue-700 space-y-2 text-sm\">\n                      <li><strong>Week 1-2:</strong> 10-minute daily walks</li>\n                      <li><strong>Week 3-4:</strong> 15-minute walks + 1 active hobby</li>\n                      <li><strong>Week 5-6:</strong> 20-minute activities 3x/week</li>\n                      <li><strong>Goal:</strong> Build habit before intensity</li>\n                      <li><strong>Key:</strong> Choose enjoyable activities</li>\n                    </ul>\n                  </div>\n                  \n                  <div className=\"p-4 bg-white rounded border border-blue-200\">\n                    <h4 className=\"font-semibold text-blue-800 mb-3\">Building On Success (3+ days/week)</h4>\n                    <ul className=\"text-blue-700 space-y-2 text-sm\">\n                      <li><strong>Add variety:</strong> Mix cardio, strength, flexibility</li>\n                      <li><strong>Increase duration:</strong> Aim for 30+ minutes</li>\n                      <li><strong>Social element:</strong> Exercise with others</li>\n                      <li><strong>Outdoor activities:</strong> Double benefits for anxiety</li>\n                      <li><strong>Track progress:</strong> Celebrate improvements</li>\n                    </ul>\n                  </div>\n                </div>\n\n                <Card className=\"bg-blue-100\">\n                  <CardContent className=\"p-4\">\n                    <h4 className=\"font-semibold text-blue-800 mb-3\">Quick Anxiety-Busting Movements</h4>\n                    <div className=\"grid md:grid-cols-3 gap-4\">\n                      <div className=\"text-center\">\n                        <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-2\">\n                          <Clock className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <h5 className=\"font-medium text-blue-800\">5-Minute Reset</h5>\n                        <p className=\"text-blue-700 text-xs\">Jumping jacks, stretches, or dancing to one song</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-2\">\n                          <Activity className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <h5 className=\"font-medium text-blue-800\">Stair Climbing</h5>\n                        <p className=\"text-blue-700 text-xs\">2-3 flights up and down when feeling overwhelmed</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-2\">\n                          <Heart className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <h5 className=\"font-medium text-blue-800\">Mindful Walking</h5>\n                        <p className=\"text-blue-700 text-xs\">Focus on each step and your surroundings</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </CardContent>\n            </Card>\n\n            {/* Nutrition Strategies */}\n            <Card className=\"bg-orange-50 border-orange-200\">\n              <CardHeader>\n                <CardTitle className=\"text-orange-800 flex items-center gap-2\">\n                  <Apple className=\"w-6 h-6\" />\n                  Nutrition for Mental Health\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border border-orange-200\">\n                    <h4 className=\"font-semibold text-orange-800 mb-3\">Brain-Boosting Foods</h4>\n                    <ul className=\"text-orange-700 space-y-2 text-sm\">\n                      <li><strong>Omega-3 rich:</strong> Salmon, walnuts, chia seeds</li>\n                      <li><strong>Magnesium:</strong> Dark leafy greens, nuts, whole grains</li>\n                      <li><strong>B vitamins:</strong> Eggs, legumes, nutritional yeast</li>\n                      <li><strong>Antioxidants:</strong> Berries, dark chocolate, green tea</li>\n                      <li><strong>Probiotics:</strong> Yogurt, kefir, fermented foods</li>\n                    </ul>\n                  </div>\n                  \n                  <div className=\"p-4 bg-white rounded border border-orange-200\">\n                    <h4 className=\"font-semibold text-orange-800 mb-3\">Anxiety-Friendly Eating Patterns</h4>\n                    <ul className=\"text-orange-700 space-y-2 text-sm\">\n                      <li><strong>Regular meals:</strong> Every 3-4 hours to stabilize blood sugar</li>\n                      <li><strong>Protein with each meal:</strong> Supports steady energy</li>\n                      <li><strong>Complex carbs:</strong> Oats, quinoa, sweet potatoes</li>\n                      <li><strong>Limit caffeine:</strong> Especially after 2 PM</li>\n                      <li><strong>Stay hydrated:</strong> Dehydration worsens anxiety</li>\n                    </ul>\n                  </div>\n                </div>\n\n                <Card className=\"bg-orange-100\">\n                  <CardContent className=\"p-4\">\n                    <h4 className=\"font-semibold text-orange-800 mb-3\">Weekly Meal Planning Strategy</h4>\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <h5 className=\"font-medium text-orange-800 mb-2\">Prep Day Approach</h5>\n                        <ul className=\"text-orange-700 text-sm space-y-1\">\n                          <li>• Choose one day for meal prep</li>\n                          <li>• Prepare 2-3 anxiety-friendly recipes</li>\n                          <li>• Wash and chop vegetables</li>\n                          <li>• Cook grains in bulk (brown rice, quinoa)</li>\n                          <li>• Portion snacks (nuts, fruit)</li>\n                        </ul>\n                      </div>\n                      <div>\n                        <h5 className=\"font-medium text-orange-800 mb-2\">Emergency Food Kit</h5>\n                        <ul className=\"text-orange-700 text-sm space-y-1\">\n                          <li>• Canned beans and lentils</li>\n                          <li>• Frozen vegetables and fruits</li>\n                          <li>• Whole grain crackers</li>\n                          <li>• Nut butter and nuts</li>\n                          <li>• Herbal teas (chamomile, passionflower)</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </CardContent>\n            </Card>\n\n            {/* Social Connection Strategies */}\n            <Card className=\"bg-purple-50 border-purple-200\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-800 flex items-center gap-2\">\n                  <Users className=\"w-6 h-6\" />\n                  Building Social Connections\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border border-purple-200\">\n                    <h4 className=\"font-semibold text-purple-800 mb-3\">For Social Anxiety</h4>\n                    <ul className=\"text-purple-700 space-y-2 text-sm\">\n                      <li><strong>Start small:</strong> Brief, low-pressure interactions</li>\n                      <li><strong>Structure helps:</strong> Classes, volunteering, hobby groups</li>\n                      <li><strong>Online first:</strong> Forums or video calls before in-person</li>\n                      <li><strong>Bring a friend:</strong> Less intimidating social situations</li>\n                      <li><strong>Practice self-compassion:</strong> Awkward moments are normal</li>\n                    </ul>\n                  </div>\n                  \n                  <div className=\"p-4 bg-white rounded border border-purple-200\">\n                    <h4 className=\"font-semibold text-purple-800 mb-3\">Strengthening Existing Relationships</h4>\n                    <ul className=\"text-purple-700 space-y-2 text-sm\">\n                      <li><strong>Quality over quantity:</strong> Deepen current connections</li>\n                      <li><strong>Regular check-ins:</strong> Text or call weekly</li>\n                      <li><strong>Share vulnerabilities:</strong> Be authentic about struggles</li>\n                      <li><strong>Offer support:</strong> Listen and be present for others</li>\n                      <li><strong>Create traditions:</strong> Regular walks, coffee dates</li>\n                    </ul>\n                  </div>\n                </div>\n\n                <Card className=\"bg-purple-100\">\n                  <CardContent className=\"p-4\">\n                    <h4 className=\"font-semibold text-purple-800 mb-3\">Low-Pressure Social Activities</h4>\n                    <div className=\"grid md:grid-cols-3 gap-4 text-center\">\n                      <div>\n                        <h5 className=\"font-medium text-purple-800\">Shared Interest Groups</h5>\n                        <p className=\"text-purple-700 text-xs mt-1\">Book clubs, hiking groups, art classes</p>\n                      </div>\n                      <div>\n                        <h5 className=\"font-medium text-purple-800\">Volunteer Work</h5>\n                        <p className=\"text-purple-700 text-xs mt-1\">Animal shelters, community gardens, food banks</p>\n                      </div>\n                      <div>\n                        <h5 className=\"font-medium text-purple-800\">Workplace Connections</h5>\n                        <p className=\"text-purple-700 text-xs mt-1\">Lunch invitations, after-work activities</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </CardContent>\n            </Card>\n\n            {/* Environment & Routine Strategies */}\n            <Card className=\"bg-green-50 border-green-200\">\n              <CardHeader>\n                <CardTitle className=\"text-green-800 flex items-center gap-2\">\n                  <Shield className=\"w-6 h-6\" />\n                  Creating a Supportive Environment\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border border-green-200\">\n                    <h4 className=\"font-semibold text-green-800 mb-3\">Physical Environment</h4>\n                    <ul className=\"text-green-700 space-y-2 text-sm\">\n                      <li><strong>Declutter spaces:</strong> Reduce visual overstimulation</li>\n                      <li><strong>Natural light:</strong> Open curtains, work near windows</li>\n                      <li><strong>Plants and nature:</strong> Indoor plants, nature photos</li>\n                      <li><strong>Comfort zone:</strong> Cozy reading nook or relaxation space</li>\n                      <li><strong>Minimize digital distractions:</strong> Phone-free meals/bedrooms</li>\n                    </ul>\n                  </div>\n                  \n                  <div className=\"p-4 bg-white rounded border border-green-200\">\n                    <h4 className=\"font-semibold text-green-800 mb-3\">Daily Routines</h4>\n                    <ul className=\"text-green-700 space-y-2 text-sm\">\n                      <li><strong>Consistent wake/sleep times:</strong> Supports circadian rhythms</li>\n                      <li><strong>Morning routine:</strong> 15 minutes of calm preparation</li>\n                      <li><strong>Transition rituals:</strong> Signals between work and personal time</li>\n                      <li><strong>Evening wind-down:</strong> Screen-free relaxation time</li>\n                      <li><strong>Weekly planning:</strong> Reduces decision fatigue</li>\n                    </ul>\n                  </div>\n                </div>\n\n                <Card className=\"bg-green-100\">\n                  <CardContent className=\"p-4\">\n                    <h4 className=\"font-semibold text-green-800 mb-3\">Nature Connection Ideas</h4>\n                    <div className=\"grid md:grid-cols-4 gap-4 text-center\">\n                      <div>\n                        <Sun className=\"w-8 h-8 mx-auto mb-2 text-green-600\" />\n                        <h5 className=\"font-medium text-green-800\">Morning Sunlight</h5>\n                        <p className=\"text-green-700 text-xs\">10 minutes within 2 hours of waking</p>\n                      </div>\n                      <div>\n                        <Activity className=\"w-8 h-8 mx-auto mb-2 text-green-600\" />\n                        <h5 className=\"font-medium text-green-800\">Outdoor Movement</h5>\n                        <p className=\"text-green-700 text-xs\">Walk, garden, or exercise outside</p>\n                      </div>\n                      <div>\n                        <Heart className=\"w-8 h-8 mx-auto mb-2 text-green-600\" />\n                        <h5 className=\"font-medium text-green-800\">Mindful Observation</h5>\n                        <p className=\"text-green-700 text-xs\">Watch clouds, birds, or changing seasons</p>\n                      </div>\n                      <div>\n                        <Users className=\"w-8 h-8 mx-auto mb-2 text-green-600\" />\n                        <h5 className=\"font-medium text-green-800\">Outdoor Social Time</h5>\n                        <p className=\"text-green-700 text-xs\">Picnics, outdoor markets, park meetups</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Strategy Planning & Implementation</h3>\n            <Textarea\n              placeholder=\"Which lifestyle strategies resonate most with you? What specific changes would you like to try first? What might make implementation easier or more challenging?\"\n              value={personalNotes['section2'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section2: e.target.value}))}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 3,\n      title: \"Personal Lifestyle Action Plan\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-gradient-to-r from-emerald-50 to-green-50 p-6 rounded-lg border-l-4 border-emerald-400\">\n            <h3 className=\"text-xl font-semibold text-emerald-800 mb-3\">Your Lifestyle Transformation Plan</h3>\n            <p className=\"text-emerald-700\">\n              Based on your assessment and the evidence-based strategies, create a realistic, \n              sustainable plan for improving your lifestyle and mental wellbeing.\n            </p>\n          </div>\n\n          {/* Assessment Summary */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardHeader>\n              <CardTitle className=\"text-blue-800 flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                Your Lifestyle Assessment Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 bg-white rounded border\">\n                  <div className=\"text-2xl font-bold text-blue-800\">{assessment.exerciseFrequency}</div>\n                  <p className=\"text-sm text-blue-600\">Exercise days/week</p>\n                  <p className=\"text-xs text-blue-500\">\n                    {assessment.exerciseFrequency < 3 ? 'Room for improvement' : assessment.exerciseFrequency < 5 ? 'Good foundation' : 'Excellent!'}\n                  </p>\n                </div>\n                <div className=\"text-center p-4 bg-white rounded border\">\n                  <div className=\"text-2xl font-bold text-blue-800\">{assessment.dietQuality}/10</div>\n                  <p className=\"text-sm text-blue-600\">Diet quality rating</p>\n                  <p className=\"text-xs text-blue-500\">\n                    {assessment.dietQuality < 6 ? 'Focus area' : assessment.dietQuality < 8 ? 'Good progress possible' : 'Very good'}\n                  </p>\n                </div>\n                <div className=\"text-center p-4 bg-white rounded border\">\n                  <div className=\"text-2xl font-bold text-blue-800\">{assessment.socialConnections}/10</div>\n                  <p className=\"text-sm text-blue-600\">Social connections</p>\n                  <p className=\"text-xs text-blue-500\">\n                    {assessment.socialConnections < 5 ? 'Priority area' : assessment.socialConnections < 7 ? 'Building well' : 'Strong network'}\n                  </p>\n                </div>\n                <div className=\"text-center p-4 bg-white rounded border\">\n                  <div className=\"text-2xl font-bold text-blue-800\">{assessment.outdoorTime}h</div>\n                  <p className=\"text-sm text-blue-600\">Daily outdoor time</p>\n                  <p className=\"text-xs text-blue-500\">\n                    {assessment.outdoorTime < 1 ? 'Needs attention' : assessment.outdoorTime < 2 ? 'Good start' : 'Excellent!'}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"p-4 bg-white rounded border\">\n                  <h4 className=\"font-semibold text-blue-800 mb-2\">Your Lifestyle Strengths:</h4>\n                  <ul className=\"text-blue-700 text-sm space-y-1\">\n                    {assessment.exerciseTypes.slice(0, 3).map((type, index) => (\n                      <li key={index}>✓ Enjoys {type.toLowerCase()}</li>\n                    ))}\n                    {assessment.hobbies.slice(0, 2).map((hobby, index) => (\n                      <li key={index}>✓ Pursues {hobby.toLowerCase()}</li>\n                    ))}\n                    {assessment.socialConnections > 6 && <li>✓ Strong social connections</li>}\n                    {assessment.dietQuality > 6 && <li>✓ Good nutrition awareness</li>}\n                  </ul>\n                </div>\n                <div className=\"p-4 bg-white rounded border\">\n                  <h4 className=\"font-semibold text-blue-800 mb-2\">Areas of Opportunity:</h4>\n                  <ul className=\"text-blue-700 text-sm space-y-1\">\n                    {assessment.exerciseFrequency < 3 && <li>• Increase physical activity consistency</li>}\n                    {assessment.dietQuality < 7 && <li>• Enhance nutrition quality</li>}\n                    {assessment.socialConnections < 6 && <li>• Build social support network</li>}\n                    {assessment.outdoorTime < 1.5 && <li>• Increase nature exposure</li>}\n                    {assessment.screenTime > 6 && <li>• Reduce excessive screen time</li>}\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* 30-Day Challenge */}\n          <Card className=\"bg-emerald-50 border-emerald-200\">\n            <CardHeader>\n              <CardTitle className=\"text-emerald-800 flex items-center gap-2\">\n                <Target className=\"w-5 h-5\" />\n                30-Day Lifestyle Challenge\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-emerald-700 mb-4\">\n                Choose 3-4 specific goals for the next 30 days. Start small for sustainable change.\n              </p>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold text-emerald-800 mb-3\">Movement & Energy</h4>\n                  <div className=\"space-y-2\">\n                    {[\n                      'Take a 10-minute walk every day',\n                      'Do 5 minutes of morning stretches daily',\n                      'Try 2 new physical activities this month',\n                      'Take stairs instead of elevators when possible',\n                      'Stand and move for 2 minutes every hour'\n                    ].map((goal, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox \n                          id={`movement-${index}`}\n                          checked={personalGoals.includes(goal)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setPersonalGoals(prev => [...prev, goal]);\n                            } else {\n                              setPersonalGoals(prev => prev.filter(g => g !== goal));\n                            }\n                          }}\n                        />\n                        <Label htmlFor={`movement-${index}`} className=\"text-emerald-700 text-sm\">{goal}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-emerald-800 mb-3\">Nutrition & Hydration</h4>\n                  <div className=\"space-y-2\">\n                    {[\n                      'Eat 2 servings of vegetables with lunch and dinner',\n                      'Drink 8 glasses of water daily',\n                      'Plan and prep 3 healthy meals each week',\n                      'Limit caffeine after 2 PM',\n                      'Try 3 new anxiety-reducing foods (salmon, walnuts, etc.)'\n                    ].map((goal, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox \n                          id={`nutrition-${index}`}\n                          checked={personalGoals.includes(goal)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setPersonalGoals(prev => [...prev, goal]);\n                            } else {\n                              setPersonalGoals(prev => prev.filter(g => g !== goal));\n                            }\n                          }}\n                        />\n                        <Label htmlFor={`nutrition-${index}`} className=\"text-emerald-700 text-sm\">{goal}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold text-emerald-800 mb-3\">Social & Connection</h4>\n                  <div className=\"space-y-2\">\n                    {[\n                      'Reach out to one friend/family member weekly',\n                      'Join one new group or activity',\n                      'Have one meaningful conversation each week',\n                      'Practice giving one genuine compliment daily',\n                      'Volunteer for a cause I care about'\n                    ].map((goal, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox \n                          id={`social-${index}`}\n                          checked={personalGoals.includes(goal)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setPersonalGoals(prev => [...prev, goal]);\n                            } else {\n                              setPersonalGoals(prev => prev.filter(g => g !== goal));\n                            }\n                          }}\n                        />\n                        <Label htmlFor={`social-${index}`} className=\"text-emerald-700 text-sm\">{goal}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-emerald-800 mb-3\">Environment & Mindfulness</h4>\n                  <div className=\"space-y-2\">\n                    {[\n                      'Spend 20 minutes outdoors daily',\n                      'Create a clutter-free, calming bedroom',\n                      'Limit recreational screen time to 2 hours/day',\n                      'Practice 5 minutes of mindfulness daily',\n                      'Establish a consistent morning routine'\n                    ].map((goal, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox \n                          id={`environment-${index}`}\n                          checked={personalGoals.includes(goal)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setPersonalGoals(prev => [...prev, goal]);\n                            } else {\n                              setPersonalGoals(prev => prev.filter(g => g !== goal));\n                            }\n                          }}\n                        />\n                        <Label htmlFor={`environment-${index}`} className=\"text-emerald-700 text-sm\">{goal}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Weekly Planning Template */}\n          <Card className=\"bg-purple-50 border-purple-200\">\n            <CardHeader>\n              <CardTitle className=\"text-purple-800 flex items-center gap-2\">\n                <Clock className=\"w-5 h-5\" />\n                Weekly Planning Template\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"p-4 bg-white rounded border border-purple-200\">\n                  <h4 className=\"font-semibold text-purple-800 mb-2\">Week 1-2: Foundation Building</h4>\n                  <ul className=\"text-purple-700 text-sm space-y-1\">\n                    <li>• Focus on 1-2 small, achievable goals</li>\n                    <li>• Track daily progress (checkmarks work well)</li>\n                    <li>• Notice how changes affect your mood</li>\n                    <li>• Be patient with yourself - new habits take time</li>\n                    <li>• Celebrate small wins each day</li>\n                  </ul>\n                </div>\n                <div className=\"p-4 bg-white rounded border border-purple-200\">\n                  <h4 className=\"font-semibold text-purple-800 mb-2\">Week 3-4: Building Momentum</h4>\n                  <ul className=\"text-purple-700 text-sm space-y-1\">\n                    <li>• Add one additional goal if feeling confident</li>\n                    <li>• Identify what's working well and what isn't</li>\n                    <li>• Adjust strategies based on what you've learned</li>\n                    <li>• Involve friends/family in your healthy changes</li>\n                    <li>• Plan for challenges and setbacks</li>\n                  </ul>\n                </div>\n              </div>\n              \n              <div className=\"p-4 bg-white rounded border border-purple-200\">\n                <h4 className=\"font-semibold text-purple-800 mb-3\">Weekly Reflection Questions</h4>\n                <div className=\"grid md:grid-cols-3 gap-4\">\n                  <div>\n                    <h5 className=\"font-medium text-purple-800 mb-1\">Progress</h5>\n                    <ul className=\"text-purple-700 text-xs space-y-1\">\n                      <li>• What went well this week?</li>\n                      <li>• Which goals did I achieve?</li>\n                      <li>• What was easier than expected?</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-purple-800 mb-1\">Challenges</h5>\n                    <ul className=\"text-purple-700 text-xs space-y-1\">\n                      <li>• What obstacles did I encounter?</li>\n                      <li>• Which habits were hardest to maintain?</li>\n                      <li>• What triggered old patterns?</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-purple-800 mb-1\">Adjustments</h5>\n                    <ul className=\"text-purple-700 text-xs space-y-1\">\n                      <li>• How can I modify my approach?</li>\n                      <li>• What support do I need?</li>\n                      <li>• What will I focus on next week?</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Support Resources */}\n          <Card className=\"bg-yellow-50 border-yellow-200\">\n            <CardHeader>\n              <CardTitle className=\"text-yellow-800 flex items-center gap-2\">\n                <Shield className=\"w-5 h-5\" />\n                Support & Resources\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold text-yellow-800 mb-3\">Apps & Tools</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-white rounded border border-yellow-200\">\n                      <p className=\"font-medium text-yellow-800\">Movement Tracking</p>\n                      <p className=\"text-yellow-700 text-sm\">NHS Couch to 5K, Strava, phone step counter</p>\n                    </div>\n                    <div className=\"p-3 bg-white rounded border border-yellow-200\">\n                      <p className=\"font-medium text-yellow-800\">Nutrition Support</p>\n                      <p className=\"text-yellow-700 text-sm\">MyFitnessPal, NHS Eatwell Guide, meal planning apps</p>\n                    </div>\n                    <div className=\"p-3 bg-white rounded border border-yellow-200\">\n                      <p className=\"font-medium text-yellow-800\">Social Connection</p>\n                      <p className=\"text-yellow-700 text-sm\">Meetup.com, local community centers, volunteering platforms</p>\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-yellow-800 mb-3\">Professional Support</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-white rounded border border-yellow-200\">\n                      <p className=\"font-medium text-yellow-800\">GP & NHS Services</p>\n                      <p className=\"text-yellow-700 text-sm\">Discuss lifestyle changes, referrals to specialists</p>\n                    </div>\n                    <div className=\"p-3 bg-white rounded border border-yellow-200\">\n                      <p className=\"font-medium text-yellow-800\">Mental Health Support</p>\n                      <p className=\"text-yellow-700 text-sm\">IAPT services, counseling, peer support groups</p>\n                    </div>\n                    <div className=\"p-3 bg-white rounded border border-yellow-200\">\n                      <p className=\"font-medium text-yellow-800\">Community Resources</p>\n                      <p className=\"text-yellow-700 text-sm\">Libraries, community centers, local sports clubs</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Your Personal Commitment Statement</h3>\n            <Textarea\n              placeholder=\"Write your commitment to yourself. What lifestyle changes are you most excited about? How will you maintain motivation when things get challenging? What support do you need?\"\n              value={personalNotes['section3'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section3: e.target.value}))}\n              className=\"min-h-[120px]\"\n            />\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const markSectionComplete = (sectionId: number) => {\n    if (!completedSections.includes(sectionId)) {\n      setCompletedSections([...completedSections, sectionId]);\n    }\n  };\n\n  const progressPercentage = Math.round((completedSections.length / sections.length) * 100);\n\n  return (\n    <div className=\"max-w-5xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-emerald-600 to-green-700 text-white\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center gap-3 text-3xl\">\n            <Heart className=\"w-10 h-10\" />\n            Lifestyle & Wellbeing Guide\n          </CardTitle>\n          <p className=\"text-emerald-100 text-lg\">\n            Evidence-based lifestyle interventions for mental health and anxiety management\n          </p>\n          <Badge variant=\"secondary\" className=\"bg-white/20 text-white w-fit mx-auto\">\n            Holistic Approach • Personal Assessment • 30-Day Action Plan\n          </Badge>\n        </CardHeader>\n      </Card>\n\n      {/* Progress */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"font-semibold flex items-center gap-2\">\n              <Target className=\"w-5 h-5\" />\n              Learning Progress\n            </h3>\n            <Badge variant=\"outline\">{completedSections.length}/{sections.length} sections completed</Badge>\n          </div>\n          <Progress value={progressPercentage} className=\"mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">{progressPercentage}% complete • Estimated time: 25-30 minutes</p>\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"flex flex-wrap gap-2\">\n        {sections.map((section) => (\n          <Button\n            key={section.id}\n            variant={currentSection === section.id ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setCurrentSection(section.id)}\n            className=\"flex items-center gap-2\"\n          >\n            {completedSections.includes(section.id) && <CheckCircle className=\"w-4 h-4\" />}\n            {section.title}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"w-6 h-6\" />\n            {sections[currentSection].title}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {sections[currentSection].content}\n          \n          <div className=\"flex justify-between pt-6 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentSection(Math.max(0, currentSection - 1))}\n              disabled={currentSection === 0}\n            >\n              Previous Section\n            </Button>\n            \n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => markSectionComplete(currentSection)}\n                disabled={completedSections.includes(currentSection)}\n              >\n                {completedSections.includes(currentSection) ? (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Section Complete\n                  </>\n                ) : (\n                  <>\n                    <PenTool className=\"w-4 h-4 mr-2\" />\n                    Mark Complete\n                  </>\n                )}\n              </Button>\n              \n              <Button\n                onClick={() => setCurrentSection(Math.min(sections.length - 1, currentSection + 1))}\n                disabled={currentSection === sections.length - 1}\n              >\n                Next Section\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Completion Certificate */}\n      {completedSections.length === sections.length && (\n        <Card className=\"bg-gradient-to-r from-emerald-50 to-green-50 border-2 border-emerald-300\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-10 h-10 text-white\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-emerald-800 mb-3\">\n              🌟 Outstanding! You've completed the Lifestyle & Wellbeing guide.\n            </h3>\n            <p className=\"text-emerald-700 text-lg mb-4\">\n              You now have a comprehensive, personalized plan for supporting your mental health through lifestyle changes.\n            </p>\n            <div className=\"bg-white p-4 rounded border border-emerald-200 text-left\">\n              <h4 className=\"font-semibold text-emerald-800 mb-2\">Your Lifestyle Toolkit Now Includes:</h4>\n              <ul className=\"text-emerald-700 space-y-1 text-sm\">\n                <li>✓ Understanding of how lifestyle factors impact mental health</li>\n                <li>✓ Personal assessment of your current lifestyle patterns</li>\n                <li>✓ Evidence-based strategies for movement, nutrition, and social connection</li>\n                <li>✓ 30-day challenge with specific, achievable goals</li>\n                <li>✓ Weekly planning templates and progress tracking tools</li>\n                <li>✓ Resources and support for sustainable lifestyle changes</li>\n              </ul>\n            </div>\n            <p className=\"text-emerald-600 text-sm mt-4\">\n              Remember: Sustainable lifestyle changes take time. Start small, be consistent, and celebrate every positive step forward.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":65833},"client/src/components/LifestyleGuideSimple.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Heart, Activity, Utensils, Users, CheckCircle, ArrowRight, Target } from \"lucide-react\";\n\nexport function LifestyleGuideSimple() {\n  const [currentSection, setCurrentSection] = useState(0);\n  const [completedSections, setCompletedSections] = useState<number[]>([]);\n\n  const sections = [\n    {\n      id: 0,\n      title: \"Exercise & Movement\",\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-lg\">\n            Regular physical activity is one of the most effective natural treatments for anxiety. \n            It doesn't have to be intense - even gentle movement helps.\n          </p>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"p-4 bg-green-50 rounded-lg border-l-4 border-green-400\">\n              <h4 className=\"font-semibold text-green-800 mb-2\">How Exercise Helps Anxiety</h4>\n              <ul className=\"text-green-700 space-y-1\">\n                <li>• Releases endorphins (natural mood lifters)</li>\n                <li>• Reduces stress hormones like cortisol</li>\n                <li>• Improves sleep quality</li>\n                <li>• Provides healthy distraction</li>\n                <li>• Builds confidence and self-esteem</li>\n                <li>• Regulates breathing and heart rate</li>\n              </ul>\n            </div>\n            <div className=\"p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400\">\n              <h4 className=\"font-semibold text-blue-800 mb-2\">Getting Started</h4>\n              <ul className=\"text-blue-700 space-y-1\">\n                <li>• Start with just 5-10 minutes daily</li>\n                <li>• Choose activities you enjoy</li>\n                <li>• Walking counts as exercise</li>\n                <li>• Build up gradually</li>\n                <li>• Consistency matters more than intensity</li>\n                <li>• Listen to your body</li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold text-lg\">Exercise Options by Intensity</h4>\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <Card className=\"bg-green-50\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg text-green-800\">Gentle</CardTitle>\n                  <p className=\"text-sm text-green-600\">Perfect for beginners or anxious days</p>\n                </CardHeader>\n                <CardContent className=\"text-green-700\">\n                  <ul className=\"space-y-1\">\n                    <li>• Walking in nature</li>\n                    <li>• Gentle yoga</li>\n                    <li>• Stretching</li>\n                    <li>• Tai chi</li>\n                    <li>• Light gardening</li>\n                  </ul>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-blue-50\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg text-blue-800\">Moderate</CardTitle>\n                  <p className=\"text-sm text-blue-600\">Build up to this level</p>\n                </CardHeader>\n                <CardContent className=\"text-blue-700\">\n                  <ul className=\"space-y-1\">\n                    <li>• Brisk walking</li>\n                    <li>• Swimming</li>\n                    <li>• Cycling</li>\n                    <li>• Dancing</li>\n                    <li>• Strength training</li>\n                  </ul>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-purple-50\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg text-purple-800\">Vigorous</CardTitle>\n                  <p className=\"text-sm text-purple-600\">For experienced exercisers</p>\n                </CardHeader>\n                <CardContent className=\"text-purple-700\">\n                  <ul className=\"space-y-1\">\n                    <li>• Running</li>\n                    <li>• High-intensity intervals</li>\n                    <li>• Competitive sports</li>\n                    <li>• Rock climbing</li>\n                    <li>• Martial arts</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 1,\n      title: \"Nutrition & Anxiety\",\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-lg\">\n            What you eat can significantly impact your anxiety levels. Some foods help calm the mind, \n            while others can increase anxiety symptoms.\n          </p>\n          \n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"p-4 bg-green-50 rounded-lg border-l-4 border-green-400\">\n              <h4 className=\"font-semibold text-green-800 mb-3 flex items-center gap-2\">\n                <Utensils className=\"w-5 h-5\" />\n                Anxiety-Calming Foods\n              </h4>\n              <div className=\"space-y-3\">\n                <div>\n                  <h5 className=\"font-medium text-green-700 mb-1\">Complex Carbohydrates</h5>\n                  <p className=\"text-green-600 text-sm mb-1\">Boost serotonin production</p>\n                  <p className=\"text-green-600 text-sm\">Oats, quinoa, sweet potatoes, brown rice</p>\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-green-700 mb-1\">Omega-3 Rich Foods</h5>\n                  <p className=\"text-green-600 text-sm mb-1\">Reduce inflammation and stress</p>\n                  <p className=\"text-green-600 text-sm\">Salmon, walnuts, chia seeds, flaxseed</p>\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-green-700 mb-1\">Magnesium Sources</h5>\n                  <p className=\"text-green-600 text-sm mb-1\">Natural muscle relaxant</p>\n                  <p className=\"text-green-600 text-sm\">Dark leafy greens, almonds, avocado</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"p-4 bg-red-50 rounded-lg border-l-4 border-red-400\">\n              <h4 className=\"font-semibold text-red-800 mb-3\">Foods to Limit</h4>\n              <div className=\"space-y-3\">\n                <div>\n                  <h5 className=\"font-medium text-red-700 mb-1\">Caffeine</h5>\n                  <p className=\"text-red-600 text-sm\">Can trigger anxiety and panic attacks</p>\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-red-700 mb-1\">Sugar & Refined Carbs</h5>\n                  <p className=\"text-red-600 text-sm\">Cause blood sugar spikes and crashes</p>\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-red-700 mb-1\">Alcohol</h5>\n                  <p className=\"text-red-600 text-sm\">Disrupts sleep and can worsen anxiety</p>\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-red-700 mb-1\">Processed Foods</h5>\n                  <p className=\"text-red-600 text-sm\">High in additives and preservatives</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h4 className=\"font-semibold text-blue-800 mb-3\">Practical Tips</h4>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <ul className=\"text-blue-700 space-y-2\">\n                <li>• Eat regular, balanced meals</li>\n                <li>• Stay hydrated throughout the day</li>\n                <li>• Don't skip breakfast</li>\n                <li>• Limit caffeine after 2 PM</li>\n              </ul>\n              <ul className=\"text-blue-700 space-y-2\">\n                <li>• Keep healthy snacks on hand</li>\n                <li>• Practice mindful eating</li>\n                <li>• Read food labels carefully</li>\n                <li>• Consider a food mood diary</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 2,\n      title: \"Social Connection & Support\",\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-lg\">\n            Strong social connections are crucial for mental health. They provide emotional support, \n            reduce isolation, and help put problems in perspective.\n          </p>\n          \n          <div className=\"space-y-6\">\n            <div className=\"p-4 bg-purple-50 rounded-lg border-l-4 border-purple-400\">\n              <h4 className=\"font-semibold text-purple-800 mb-3 flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                Why Social Support Matters\n              </h4>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <ul className=\"text-purple-700 space-y-2\">\n                  <li>• Reduces stress and anxiety levels</li>\n                  <li>• Provides different perspectives</li>\n                  <li>• Offers emotional validation</li>\n                  <li>• Creates sense of belonging</li>\n                </ul>\n                <ul className=\"text-purple-700 space-y-2\">\n                  <li>• Encourages healthy behaviors</li>\n                  <li>• Provides practical help</li>\n                  <li>• Improves self-esteem</li>\n                  <li>• Reduces feelings of isolation</li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <Card className=\"bg-green-50\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg text-green-800\">Building Your Support Network</CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-green-700\">\n                  <ul className=\"space-y-2\">\n                    <li>• Nurture existing relationships</li>\n                    <li>• Join clubs or groups with shared interests</li>\n                    <li>• Volunteer for causes you care about</li>\n                    <li>• Take classes or workshops</li>\n                    <li>• Use technology to stay connected</li>\n                    <li>• Be open to new friendships</li>\n                  </ul>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-orange-50\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg text-orange-800\">Communication Tips</CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-orange-700\">\n                  <ul className=\"space-y-2\">\n                    <li>• Be honest about your struggles</li>\n                    <li>• Ask for specific help when needed</li>\n                    <li>• Listen actively to others</li>\n                    <li>• Express gratitude regularly</li>\n                    <li>• Set healthy boundaries</li>\n                    <li>• Practice empathy and understanding</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"bg-yellow-50 p-4 rounded-lg border-l-4 border-yellow-400\">\n              <h4 className=\"font-semibold text-yellow-800 mb-3\">Professional Support Options</h4>\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <div>\n                  <h5 className=\"font-medium text-yellow-700 mb-2\">Therapy</h5>\n                  <ul className=\"text-yellow-600 text-sm space-y-1\">\n                    <li>• Cognitive Behavioral Therapy (CBT)</li>\n                    <li>• Counselling</li>\n                    <li>• Group therapy</li>\n                    <li>• Online therapy</li>\n                  </ul>\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-yellow-700 mb-2\">NHS Services</h5>\n                  <ul className=\"text-yellow-600 text-sm space-y-1\">\n                    <li>• GP consultation</li>\n                    <li>• IAPT services</li>\n                    <li>• Mental health teams</li>\n                    <li>• Crisis support</li>\n                  </ul>\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-yellow-700 mb-2\">Support Groups</h5>\n                  <ul className=\"text-yellow-600 text-sm space-y-1\">\n                    <li>• Anxiety UK</li>\n                    <li>• Mind local groups</li>\n                    <li>• Online communities</li>\n                    <li>• Peer support groups</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const markSectionComplete = (sectionId: number) => {\n    if (!completedSections.includes(sectionId)) {\n      setCompletedSections([...completedSections, sectionId]);\n    }\n  };\n\n  const progressPercentage = Math.round((completedSections.length / sections.length) * 100);\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-green-500 to-teal-600 text-white\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-3 text-2xl\">\n            <Heart className=\"w-8 h-8\" />\n            Lifestyle & Wellbeing Guide\n          </CardTitle>\n          <p className=\"text-green-100 text-lg\">\n            Discover how exercise, nutrition, and social connections can help manage anxiety\n          </p>\n        </CardHeader>\n      </Card>\n\n      {/* Progress */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"font-semibold\">Your Progress</h3>\n            <Badge variant=\"secondary\">{completedSections.length}/{sections.length} completed</Badge>\n          </div>\n          <Progress value={progressPercentage} className=\"mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">{progressPercentage}% complete</p>\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"flex flex-wrap gap-2\">\n        {sections.map((section) => (\n          <Button\n            key={section.id}\n            variant={currentSection === section.id ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setCurrentSection(section.id)}\n            className=\"flex items-center gap-2\"\n          >\n            {completedSections.includes(section.id) && <CheckCircle className=\"w-4 h-4\" />}\n            {section.title}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"w-5 h-5\" />\n            {sections[currentSection].title}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {sections[currentSection].content}\n          \n          <div className=\"flex justify-between pt-6 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentSection(Math.max(0, currentSection - 1))}\n              disabled={currentSection === 0}\n            >\n              Previous\n            </Button>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => markSectionComplete(currentSection)}\n                disabled={completedSections.includes(currentSection)}\n              >\n                {completedSections.includes(currentSection) ? (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Completed\n                  </>\n                ) : (\n                  \"Mark Complete\"\n                )}\n              </Button>\n              \n              <Button\n                onClick={() => setCurrentSection(Math.min(sections.length - 1, currentSection + 1))}\n                disabled={currentSection === sections.length - 1}\n              >\n                Next\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Completion Message */}\n      {completedSections.length === sections.length && (\n        <Card className=\"bg-green-50 border-green-200\">\n          <CardContent className=\"p-6 text-center\">\n            <CheckCircle className=\"w-12 h-12 text-green-600 mx-auto mb-3\" />\n            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\n              Outstanding! You've completed the Lifestyle & Wellbeing guide.\n            </h3>\n            <p className=\"text-green-700\">\n              You now have a comprehensive toolkit for supporting your mental health through lifestyle changes. \n              Remember, small consistent changes lead to big improvements over time.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":17251},"client/src/components/MoodTracker.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { \n  Smile,\n  Frown,\n  Meh,\n  Heart,\n  Brain,\n  Zap,\n  Moon,\n  Sun,\n  TrendingUp,\n  TrendingDown,\n  Activity,\n  Calendar as CalendarIcon,\n  Download,\n  Plus,\n  BarChart3\n} from \"lucide-react\";\n\ninterface MoodEntry {\n  id: string;\n  date: Date;\n  mood: number;\n  energy: number;\n  anxiety: number;\n  sleep: number;\n  emotions: string[];\n  activities: string[];\n  thoughts: string;\n  gratitude: string[];\n  challenges: string;\n  wins: string;\n  notes: string;\n}\n\nexport function MoodTracker() {\n  const [entries, setEntries] = useState<MoodEntry[]>([]);\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [currentEntry, setCurrentEntry] = useState<Partial<MoodEntry>>({\n    mood: 5,\n    energy: 5,\n    anxiety: 3,\n    sleep: 7,\n    emotions: [],\n    activities: [],\n    thoughts: \"\",\n    gratitude: [\"\"],\n    challenges: \"\",\n    wins: \"\",\n    notes: \"\"\n  });\n\n  const [newEmotion, setNewEmotion] = useState(\"\");\n  const [newActivity, setNewActivity] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"daily\");\n\n  const emotionOptions = [\n    { name: \"Happy\", color: \"bg-yellow-400\", textColor: \"text-yellow-800\" },\n    { name: \"Content\", color: \"bg-green-400\", textColor: \"text-green-800\" },\n    { name: \"Excited\", color: \"bg-orange-400\", textColor: \"text-orange-800\" },\n    { name: \"Calm\", color: \"bg-blue-400\", textColor: \"text-blue-800\" },\n    { name: \"Anxious\", color: \"bg-red-400\", textColor: \"text-red-800\" },\n    { name: \"Sad\", color: \"bg-gray-400\", textColor: \"text-gray-800\" },\n    { name: \"Angry\", color: \"bg-red-600\", textColor: \"text-red-100\" },\n    { name: \"Frustrated\", color: \"bg-purple-400\", textColor: \"text-purple-800\" },\n    { name: \"Overwhelmed\", color: \"bg-red-500\", textColor: \"text-red-100\" },\n    { name: \"Grateful\", color: \"bg-pink-400\", textColor: \"text-pink-800\" },\n    { name: \"Hopeful\", color: \"bg-cyan-400\", textColor: \"text-cyan-800\" },\n    { name: \"Lonely\", color: \"bg-gray-500\", textColor: \"text-gray-100\" },\n    { name: \"Proud\", color: \"bg-indigo-400\", textColor: \"text-indigo-800\" },\n    { name: \"Confused\", color: \"bg-purple-300\", textColor: \"text-purple-800\" },\n    { name: \"Peaceful\", color: \"bg-green-300\", textColor: \"text-green-800\" }\n  ];\n\n  const activityOptions = [\n    \"Exercise/Movement\", \"Meditation\", \"Reading\", \"Work/Study\", \"Social Time\",\n    \"Nature/Outdoors\", \"Creative Activity\", \"Cooking\", \"Cleaning\", \"Rest/Nap\",\n    \"Therapy/Counseling\", \"Medical Appointment\", \"Shopping\", \"Entertainment\",\n    \"Self-Care\", \"Journaling\", \"Music\", \"Gaming\", \"Travel\", \"Family Time\"\n  ];\n\n  const getMoodIcon = (mood: number) => {\n    if (mood >= 8) return <Smile className=\"w-6 h-6 text-green-600\" />;\n    if (mood >= 6) return <Meh className=\"w-6 h-6 text-yellow-600\" />;\n    return <Frown className=\"w-6 h-6 text-red-600\" />;\n  };\n\n  const getMoodColor = (mood: number) => {\n    if (mood >= 8) return \"bg-green-500\";\n    if (mood >= 6) return \"bg-yellow-500\";\n    if (mood >= 4) return \"bg-orange-500\";\n    return \"bg-red-500\";\n  };\n\n  const toggleEmotion = (emotion: string) => {\n    setCurrentEntry(prev => ({\n      ...prev,\n      emotions: prev.emotions?.includes(emotion)\n        ? prev.emotions.filter(e => e !== emotion)\n        : [...(prev.emotions || []), emotion]\n    }));\n  };\n\n  const addCustomEmotion = () => {\n    if (newEmotion.trim()) {\n      toggleEmotion(newEmotion.trim());\n      setNewEmotion(\"\");\n    }\n  };\n\n  const toggleActivity = (activity: string) => {\n    setCurrentEntry(prev => ({\n      ...prev,\n      activities: prev.activities?.includes(activity)\n        ? prev.activities.filter(a => a !== activity)\n        : [...(prev.activities || []), activity]\n    }));\n  };\n\n  const addCustomActivity = () => {\n    if (newActivity.trim()) {\n      toggleActivity(newActivity.trim());\n      setNewActivity(\"\");\n    }\n  };\n\n  const addGratitudeItem = () => {\n    setCurrentEntry(prev => ({\n      ...prev,\n      gratitude: [...(prev.gratitude || []), \"\"]\n    }));\n  };\n\n  const updateGratitudeItem = (index: number, value: string) => {\n    setCurrentEntry(prev => ({\n      ...prev,\n      gratitude: prev.gratitude?.map((item, i) => i === index ? value : item) || []\n    }));\n  };\n\n  const removeGratitudeItem = (index: number) => {\n    setCurrentEntry(prev => ({\n      ...prev,\n      gratitude: prev.gratitude?.filter((_, i) => i !== index) || []\n    }));\n  };\n\n  const saveEntry = () => {\n    const entry: MoodEntry = {\n      id: `${selectedDate.toISOString().split('T')[0]}-${Date.now()}`,\n      date: selectedDate,\n      mood: currentEntry.mood || 5,\n      energy: currentEntry.energy || 5,\n      anxiety: currentEntry.anxiety || 3,\n      sleep: currentEntry.sleep || 7,\n      emotions: currentEntry.emotions || [],\n      activities: currentEntry.activities || [],\n      thoughts: currentEntry.thoughts || \"\",\n      gratitude: (currentEntry.gratitude || []).filter(item => item.trim()),\n      challenges: currentEntry.challenges || \"\",\n      wins: currentEntry.wins || \"\",\n      notes: currentEntry.notes || \"\"\n    };\n\n    setEntries(prev => {\n      const filtered = prev.filter(e => e.date.toDateString() !== selectedDate.toDateString());\n      return [entry, ...filtered].sort((a, b) => b.date.getTime() - a.date.getTime());\n    });\n\n    // Reset form\n    setCurrentEntry({\n      mood: 5,\n      energy: 5,\n      anxiety: 3,\n      sleep: 7,\n      emotions: [],\n      activities: [],\n      thoughts: \"\",\n      gratitude: [\"\"],\n      challenges: \"\",\n      wins: \"\",\n      notes: \"\"\n    });\n  };\n\n  const loadEntryForDate = (date: Date) => {\n    const existing = entries.find(e => e.date.toDateString() === date.toDateString());\n    if (existing) {\n      setCurrentEntry({\n        mood: existing.mood,\n        energy: existing.energy,\n        anxiety: existing.anxiety,\n        sleep: existing.sleep,\n        emotions: existing.emotions,\n        activities: existing.activities,\n        thoughts: existing.thoughts,\n        gratitude: existing.gratitude.length > 0 ? existing.gratitude : [\"\"],\n        challenges: existing.challenges,\n        wins: existing.wins,\n        notes: existing.notes\n      });\n    }\n  };\n\n  const getAverageForPeriod = (days: number) => {\n    const cutoff = new Date();\n    cutoff.setDate(cutoff.getDate() - days);\n    const recentEntries = entries.filter(e => e.date >= cutoff);\n    \n    if (recentEntries.length === 0) return null;\n    \n    return {\n      mood: Math.round(recentEntries.reduce((sum, e) => sum + e.mood, 0) / recentEntries.length * 10) / 10,\n      energy: Math.round(recentEntries.reduce((sum, e) => sum + e.energy, 0) / recentEntries.length * 10) / 10,\n      anxiety: Math.round(recentEntries.reduce((sum, e) => sum + e.anxiety, 0) / recentEntries.length * 10) / 10,\n      sleep: Math.round(recentEntries.reduce((sum, e) => sum + e.sleep, 0) / recentEntries.length * 10) / 10,\n      count: recentEntries.length\n    };\n  };\n\n  const exportData = () => {\n    const exportData = {\n      entries,\n      exportDate: new Date().toISOString(),\n      summary: {\n        totalEntries: entries.length,\n        dateRange: entries.length > 0 ? {\n          start: entries[entries.length - 1].date,\n          end: entries[0].date\n        } : null,\n        averages: getAverageForPeriod(30)\n      }\n    };\n\n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `mood-tracker-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-gradient-to-br from-pink-50 to-purple-50 border-pink-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Heart className=\"w-5 h-5 text-pink-600\" />\n            Interactive Mood Tracker\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Track your daily mood, emotions, and wellbeing patterns over time\n          </p>\n        </CardHeader>\n      </Card>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"daily\">Daily Entry</TabsTrigger>\n          <TabsTrigger value=\"calendar\">Calendar</TabsTrigger>\n          <TabsTrigger value=\"trends\">Trends</TabsTrigger>\n          <TabsTrigger value=\"history\">History</TabsTrigger>\n        </TabsList>\n\n        {/* Daily Entry Tab */}\n        <TabsContent value=\"daily\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CalendarIcon className=\"w-5 h-5\" />\n                  Daily Mood Entry\n                </CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"secondary\">\n                    {selectedDate.toLocaleDateString()}\n                  </Badge>\n                  <input\n                    type=\"date\"\n                    value={selectedDate.toISOString().split('T')[0]}\n                    onChange={(e) => {\n                      const newDate = new Date(e.target.value);\n                      setSelectedDate(newDate);\n                      loadEntryForDate(newDate);\n                    }}\n                    className=\"px-3 py-1 border rounded-md text-sm\"\n                    data-testid=\"date-picker\"\n                  />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              {/* Core Metrics */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"flex items-center gap-2 mb-3\">\n                    <Heart className=\"w-4 h-4\" />\n                    Overall Mood (1-10)\n                  </Label>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm w-12\">Terrible</span>\n                      <Slider\n                        value={[currentEntry.mood || 5]}\n                        onValueChange={([value]) => setCurrentEntry(prev => ({ ...prev, mood: value }))}\n                        max={10}\n                        min={1}\n                        step={1}\n                        className=\"flex-1\"\n                        data-testid=\"slider-mood\"\n                      />\n                      <span className=\"text-sm w-12\">Amazing</span>\n                    </div>\n                    <div className=\"flex items-center justify-center gap-3\">\n                      {getMoodIcon(currentEntry.mood || 5)}\n                      <div className={`w-8 h-8 rounded-full ${getMoodColor(currentEntry.mood || 5)} text-white font-bold flex items-center justify-center`}>\n                        {currentEntry.mood}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"flex items-center gap-2 mb-3\">\n                    <Zap className=\"w-4 h-4\" />\n                    Energy Level (1-10)\n                  </Label>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm w-12\">Drained</span>\n                      <Slider\n                        value={[currentEntry.energy || 5]}\n                        onValueChange={([value]) => setCurrentEntry(prev => ({ ...prev, energy: value }))}\n                        max={10}\n                        min={1}\n                        step={1}\n                        className=\"flex-1\"\n                        data-testid=\"slider-energy\"\n                      />\n                      <span className=\"text-sm w-12\">Energized</span>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-blue-500 text-white font-bold flex items-center justify-center mx-auto\">\n                        {currentEntry.energy}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"flex items-center gap-2 mb-3\">\n                    <Brain className=\"w-4 h-4\" />\n                    Anxiety Level (1-10)\n                  </Label>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm w-8\">Calm</span>\n                      <Slider\n                        value={[currentEntry.anxiety || 3]}\n                        onValueChange={([value]) => setCurrentEntry(prev => ({ ...prev, anxiety: value }))}\n                        max={10}\n                        min={1}\n                        step={1}\n                        className=\"flex-1\"\n                        data-testid=\"slider-anxiety\"\n                      />\n                      <span className=\"text-sm w-8\">Anxious</span>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-red-500 text-white font-bold flex items-center justify-center mx-auto\">\n                        {currentEntry.anxiety}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"flex items-center gap-2 mb-3\">\n                    <Moon className=\"w-4 h-4\" />\n                    Sleep Quality (1-10)\n                  </Label>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm w-8\">Poor</span>\n                      <Slider\n                        value={[currentEntry.sleep || 7]}\n                        onValueChange={([value]) => setCurrentEntry(prev => ({ ...prev, sleep: value }))}\n                        max={10}\n                        min={1}\n                        step={1}\n                        className=\"flex-1\"\n                        data-testid=\"slider-sleep\"\n                      />\n                      <span className=\"text-sm w-12\">Excellent</span>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-indigo-500 text-white font-bold flex items-center justify-center mx-auto\">\n                        {currentEntry.sleep}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Emotions */}\n              <div>\n                <Label className=\"text-base font-semibold mb-4 block\">Emotions I Felt Today</Label>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2\">\n                    {emotionOptions.map((emotion) => (\n                      <Button\n                        key={emotion.name}\n                        variant={currentEntry.emotions?.includes(emotion.name) ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => toggleEmotion(emotion.name)}\n                        className={currentEntry.emotions?.includes(emotion.name) ? \n                          `${emotion.color} ${emotion.textColor} border-0` : \n                          \"\"\n                        }\n                        data-testid={`emotion-${emotion.name.toLowerCase()}`}\n                      >\n                        {emotion.name}\n                      </Button>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Add custom emotion...\"\n                      value={newEmotion}\n                      onChange={(e) => setNewEmotion(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && addCustomEmotion()}\n                      data-testid=\"input-custom-emotion\"\n                    />\n                    <Button onClick={addCustomEmotion} size=\"sm\" data-testid=\"button-add-emotion\">\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Activities */}\n              <div>\n                <Label className=\"text-base font-semibold mb-4 block\">Activities & Experiences</Label>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n                    {activityOptions.map((activity) => (\n                      <Button\n                        key={activity}\n                        variant={currentEntry.activities?.includes(activity) ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => toggleActivity(activity)}\n                        className=\"text-xs justify-start\"\n                        data-testid={`activity-${activity.toLowerCase().replace(/[^a-z0-9]/g, '-')}`}\n                      >\n                        {activity}\n                      </Button>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Add custom activity...\"\n                      value={newActivity}\n                      onChange={(e) => setNewActivity(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && addCustomActivity()}\n                      data-testid=\"input-custom-activity\"\n                    />\n                    <Button onClick={addCustomActivity} size=\"sm\" data-testid=\"button-add-activity\">\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Thoughts & Reflections */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"thoughts\" className=\"text-base font-semibold\">Key Thoughts Today</Label>\n                  <Textarea\n                    id=\"thoughts\"\n                    placeholder=\"What thoughts went through your mind today? Any patterns or themes?\"\n                    value={currentEntry.thoughts}\n                    onChange={(e) => setCurrentEntry(prev => ({ ...prev, thoughts: e.target.value }))}\n                    className=\"mt-2\"\n                    rows={4}\n                    data-testid=\"textarea-thoughts\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"challenges\" className=\"text-base font-semibold\">Today's Challenges</Label>\n                  <Textarea\n                    id=\"challenges\"\n                    placeholder=\"What was difficult today? How did you handle it?\"\n                    value={currentEntry.challenges}\n                    onChange={(e) => setCurrentEntry(prev => ({ ...prev, challenges: e.target.value }))}\n                    className=\"mt-2\"\n                    rows={4}\n                    data-testid=\"textarea-challenges\"\n                  />\n                </div>\n              </div>\n\n              {/* Gratitude & Wins */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <Label className=\"text-base font-semibold\">Gratitude List</Label>\n                    <Button onClick={addGratitudeItem} size=\"sm\" variant=\"outline\" data-testid=\"button-add-gratitude\">\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {(currentEntry.gratitude || [\"\"]).map((item, index) => (\n                      <div key={index} className=\"flex gap-2\">\n                        <Input\n                          placeholder={`Something you're grateful for #${index + 1}...`}\n                          value={item}\n                          onChange={(e) => updateGratitudeItem(index, e.target.value)}\n                          data-testid={`input-gratitude-${index}`}\n                        />\n                        {index > 0 && (\n                          <Button\n                            onClick={() => removeGratitudeItem(index)}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"px-2\"\n                          >\n                            ×\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"wins\" className=\"text-base font-semibold\">Today's Wins</Label>\n                  <Textarea\n                    id=\"wins\"\n                    placeholder=\"What went well today? Any accomplishments, big or small?\"\n                    value={currentEntry.wins}\n                    onChange={(e) => setCurrentEntry(prev => ({ ...prev, wins: e.target.value }))}\n                    className=\"mt-2\"\n                    rows={4}\n                    data-testid=\"textarea-wins\"\n                  />\n                </div>\n              </div>\n\n              {/* Additional Notes */}\n              <div>\n                <Label htmlFor=\"notes\" className=\"text-base font-semibold\">Additional Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  placeholder=\"Anything else you'd like to remember about today?\"\n                  value={currentEntry.notes}\n                  onChange={(e) => setCurrentEntry(prev => ({ ...prev, notes: e.target.value }))}\n                  className=\"mt-2\"\n                  rows={3}\n                  data-testid=\"textarea-notes\"\n                />\n              </div>\n\n              {/* Save Button */}\n              <div className=\"flex justify-center pt-4\">\n                <Button onClick={saveEntry} className=\"px-8\" data-testid=\"button-save-entry\">\n                  Save Today's Entry\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Calendar Tab */}\n        <TabsContent value=\"calendar\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Mood Calendar</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Click on a date to view or edit that day's entry\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex justify-center\">\n                <Calendar\n                  mode=\"single\"\n                  selected={selectedDate}\n                  onSelect={(date) => {\n                    if (date) {\n                      setSelectedDate(date);\n                      loadEntryForDate(date);\n                      setActiveTab(\"daily\");\n                    }\n                  }}\n                  className=\"rounded-md border\"\n                  modifiers={{\n                    hasEntry: (date) => entries.some(e => e.date.toDateString() === date.toDateString()),\n                    highMood: (date) => {\n                      const entry = entries.find(e => e.date.toDateString() === date.toDateString());\n                      return entry ? entry.mood >= 8 : false;\n                    },\n                    lowMood: (date) => {\n                      const entry = entries.find(e => e.date.toDateString() === date.toDateString());\n                      return entry ? entry.mood <= 4 : false;\n                    }\n                  }}\n                  modifiersStyles={{\n                    hasEntry: { fontWeight: 'bold' },\n                    highMood: { backgroundColor: '#22c55e', color: 'white' },\n                    lowMood: { backgroundColor: '#ef4444', color: 'white' }\n                  }}\n                />\n              </div>\n              \n              <div className=\"flex justify-center gap-4 mt-4 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                  <span>Good mood (8+)</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-red-500 rounded\"></div>\n                  <span>Difficult mood (≤4)</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-gray-800 rounded\"></div>\n                  <span>Entry exists</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Trends Tab */}\n        <TabsContent value=\"trends\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {[7, 14, 30].map(days => {\n              const stats = getAverageForPeriod(days);\n              return (\n                <Card key={days}>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Last {days} Days</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {stats ? (\n                      <div className=\"space-y-4\">\n                        <div className=\"text-center\">\n                          <Badge variant=\"secondary\">{stats.count} entries</Badge>\n                        </div>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-sm\">Avg Mood:</span>\n                            <div className=\"flex items-center gap-2\">\n                              <div className={`w-6 h-6 rounded-full ${getMoodColor(stats.mood)} text-white text-sm font-bold flex items-center justify-center`}>\n                                {stats.mood}\n                              </div>\n                              {getMoodIcon(stats.mood)}\n                            </div>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">Avg Energy:</span>\n                            <span className=\"font-medium\">{stats.energy}/10</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">Avg Anxiety:</span>\n                            <span className=\"font-medium\">{stats.anxiety}/10</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">Avg Sleep:</span>\n                            <span className=\"font-medium\">{stats.sleep}/10</span>\n                          </div>\n                        </div>\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground text-center\">\n                        No entries in this period\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Mood Patterns & Insights\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {entries.length >= 7 ? (\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium text-blue-800 mb-2\">Most Common Emotions</h4>\n                      <div className=\"space-y-1\">\n                        {Object.entries(\n                          entries.reduce((acc: Record<string, number>, entry) => {\n                            entry.emotions.forEach(emotion => {\n                              acc[emotion] = (acc[emotion] || 0) + 1;\n                            });\n                            return acc;\n                          }, {})\n                        )\n                        .sort(([,a], [,b]) => b - a)\n                        .slice(0, 5)\n                        .map(([emotion, count]) => (\n                          <div key={emotion} className=\"flex justify-between text-sm\">\n                            <span>{emotion}</span>\n                            <Badge variant=\"secondary\">{count}</Badge>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-green-50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium text-green-800 mb-2\">Most Frequent Activities</h4>\n                      <div className=\"space-y-1\">\n                        {Object.entries(\n                          entries.reduce((acc: Record<string, number>, entry) => {\n                            entry.activities.forEach(activity => {\n                              acc[activity] = (acc[activity] || 0) + 1;\n                            });\n                            return acc;\n                          }, {})\n                        )\n                        .sort(([,a], [,b]) => b - a)\n                        .slice(0, 5)\n                        .map(([activity, count]) => (\n                          <div key={activity} className=\"flex justify-between text-sm\">\n                            <span>{activity}</span>\n                            <Badge variant=\"secondary\">{count}</Badge>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <p className=\"text-center text-muted-foreground\">\n                  Track your mood for at least 7 days to see patterns and insights.\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* History Tab */}\n        <TabsContent value=\"history\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Mood History</CardTitle>\n                {entries.length > 0 && (\n                  <Button onClick={exportData} variant=\"outline\" className=\"gap-2\">\n                    <Download className=\"w-4 h-4\" />\n                    Export Data\n                  </Button>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent>\n              {entries.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Activity className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground/50\" />\n                  <p>No mood entries yet.</p>\n                  <p className=\"text-sm\">Start tracking to see your history here.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {entries.slice(0, 10).map((entry) => (\n                    <Card key={entry.id} className=\"border-l-4 border-l-blue-400\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h4 className=\"font-medium flex items-center gap-2\">\n                            {getMoodIcon(entry.mood)}\n                            {entry.date.toLocaleDateString()}\n                          </h4>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"outline\">Mood: {entry.mood}/10</Badge>\n                            <Badge variant=\"outline\">Energy: {entry.energy}/10</Badge>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <strong>Emotions:</strong> {entry.emotions.join(\", \") || \"None recorded\"}\n                          </div>\n                          <div>\n                            <strong>Activities:</strong> {entry.activities.slice(0, 3).join(\", \")}\n                            {entry.activities.length > 3 && `... +${entry.activities.length - 3} more`}\n                          </div>\n                          {entry.thoughts && (\n                            <div className=\"md:col-span-2\">\n                              <strong>Thoughts:</strong> {entry.thoughts.substring(0, 150)}\n                              {entry.thoughts.length > 150 && \"...\"}\n                            </div>\n                          )}\n                          {entry.gratitude.length > 0 && (\n                            <div className=\"md:col-span-2\">\n                              <strong>Gratitude:</strong> {entry.gratitude.filter(g => g.trim()).join(\" • \")}\n                            </div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Tips */}\n      <Card className=\"bg-pink-50 border-pink-200\">\n        <CardContent className=\"p-4\">\n          <h4 className=\"font-semibold mb-3 text-pink-800\">💡 Mood Tracking Tips</h4>\n          <div className=\"space-y-2 text-sm text-pink-700\">\n            <p>• Track consistently, even on days when you feel \"normal\" or neutral</p>\n            <p>• Be honest - there's no \"right\" or \"wrong\" mood to have</p>\n            <p>• Look for patterns over time rather than focusing on individual days</p>\n            <p>• Use this data to identify triggers, helpful activities, and coping strategies</p>\n            <p>• Share trends with your healthcare provider to inform treatment</p>\n            <p>• Remember: mood tracking is a tool for awareness, not self-judgment</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":35060},"client/src/components/RelaxationTools.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Zap,\n  Play,\n  Pause,\n  RotateCcw,\n  Volume2,\n  VolumeX,\n  Settings,\n  CheckCircle,\n  Clock,\n  Waves,\n  TreePine,\n  Sun,\n  Moon,\n  Mountain,\n  Music,\n  Coffee\n} from \"lucide-react\";\n\ninterface RelaxationSession {\n  technique: string;\n  duration: number;\n  completedSteps: number;\n  startTime: Date;\n}\n\nexport function RelaxationTools() {\n  const [activeSession, setActiveSession] = useState<string | null>(null);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [sessionDuration, setSessionDuration] = useState(10);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [sessions, setSessions] = useState<RelaxationSession[]>([]);\n  const [selectedTab, setSelectedTab] = useState(\"pmr\");\n\n  const techniques = {\n    \"pmr\": {\n      name: \"Progressive Muscle Relaxation\",\n      description: \"Systematically tense and relax muscle groups throughout your body\",\n      icon: Zap,\n      benefits: [\"Reduces physical tension\", \"Improves body awareness\", \"Promotes deep relaxation\"],\n      muscleGroups: [\n        { name: \"Right hand and forearm\", instruction: \"Make a tight fist with your right hand\", duration: 5 },\n        { name: \"Right upper arm\", instruction: \"Bend your right arm and tense your bicep\", duration: 5 },\n        { name: \"Left hand and forearm\", instruction: \"Make a tight fist with your left hand\", duration: 5 },\n        { name: \"Left upper arm\", instruction: \"Bend your left arm and tense your bicep\", duration: 5 },\n        { name: \"Forehead\", instruction: \"Raise your eyebrows and wrinkle your forehead\", duration: 5 },\n        { name: \"Eyes and cheeks\", instruction: \"Squeeze your eyes tightly shut\", duration: 5 },\n        { name: \"Mouth and jaw\", instruction: \"Clench your teeth and press your lips together\", duration: 5 },\n        { name: \"Neck and throat\", instruction: \"Pull your shoulders up toward your ears\", duration: 5 },\n        { name: \"Chest\", instruction: \"Take a deep breath and hold it, tensing your chest\", duration: 5 },\n        { name: \"Back\", instruction: \"Arch your back and pull your shoulder blades together\", duration: 5 },\n        { name: \"Stomach\", instruction: \"Tighten your stomach muscles\", duration: 5 },\n        { name: \"Right upper leg\", instruction: \"Tighten your right thigh muscle\", duration: 5 },\n        { name: \"Right calf\", instruction: \"Point your right toe up toward your shin\", duration: 5 },\n        { name: \"Right foot\", instruction: \"Curl your right toes and arch your foot\", duration: 5 },\n        { name: \"Left upper leg\", instruction: \"Tighten your left thigh muscle\", duration: 5 },\n        { name: \"Left calf\", instruction: \"Point your left toe up toward your shin\", duration: 5 },\n        { name: \"Left foot\", instruction: \"Curl your left toes and arch your foot\", duration: 5 }\n      ]\n    },\n    \"visualization\": {\n      name: \"Guided Visualization\",\n      description: \"Use mental imagery to create a peaceful, relaxing experience\",\n      icon: Mountain,\n      benefits: [\"Reduces stress hormones\", \"Improves mood\", \"Enhances creativity\"],\n      scenarios: [\n        {\n          name: \"Beach Paradise\",\n          icon: Sun,\n          steps: [\n            \"You're walking on a pristine beach with soft, warm sand between your toes\",\n            \"The gentle sound of waves lapping at the shore creates a rhythmic, peaceful melody\",\n            \"A warm, gentle breeze carries the fresh scent of salt water and tropical flowers\",\n            \"The sun warms your skin as you find the perfect spot to relax\",\n            \"You lie down on soft sand or a comfortable beach chair, feeling completely safe and peaceful\",\n            \"With each breath, you sink deeper into relaxation, letting all tension melt away\"\n          ]\n        },\n        {\n          name: \"Forest Sanctuary\",\n          icon: TreePine,\n          steps: [\n            \"You're walking through a peaceful forest filled with tall, ancient trees\",\n            \"Sunlight filters through the leaves, creating dancing patterns of light and shadow\",\n            \"The air is fresh and clean, filled with the earthy scent of pine and moss\",\n            \"You hear birds singing and leaves rustling gently in the breeze\",\n            \"You find a comfortable clearing where you can sit and rest peacefully\",\n            \"Feel yourself becoming one with nature, deeply grounded and completely at ease\"\n          ]\n        },\n        {\n          name: \"Mountain Lake\",\n          icon: Mountain,\n          steps: [\n            \"You're standing beside a crystal-clear mountain lake, perfectly still and reflective\",\n            \"The water mirrors the beautiful mountains and clear blue sky above\",\n            \"The air is crisp and pure, filling your lungs with freshness\",\n            \"You can hear the gentle lapping of water and perhaps a bird in the distance\",\n            \"You sit by the water's edge, feeling the solid earth beneath you\",\n            \"With each breath, you feel more connected to the peaceful energy of this special place\"\n          ]\n        },\n        {\n          name: \"Cozy Cabin\",\n          icon: Coffee,\n          steps: [\n            \"You're in a warm, cozy cabin with a gentle fire crackling in the fireplace\",\n            \"Soft, comfortable furniture surrounds you, and you're wrapped in a warm blanket\",\n            \"The warm glow of the fire creates dancing shadows on the walls\",\n            \"You can hear the gentle crackling of the wood and feel the warmth on your face\",\n            \"Everything you need is within reach - you are completely safe and cared for\",\n            \"You sink deeper into comfort, feeling utterly peaceful and content\"\n          ]\n        }\n      ]\n    },\n    \"autogenic\": {\n      name: \"Autogenic Training\",\n      description: \"Use self-suggestion and body awareness to achieve deep relaxation\",\n      icon: Waves,\n      benefits: [\"Balances nervous system\", \"Reduces anxiety\", \"Improves sleep quality\"],\n      phrases: [\n        { phrase: \"My right arm is heavy\", focus: \"heaviness in right arm\", duration: 60 },\n        { phrase: \"My left arm is heavy\", focus: \"heaviness in left arm\", duration: 60 },\n        { phrase: \"Both arms are heavy\", focus: \"heaviness in both arms\", duration: 60 },\n        { phrase: \"My right leg is heavy\", focus: \"heaviness in right leg\", duration: 60 },\n        { phrase: \"My left leg is heavy\", focus: \"heaviness in left leg\", duration: 60 },\n        { phrase: \"Both legs are heavy\", focus: \"heaviness in both legs\", duration: 60 },\n        { phrase: \"My right arm is warm\", focus: \"warmth flowing through right arm\", duration: 60 },\n        { phrase: \"My left arm is warm\", focus: \"warmth flowing through left arm\", duration: 60 },\n        { phrase: \"Both arms are warm\", focus: \"comfortable warmth in both arms\", duration: 60 },\n        { phrase: \"My heartbeat is calm and regular\", focus: \"steady, peaceful heartbeat\", duration: 60 },\n        { phrase: \"My breathing is calm and effortless\", focus: \"natural, easy breathing\", duration: 60 },\n        { phrase: \"My solar plexus is warm\", focus: \"gentle warmth in your stomach area\", duration: 60 },\n        { phrase: \"My forehead is cool and clear\", focus: \"pleasant coolness across your forehead\", duration: 60 },\n        { phrase: \"I am completely calm and relaxed\", focus: \"total peace and relaxation\", duration: 90 }\n      ]\n    }\n  };\n\n  const currentTechnique = activeSession ? techniques[activeSession as keyof typeof techniques] : null;\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (isActive && timeRemaining > 0) {\n      timer = setTimeout(() => {\n        setTimeRemaining(prev => prev - 1);\n      }, 1000);\n    } else if (isActive && timeRemaining === 0) {\n      // Move to next step or complete session\n      if (currentTechnique) {\n        const totalSteps = getTotalSteps(currentTechnique);\n        if (currentStep < totalSteps - 1) {\n          setCurrentStep(prev => prev + 1);\n          setTimeRemaining(getStepDuration(currentTechnique, currentStep + 1));\n        } else {\n          completeSession();\n        }\n      }\n    }\n    return () => clearTimeout(timer);\n  }, [isActive, timeRemaining, currentStep, currentTechnique]);\n\n  const getTotalSteps = (technique: any) => {\n    if (technique && 'muscleGroups' in technique) return technique.muscleGroups.length * 2; // tension + relaxation\n    if (technique && 'scenarios' in technique) return technique.scenarios[0].steps.length;\n    if (technique && 'phrases' in technique) return technique.phrases.length;\n    return 1;\n  };\n\n  const getStepDuration = (technique: any, step: number) => {\n    if (technique && 'muscleGroups' in technique) return 10; // 5s tension + 5s relaxation\n    if (technique && 'scenarios' in technique) return Math.floor((sessionDuration * 60) / technique.scenarios[0].steps.length);\n    if (technique && 'phrases' in technique && technique.phrases[step]) return technique.phrases[step].duration;\n    return 60;\n  };\n\n  const startSession = (techniqueKey: string) => {\n    const technique = techniques[techniqueKey as keyof typeof techniques];\n    setActiveSession(techniqueKey);\n    setCurrentStep(0);\n    setIsActive(true);\n    setTimeRemaining(getStepDuration(technique, 0));\n  };\n\n  const pauseSession = () => {\n    setIsActive(false);\n  };\n\n  const resumeSession = () => {\n    setIsActive(true);\n  };\n\n  const resetSession = () => {\n    setIsActive(false);\n    setCurrentStep(0);\n    if (currentTechnique) {\n      setTimeRemaining(getStepDuration(currentTechnique, 0));\n    }\n  };\n\n  const completeSession = () => {\n    if (currentTechnique) {\n      const session: RelaxationSession = {\n        technique: currentTechnique.name,\n        duration: sessionDuration * 60,\n        completedSteps: currentStep + 1,\n        startTime: new Date()\n      };\n      setSessions(prev => [session, ...prev].slice(0, 10));\n    }\n    setIsActive(false);\n    setActiveSession(null);\n    setCurrentStep(0);\n  };\n\n  const getProgress = () => {\n    if (!currentTechnique) return 0;\n    const totalSteps = getTotalSteps(currentTechnique);\n    return ((currentStep + 1) / totalSteps) * 100;\n  };\n\n  const getCurrentInstruction = () => {\n    if (!currentTechnique) return \"\";\n    \n    if ('muscleGroups' in currentTechnique) {\n      const muscleIndex = Math.floor(currentStep / 2);\n      const muscle = currentTechnique.muscleGroups[muscleIndex];\n      const isRelaxation = currentStep % 2 === 1;\n      \n      if (isRelaxation) {\n        return `Now release the tension in your ${muscle.name.toLowerCase()}. Notice the contrast between tension and relaxation. Feel the muscle becoming loose and warm.`;\n      } else {\n        return `${muscle.instruction}. Hold this tension and notice the feeling.`;\n      }\n    }\n    \n    if ('scenarios' in currentTechnique) {\n      const scenario = currentTechnique.scenarios[0];\n      return scenario.steps[currentStep] || \"Continue to relax and enjoy this peaceful experience.\";\n    }\n    \n    if ('phrases' in currentTechnique) {\n      const phrase = currentTechnique.phrases[currentStep];\n      return `Repeat to yourself: \"${phrase.phrase}\". Focus on ${phrase.focus}. Let this sensation develop naturally.`;\n    }\n    \n    return \"Focus on your breathing and allow yourself to relax completely.\";\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-gradient-to-br from-indigo-50 to-purple-50 border-indigo-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Waves className=\"w-5 h-5 text-indigo-600\" />\n            Interactive Relaxation Tools\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Guided techniques for deep physical and mental relaxation\n          </p>\n        </CardHeader>\n      </Card>\n\n      {!activeSession ? (\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"pmr\">Muscle Relaxation</TabsTrigger>\n            <TabsTrigger value=\"visualization\">Visualization</TabsTrigger>\n            <TabsTrigger value=\"autogenic\">Autogenic Training</TabsTrigger>\n          </TabsList>\n\n          {Object.entries(techniques).map(([key, technique]) => (\n            <TabsContent key={key} value={key}>\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center\">\n                        <technique.icon className=\"w-6 h-6 text-indigo-600\" />\n                      </div>\n                      <div>\n                        <CardTitle>{technique.name}</CardTitle>\n                        <p className=\"text-muted-foreground\">{technique.description}</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Session Settings */}\n                  <div className=\"bg-secondary/30 p-4 rounded-lg\">\n                    <h4 className=\"font-semibold mb-3\">Session Settings</h4>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <Label className=\"text-sm font-medium\">Duration: {sessionDuration} minutes</Label>\n                          <Badge variant=\"secondary\">{sessionDuration} min</Badge>\n                        </div>\n                        <Slider\n                          value={[sessionDuration]}\n                          onValueChange={([value]) => setSessionDuration(value)}\n                          max={30}\n                          min={5}\n                          step={5}\n                          className=\"w-full\"\n                          data-testid=\"slider-session-duration\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <Label className=\"text-sm font-medium\">Audio Cues</Label>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setSoundEnabled(!soundEnabled)}\n                          className=\"gap-2\"\n                        >\n                          {soundEnabled ? <Volume2 className=\"w-4 h-4\" /> : <VolumeX className=\"w-4 h-4\" />}\n                          {soundEnabled ? \"Enabled\" : \"Disabled\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Technique Details */}\n                  {key === \"pmr\" && 'muscleGroups' in technique && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">Muscle Groups ({technique.muscleGroups.length})</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 max-h-60 overflow-y-auto\">\n                        {('muscleGroups' in technique ? technique.muscleGroups : []).map((muscle: any, index: number) => (\n                          <div key={index} className=\"flex items-center gap-3 p-2 bg-secondary/20 rounded\">\n                            <div className=\"w-6 h-6 bg-indigo-100 rounded-full flex items-center justify-center text-xs font-bold\">\n                              {index + 1}\n                            </div>\n                            <div>\n                              <p className=\"text-sm font-medium\">{muscle.name}</p>\n                              <p className=\"text-xs text-muted-foreground\">{muscle.instruction}</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {key === \"visualization\" && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">Visualization Scenarios</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {('scenarios' in technique ? technique.scenarios : []).map((scenario: any, index: number) => (\n                          <Card key={index} className=\"border-dashed border-2\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <scenario.icon className=\"w-5 h-5 text-indigo-600\" />\n                                <h5 className=\"font-medium\">{scenario.name}</h5>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {scenario.steps.length} guided steps through this peaceful visualization\n                              </p>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {key === \"autogenic\" && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">Autogenic Phrases ({technique.phrases.length})</h4>\n                      <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                        {('phrases' in technique ? technique.phrases : []).map((phrase: any, index: number) => (\n                          <div key={index} className=\"flex items-start gap-3 p-3 bg-secondary/20 rounded\">\n                            <div className=\"w-6 h-6 bg-indigo-100 rounded-full flex items-center justify-center text-xs font-bold\">\n                              {index + 1}\n                            </div>\n                            <div>\n                              <p className=\"text-sm font-medium\">\"{phrase.phrase}\"</p>\n                              <p className=\"text-xs text-muted-foreground\">{phrase.focus}</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Benefits */}\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Benefits</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {technique.benefits.map((benefit, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-indigo-700 border-indigo-200\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          {benefit}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={() => startSession(key)}\n                    className=\"w-full gap-2\"\n                    data-testid={`button-start-${key}`}\n                  >\n                    <Play className=\"w-4 h-4\" />\n                    Start {technique.name}\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          ))}\n        </Tabs>\n      ) : (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <currentTechnique.icon className=\"w-8 h-8 text-primary\" />\n                <div>\n                  <CardTitle>{currentTechnique.name}</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Step {currentStep + 1} of {getTotalSteps(currentTechnique)}\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-2xl font-bold text-primary\">{formatTime(timeRemaining)}</div>\n                <div className=\"text-sm text-muted-foreground\">Remaining</div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Progress */}\n            <div>\n              <div className=\"flex justify-between text-sm text-muted-foreground mb-2\">\n                <span>Session Progress</span>\n                <span>{Math.round(getProgress())}%</span>\n              </div>\n              <Progress value={getProgress()} className=\"h-3\" />\n            </div>\n\n            {/* Current Step Instruction */}\n            <div className=\"bg-indigo-50 p-6 rounded-lg text-center\">\n              <div className=\"w-16 h-16 bg-indigo-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <currentTechnique.icon className=\"w-8 h-8 text-indigo-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-4 text-indigo-900\">\n                {activeSession === \"pmr\" && currentStep % 2 === 0 ? \"Tense\" : \n                 activeSession === \"pmr\" && currentStep % 2 === 1 ? \"Relax\" :\n                 activeSession === \"visualization\" ? \"Visualize\" : \"Focus\"}\n              </h3>\n              <p className=\"text-indigo-800 leading-relaxed max-w-2xl mx-auto\">\n                {getCurrentInstruction()}\n              </p>\n            </div>\n\n            {/* Controls */}\n            <div className=\"flex items-center justify-center gap-4\">\n              {isActive ? (\n                <Button onClick={pauseSession} variant=\"secondary\" className=\"gap-2\">\n                  <Pause className=\"w-4 h-4\" />\n                  Pause\n                </Button>\n              ) : (\n                <Button onClick={resumeSession} className=\"gap-2\">\n                  <Play className=\"w-4 h-4\" />\n                  Resume\n                </Button>\n              )}\n              \n              <Button onClick={resetSession} variant=\"outline\" className=\"gap-2\">\n                <RotateCcw className=\"w-4 h-4\" />\n                Restart\n              </Button>\n              \n              <Button onClick={() => setActiveSession(null)} variant=\"ghost\">\n                Exit Session\n              </Button>\n            </div>\n\n            {/* Session Info */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center text-sm\">\n                <div>\n                  <div className=\"font-semibold text-primary\">\n                    {Math.floor(((sessionDuration * 60) - timeRemaining - (currentStep * getStepDuration(currentTechnique, currentStep))) / 60)}:{((((sessionDuration * 60) - timeRemaining - (currentStep * getStepDuration(currentTechnique, currentStep))) % 60).toString().padStart(2, '0'))}\n                  </div>\n                  <div className=\"text-muted-foreground\">Elapsed</div>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-primary\">{sessionDuration}:00</div>\n                  <div className=\"text-muted-foreground\">Total Duration</div>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-primary\">{currentStep + 1}</div>\n                  <div className=\"text-muted-foreground\">Current Step</div>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-primary\">{getTotalSteps(currentTechnique)}</div>\n                  <div className=\"text-muted-foreground\">Total Steps</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Session History */}\n      {sessions.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"w-5 h-5\" />\n              Recent Relaxation Sessions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {sessions.slice(0, 5).map((session, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 bg-indigo-100 rounded-full flex items-center justify-center\">\n                      <CheckCircle className=\"w-4 h-4 text-indigo-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-sm\">{session.technique}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {session.completedSteps} steps • {Math.round(session.duration / 60)} min\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-muted-foreground\">\n                      {session.startTime.toLocaleDateString()}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {session.startTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Tips */}\n      <Card className=\"bg-indigo-50 border-indigo-200\">\n        <CardContent className=\"p-4\">\n          <h4 className=\"font-semibold mb-3 text-indigo-800\">💡 Relaxation Tips</h4>\n          <div className=\"space-y-2 text-sm text-indigo-700\">\n            <p>• Find a quiet, comfortable space where you won't be interrupted</p>\n            <p>• Practice at the same time daily to build a routine</p>\n            <p>• Don't worry about \"doing it perfectly\" - relaxation is a skill that improves with practice</p>\n            <p>• If your mind wanders, gently bring your attention back to the technique</p>\n            <p>• Progressive muscle relaxation is especially effective for physical tension</p>\n            <p>• Visualization works well for mental stress and emotional regulation</p>\n            <p>• Autogenic training can help with sleep problems and anxiety</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":26891},"client/src/components/SleepGuideComprehensive.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Moon, \n  Clock, \n  Shield, \n  CheckCircle, \n  ArrowRight, \n  Lightbulb,\n  Heart,\n  Target,\n  FileText,\n  PenTool,\n  Star,\n  Bed,\n  Sun,\n  BookOpen\n} from \"lucide-react\";\n\ninterface SleepAssessment {\n  bedTime: string;\n  wakeTime: string;\n  sleepLatency: number;\n  nightWakes: number;\n  sleepQuality: number;\n  daytimeEnergy: number;\n  anxietyLevel: number;\n  sleepEnvironment: string[];\n  preSleeproutine: string[];\n  hindrances: string[];\n}\n\ninterface SleepDiaryEntry {\n  date: string;\n  bedTime: string;\n  sleepTime: string;\n  nightWakes: number;\n  wakeTime: string;\n  quality: number;\n  notes: string;\n}\n\nexport function SleepGuideComprehensive() {\n  const [currentSection, setCurrentSection] = useState(0);\n  const [completedSections, setCompletedSections] = useState<number[]>([]);\n  const [sleepAssessment, setSleepAssessment] = useState<SleepAssessment>({\n    bedTime: '',\n    wakeTime: '',\n    sleepLatency: 30,\n    nightWakes: 1,\n    sleepQuality: 5,\n    daytimeEnergy: 5,\n    anxietyLevel: 5,\n    sleepEnvironment: [],\n    preSleeproutine: [],\n    hindrances: []\n  });\n  const [personalPlan, setPersonalPlan] = useState<string[]>([]);\n  const [personalNotes, setPersonalNotes] = useState<Record<string, string>>({});\n\n  const sections = [\n    {\n      id: 0,\n      title: \"Sleep & Anxiety Connection\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-indigo-50 p-6 rounded-lg border-l-4 border-indigo-400\">\n            <h3 className=\"text-xl font-semibold text-indigo-800 mb-3\">The Sleep-Anxiety Relationship</h3>\n            <p className=\"text-indigo-700 mb-4\">\n              Sleep and anxiety have a bidirectional relationship - poor sleep can increase anxiety, \n              and anxiety can significantly disrupt sleep quality and duration. Understanding this \n              connection is crucial for breaking the cycle.\n            </p>\n            <div className=\"bg-white p-4 rounded border border-indigo-200\">\n              <h4 className=\"font-semibold text-indigo-800 mb-2\">NICE Guidelines on Sleep & Mental Health:</h4>\n              <p className=\"text-indigo-700 text-sm\">\n                \"Sleep disturbances are both a symptom and a risk factor for anxiety disorders. \n                Improving sleep hygiene and addressing sleep difficulties should be integrated into anxiety treatment plans.\"\n              </p>\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card className=\"bg-red-50 border-red-200\">\n              <CardHeader>\n                <CardTitle className=\"text-red-800 flex items-center gap-2\">\n                  <Moon className=\"w-5 h-5\" />\n                  How Anxiety Disrupts Sleep\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-white rounded border border-red-200\">\n                    <h4 className=\"font-semibold text-red-800 mb-1\">Racing Thoughts</h4>\n                    <p className=\"text-red-700 text-sm\">Mind won't \"switch off\" when trying to sleep</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-red-200\">\n                    <h4 className=\"font-semibold text-red-800 mb-1\">Physical Arousal</h4>\n                    <p className=\"text-red-700 text-sm\">Increased heart rate, muscle tension, restlessness</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-red-200\">\n                    <h4 className=\"font-semibold text-red-800 mb-1\">Sleep Anticipation Anxiety</h4>\n                    <p className=\"text-red-700 text-sm\">Worrying about not being able to sleep</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-red-200\">\n                    <h4 className=\"font-semibold text-red-800 mb-1\">Early Morning Awakening</h4>\n                    <p className=\"text-red-700 text-sm\">Waking up 2-4 hours earlier than intended</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-orange-50 border-orange-200\">\n              <CardHeader>\n                <CardTitle className=\"text-orange-800 flex items-center gap-2\">\n                  <Sun className=\"w-5 h-5\" />\n                  How Poor Sleep Increases Anxiety\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-white rounded border border-orange-200\">\n                    <h4 className=\"font-semibold text-orange-800 mb-1\">Emotional Dysregulation</h4>\n                    <p className=\"text-orange-700 text-sm\">Reduced ability to manage stress and emotions</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-orange-200\">\n                    <h4 className=\"font-semibold text-orange-800 mb-1\">Cognitive Impairment</h4>\n                    <p className=\"text-orange-700 text-sm\">Difficulty concentrating and problem-solving</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-orange-200\">\n                    <h4 className=\"font-semibold text-orange-800 mb-1\">Increased Stress Hormones</h4>\n                    <p className=\"text-orange-700 text-sm\">Elevated cortisol levels throughout the day</p>\n                  </div>\n                  <div className=\"p-3 bg-white rounded border border-orange-200\">\n                    <h4 className=\"font-semibold text-orange-800 mb-1\">Hypervigilance</h4>\n                    <p className=\"text-orange-700 text-sm\">Heightened alertness to potential threats</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card className=\"bg-green-50 border-green-200\">\n            <CardHeader>\n              <CardTitle className=\"text-green-800 flex items-center gap-2\">\n                <Heart className=\"w-5 h-5\" />\n                Breaking the Cycle: The Good News\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold text-green-800 mb-3\">Evidence-Based Benefits</h4>\n                  <ul className=\"text-green-700 space-y-2\">\n                    <li>• Improving sleep can reduce anxiety by 40-60%</li>\n                    <li>• Better sleep enhances emotional regulation</li>\n                    <li>• Quality sleep improves stress resilience</li>\n                    <li>• Good sleep habits support anxiety recovery</li>\n                    <li>• Sleep interventions show results within 2-4 weeks</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibent text-green-800 mb-3\">Recovery Approach</h4>\n                  <p className=\"text-green-700 mb-3\">\n                    By addressing sleep difficulties alongside anxiety management, \n                    you create a positive feedback loop that supports overall mental health recovery.\n                  </p>\n                  <div className=\"p-3 bg-white rounded border border-green-200\">\n                    <p className=\"text-green-800 font-medium text-sm\">\n                      \"Small, consistent changes to sleep habits often yield significant improvements in anxiety symptoms.\"\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Your Sleep-Anxiety Experience</h3>\n            <Textarea\n              placeholder=\"Describe how anxiety affects your sleep, and how poor sleep affects your anxiety the next day. What patterns have you noticed?\"\n              value={personalNotes['section0'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section0: e.target.value}))}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 1,\n      title: \"Personal Sleep Assessment\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-blue-50 p-6 rounded-lg border-l-4 border-blue-400\">\n            <h3 className=\"text-xl font-semibold text-blue-800 mb-3\">Sleep Pattern Assessment</h3>\n            <p className=\"text-blue-700\">\n              Understanding your current sleep patterns helps identify specific areas for improvement. \n              This assessment follows validated sleep evaluation methods used in clinical practice.\n            </p>\n          </div>\n\n          <Card className=\"bg-white border-2\">\n            <CardHeader>\n              <CardTitle className=\"text-blue-800 flex items-center gap-2\">\n                <Clock className=\"w-5 h-5\" />\n                Sleep Timing & Quality Assessment\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Sleep Timing */}\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"font-semibold text-blue-800\">Usual Bedtime:</Label>\n                  <Input\n                    type=\"time\"\n                    value={sleepAssessment.bedTime}\n                    onChange={(e) => setSleepAssessment(prev => ({...prev, bedTime: e.target.value}))}\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"font-semibold text-blue-800\">Usual Wake Time:</Label>\n                  <Input\n                    type=\"time\"\n                    value={sleepAssessment.wakeTime}\n                    onChange={(e) => setSleepAssessment(prev => ({...prev, wakeTime: e.target.value}))}\n                    className=\"mt-1\"\n                  />\n                </div>\n              </div>\n\n              {/* Sleep Quality Metrics */}\n              <div className=\"space-y-6\">\n                <div>\n                  <Label className=\"font-semibold text-blue-800\">How long does it usually take you to fall asleep? (minutes)</Label>\n                  <div className=\"mt-2\">\n                    <Slider\n                      value={[sleepAssessment.sleepLatency]}\n                      onValueChange={(value) => setSleepAssessment(prev => ({...prev, sleepLatency: value[0]}))}\n                      max={120}\n                      min={5}\n                      step={5}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-sm text-blue-600 mt-1\">\n                      <span>5 min</span>\n                      <span className=\"font-medium\">{sleepAssessment.sleepLatency} minutes</span>\n                      <span>120 min</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"font-semibold text-blue-800\">How many times do you typically wake up during the night?</Label>\n                  <div className=\"mt-2\">\n                    <Slider\n                      value={[sleepAssessment.nightWakes]}\n                      onValueChange={(value) => setSleepAssessment(prev => ({...prev, nightWakes: value[0]}))}\n                      max={6}\n                      min={0}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-sm text-blue-600 mt-1\">\n                      <span>0 times</span>\n                      <span className=\"font-medium\">{sleepAssessment.nightWakes} times</span>\n                      <span>6+ times</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"font-semibold text-blue-800\">Overall sleep quality (1 = very poor, 10 = excellent)</Label>\n                  <div className=\"mt-2\">\n                    <Slider\n                      value={[sleepAssessment.sleepQuality]}\n                      onValueChange={(value) => setSleepAssessment(prev => ({...prev, sleepQuality: value[0]}))}\n                      max={10}\n                      min={1}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-sm text-blue-600 mt-1\">\n                      <span>Very Poor</span>\n                      <span className=\"font-medium\">{sleepAssessment.sleepQuality}/10</span>\n                      <span>Excellent</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"font-semibold text-blue-800\">Daytime energy levels (1 = exhausted, 10 = highly energetic)</Label>\n                  <div className=\"mt-2\">\n                    <Slider\n                      value={[sleepAssessment.daytimeEnergy]}\n                      onValueChange={(value) => setSleepAssessment(prev => ({...prev, daytimeEnergy: value[0]}))}\n                      max={10}\n                      min={1}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-sm text-blue-600 mt-1\">\n                      <span>Exhausted</span>\n                      <span className=\"font-medium\">{sleepAssessment.daytimeEnergy}/10</span>\n                      <span>Highly Energetic</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"font-semibold text-blue-800\">Anxiety levels before bedtime (1 = calm, 10 = very anxious)</Label>\n                  <div className=\"mt-2\">\n                    <Slider\n                      value={[sleepAssessment.anxietyLevel]}\n                      onValueChange={(value) => setSleepAssessment(prev => ({...prev, anxietyLevel: value[0]}))}\n                      max={10}\n                      min={1}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-sm text-blue-600 mt-1\">\n                      <span>Calm</span>\n                      <span className=\"font-medium\">{sleepAssessment.anxietyLevel}/10</span>\n                      <span>Very Anxious</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Sleep Environment & Habits */}\n          <Card className=\"bg-purple-50 border-purple-200\">\n            <CardHeader>\n              <CardTitle className=\"text-purple-800 flex items-center gap-2\">\n                <Bed className=\"w-5 h-5\" />\n                Sleep Environment & Habits Checklist\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label className=\"font-semibold text-purple-800 mb-3 block\">My bedroom environment includes: (check all that apply)</Label>\n                <div className=\"grid md:grid-cols-2 gap-3\">\n                  {[\n                    'Dark/blackout curtains',\n                    'Comfortable temperature (60-67°F)',\n                    'Quiet environment',\n                    'Comfortable mattress & pillows',\n                    'No electronic devices',\n                    'No clutter or work materials',\n                    'Good air circulation',\n                    'White noise or earplugs if needed'\n                  ].map((item, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id={`env-${index}`}\n                        checked={sleepAssessment.sleepEnvironment.includes(item)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSleepAssessment(prev => ({\n                              ...prev, \n                              sleepEnvironment: [...prev.sleepEnvironment, item]\n                            }));\n                          } else {\n                            setSleepAssessment(prev => ({\n                              ...prev,\n                              sleepEnvironment: prev.sleepEnvironment.filter(i => i !== item)\n                            }));\n                          }\n                        }}\n                      />\n                      <Label htmlFor={`env-${index}`} className=\"text-purple-700 text-sm\">{item}</Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"font-semibold text-purple-800 mb-3 block\">My current pre-sleep routine includes: (check all that apply)</Label>\n                <div className=\"grid md:grid-cols-2 gap-3\">\n                  {[\n                    'Reading a book',\n                    'Listening to calming music',\n                    'Gentle stretching or yoga',\n                    'Meditation or breathing exercises',\n                    'Warm bath or shower',\n                    'Journaling or gratitude practice',\n                    'Avoiding screens 1 hour before bed',\n                    'Limiting caffeine after 2 PM'\n                  ].map((item, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id={`routine-${index}`}\n                        checked={sleepAssessment.preSleeproutine.includes(item)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSleepAssessment(prev => ({\n                              ...prev, \n                              preSleeproutine: [...prev.preSleeproutine, item]\n                            }));\n                          } else {\n                            setSleepAssessment(prev => ({\n                              ...prev,\n                              preSleeproutine: prev.preSleeproutine.filter(i => i !== item)\n                            }));\n                          }\n                        }}\n                      />\n                      <Label htmlFor={`routine-${index}`} className=\"text-purple-700 text-sm\">{item}</Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"font-semibold text-purple-800 mb-3 block\">Things that interfere with my sleep: (check all that apply)</Label>\n                <div className=\"grid md:grid-cols-2 gap-3\">\n                  {[\n                    'Worrying or racing thoughts',\n                    'Physical discomfort or pain',\n                    'Noise from outside or partner',\n                    'Too much light in bedroom',\n                    'Drinking caffeine late in day',\n                    'Using phone/tablet in bed',\n                    'Eating large meals before bed',\n                    'Alcohol consumption',\n                    'Irregular sleep schedule',\n                    'Stress from work or relationships'\n                  ].map((item, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id={`hindrance-${index}`}\n                        checked={sleepAssessment.hindrances.includes(item)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSleepAssessment(prev => ({\n                              ...prev, \n                              hindrances: [...prev.hindrances, item]\n                            }));\n                          } else {\n                            setSleepAssessment(prev => ({\n                              ...prev,\n                              hindrances: prev.hindrances.filter(i => i !== item)\n                            }));\n                          }\n                        }}\n                      />\n                      <Label htmlFor={`hindrance-${index}`} className=\"text-purple-700 text-sm\">{item}</Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Additional Sleep Challenges</h3>\n            <Textarea\n              placeholder=\"Describe any other sleep-related issues, medications, or patterns you've noticed...\"\n              value={personalNotes['section1'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section1: e.target.value}))}\n              className=\"min-h-[80px]\"\n            />\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 2,\n      title: \"Evidence-Based Sleep Strategies\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-green-50 p-6 rounded-lg border-l-4 border-green-400\">\n            <h3 className=\"text-xl font-semibold text-green-800 mb-3\">Sleep Hygiene & CBT-I Techniques</h3>\n            <p className=\"text-green-700 mb-4\">\n              These strategies are based on Cognitive Behavioral Therapy for Insomnia (CBT-I), \n              the gold-standard treatment recommended by NICE guidelines for sleep difficulties.\n            </p>\n          </div>\n\n          <div className=\"space-y-8\">\n            {/* Core Sleep Hygiene */}\n            <Card className=\"bg-blue-50 border-blue-200\">\n              <CardHeader>\n                <CardTitle className=\"text-blue-800 flex items-center gap-2\">\n                  <Clock className=\"w-6 h-6\" />\n                  Core Sleep Hygiene Principles\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border border-blue-200\">\n                    <h4 className=\"font-semibold text-blue-800 mb-3 flex items-center gap-2\">\n                      <Sun className=\"w-5 h-5\" />\n                      Sleep Schedule Consistency\n                    </h4>\n                    <ul className=\"text-blue-700 space-y-2 text-sm\">\n                      <li><strong>Go to bed and wake up at the same time every day</strong> - even on weekends</li>\n                      <li>Allow 7-9 hours for sleep opportunity</li>\n                      <li>If you can't fall asleep within 20 minutes, get up and do a quiet activity</li>\n                      <li>Return to bed when you feel sleepy</li>\n                      <li>Use your bed only for sleep and intimacy</li>\n                    </ul>\n                  </div>\n                  \n                  <div className=\"p-4 bg-white rounded border border-blue-200\">\n                    <h4 className=\"font-semibold text-blue-800 mb-3 flex items-center gap-2\">\n                      <Moon className=\"w-5 h-5\" />\n                      Evening Wind-Down Routine\n                    </h4>\n                    <ul className=\"text-blue-700 space-y-2 text-sm\">\n                      <li><strong>Start 1-2 hours before bedtime</strong></li>\n                      <li>Dim the lights progressively</li>\n                      <li>Avoid screens or use blue light filters</li>\n                      <li>Do relaxing activities (reading, bath, gentle stretching)</li>\n                      <li>Write down tomorrow's worries to \"park\" them</li>\n                    </ul>\n                  </div>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border border-blue-200\">\n                    <h4 className=\"font-semibold text-blue-800 mb-3\">Environment Optimization</h4>\n                    <ul className=\"text-blue-700 space-y-2 text-sm\">\n                      <li><strong>Temperature:</strong> 60-67°F (15-19°C)</li>\n                      <li><strong>Darkness:</strong> Blackout curtains or eye mask</li>\n                      <li><strong>Quiet:</strong> Earplugs or white noise</li>\n                      <li><strong>Comfort:</strong> Quality mattress and pillows</li>\n                      <li><strong>Clean space:</strong> Remove work materials and clutter</li>\n                    </ul>\n                  </div>\n                  \n                  <div className=\"p-4 bg-white rounded border border-blue-200\">\n                    <h4 className=\"font-semibold text-blue-800 mb-3\">Daytime Practices</h4>\n                    <ul className=\"text-blue-700 space-y-2 text-sm\">\n                      <li><strong>Light exposure:</strong> 20-30 minutes of morning sunlight</li>\n                      <li><strong>Exercise:</strong> Regular activity, but not 3 hours before bed</li>\n                      <li><strong>Caffeine:</strong> Avoid after 2 PM (effects last 6+ hours)</li>\n                      <li><strong>Naps:</strong> If needed, limit to 20 minutes before 3 PM</li>\n                      <li><strong>Meals:</strong> Avoid large meals 3 hours before bed</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Anxiety-Specific Sleep Techniques */}\n            <Card className=\"bg-purple-50 border-purple-200\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-800 flex items-center gap-2\">\n                  <Heart className=\"w-6 h-6\" />\n                  Anxiety-Specific Sleep Techniques\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border border-purple-200\">\n                    <h4 className=\"font-semibold text-purple-800 mb-3\">4-7-8 Sleep Breathing</h4>\n                    <ol className=\"text-purple-700 space-y-1 text-sm mb-3\">\n                      <li>1. Exhale completely through mouth</li>\n                      <li>2. Close mouth, inhale through nose for 4</li>\n                      <li>3. Hold breath for 7 counts</li>\n                      <li>4. Exhale through mouth for 8 counts</li>\n                      <li>5. Repeat 3-4 cycles</li>\n                    </ol>\n                    <p className=\"text-purple-600 text-xs italic\">\n                      Activates the parasympathetic nervous system for relaxation\n                    </p>\n                  </div>\n\n                  <div className=\"p-4 bg-white rounded border border-purple-200\">\n                    <h4 className=\"font-semibold text-purple-800 mb-3\">Worry Time Technique</h4>\n                    <ul className=\"text-purple-700 space-y-1 text-sm mb-3\">\n                      <li>• Set aside 15 minutes earlier in the day</li>\n                      <li>• Write down all your worries and concerns</li>\n                      <li>• For each worry, note: \"Can I influence this?\"</li>\n                      <li>• Make action plans for controllable worries</li>\n                      <li>• Practice acceptance for uncontrollable ones</li>\n                    </ul>\n                    <p className=\"text-purple-600 text-xs italic\">\n                      Prevents bedtime worry spirals\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border border-purple-200\">\n                    <h4 className=\"font-semibold text-purple-800 mb-3\">Progressive Muscle Relaxation for Sleep</h4>\n                    <ol className=\"text-purple-700 space-y-1 text-sm mb-3\">\n                      <li>1. Start with toes - tense for 5 seconds, then relax</li>\n                      <li>2. Move up through each muscle group</li>\n                      <li>3. Focus on the contrast between tension and relaxation</li>\n                      <li>4. End with deep breathing</li>\n                      <li>5. Let your body sink into the mattress</li>\n                    </ol>\n                  </div>\n\n                  <div className=\"p-4 bg-white rounded border border-purple-200\">\n                    <h4 className=\"font-semibold text-purple-800 mb-3\">Mindful Body Scan</h4>\n                    <ul className=\"text-purple-700 space-y-1 text-sm mb-3\">\n                      <li>• Lie comfortably and close your eyes</li>\n                      <li>• Start with the top of your head</li>\n                      <li>• Slowly scan down through your body</li>\n                      <li>• Notice each body part without judgment</li>\n                      <li>• Breathe into areas of tension or discomfort</li>\n                      <li>• Let go of the need to control</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Cognitive Techniques */}\n            <Card className=\"bg-emerald-50 border-emerald-200\">\n              <CardHeader>\n                <CardTitle className=\"text-emerald-800 flex items-center gap-2\">\n                  <Target className=\"w-6 h-6\" />\n                  Cognitive Techniques for Sleep Anxiety\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"p-4 bg-white rounded border border-emerald-200\">\n                    <h4 className=\"font-semibold text-emerald-800 mb-3\">Sleep-Related Thought Challenging</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"p-2 bg-red-50 rounded\">\n                        <p className=\"text-red-700 text-sm font-medium\">Unhelpful thought:</p>\n                        <p className=\"text-red-600 text-sm\">\"I must get 8 hours or I'll have a terrible day\"</p>\n                      </div>\n                      <div className=\"p-2 bg-green-50 rounded\">\n                        <p className=\"text-green-700 text-sm font-medium\">Balanced thought:</p>\n                        <p className=\"text-green-600 text-sm\">\"One night of poor sleep won't ruin my day. I can cope and still function well.\"</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"p-4 bg-white rounded border border-emerald-200\">\n                    <h4 className=\"font-semibold text-emerald-800 mb-3\">Questions to Challenge Sleep Anxiety</h4>\n                    <ul className=\"text-emerald-700 space-y-1 text-sm\">\n                      <li>• Is this worry realistic or am I catastrophizing?</li>\n                      <li>• What's the evidence this bad outcome will happen?</li>\n                      <li>• How have I coped with poor sleep before?</li>\n                      <li>• What would I tell a friend in this situation?</li>\n                      <li>• Will this matter in a week/month/year?</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Strategy Selection & Notes</h3>\n            <Textarea\n              placeholder=\"Which sleep strategies appeal to you most? What barriers might prevent you from trying them? What would make it easier to implement these changes?\"\n              value={personalNotes['section2'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section2: e.target.value}))}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 3,\n      title: \"Personal Sleep Action Plan\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"bg-gradient-to-r from-green-50 to-blue-50 p-6 rounded-lg border-l-4 border-green-400\">\n            <h3 className=\"text-xl font-semibold text-green-800 mb-3\">Your Personalized Sleep Improvement Plan</h3>\n            <p className=\"text-green-700\">\n              Based on your assessment and the evidence-based strategies, create a realistic, \n              step-by-step plan to improve your sleep and reduce anxiety.\n            </p>\n          </div>\n\n          {/* Assessment Summary */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardHeader>\n              <CardTitle className=\"text-blue-800 flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                Your Sleep Assessment Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-white rounded border\">\n                  <div className=\"text-2xl font-bold text-blue-800\">{sleepAssessment.sleepLatency} min</div>\n                  <p className=\"text-sm text-blue-600\">Time to fall asleep</p>\n                  <p className=\"text-xs text-blue-500\">\n                    {sleepAssessment.sleepLatency > 30 ? 'Above recommended (15-20 min)' : 'Within healthy range'}\n                  </p>\n                </div>\n                <div className=\"text-center p-4 bg-white rounded border\">\n                  <div className=\"text-2xl font-bold text-blue-800\">{sleepAssessment.sleepQuality}/10</div>\n                  <p className=\"text-sm text-blue-600\">Sleep quality rating</p>\n                  <p className=\"text-xs text-blue-500\">\n                    {sleepAssessment.sleepQuality < 6 ? 'Needs improvement' : sleepAssessment.sleepQuality < 8 ? 'Good progress possible' : 'Excellent'}\n                  </p>\n                </div>\n                <div className=\"text-center p-4 bg-white rounded border\">\n                  <div className=\"text-2xl font-bold text-blue-800\">{sleepAssessment.anxietyLevel}/10</div>\n                  <p className=\"text-sm text-blue-600\">Bedtime anxiety</p>\n                  <p className=\"text-xs text-blue-500\">\n                    {sleepAssessment.anxietyLevel > 7 ? 'High priority area' : sleepAssessment.anxietyLevel > 4 ? 'Room for improvement' : 'Well managed'}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"p-4 bg-white rounded border\">\n                  <h4 className=\"font-semibold text-blue-800 mb-2\">Positive Sleep Habits You Already Have:</h4>\n                  <ul className=\"text-blue-700 text-sm space-y-1\">\n                    {sleepAssessment.sleepEnvironment.slice(0, 3).map((habit, index) => (\n                      <li key={index}>✓ {habit}</li>\n                    ))}\n                    {sleepAssessment.preSleeproutine.slice(0, 2).map((habit, index) => (\n                      <li key={index}>✓ {habit}</li>\n                    ))}\n                  </ul>\n                </div>\n                <div className=\"p-4 bg-white rounded border\">\n                  <h4 className=\"font-semibold text-blue-800 mb-2\">Priority Areas for Improvement:</h4>\n                  <ul className=\"text-blue-700 text-sm space-y-1\">\n                    {sleepAssessment.hindrances.slice(0, 4).map((issue, index) => (\n                      <li key={index}>• {issue}</li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Weekly Goals */}\n          <Card className=\"bg-green-50 border-green-200\">\n            <CardHeader>\n              <CardTitle className=\"text-green-800 flex items-center gap-2\">\n                <Target className=\"w-5 h-5\" />\n                Week 1-2 Goals (Choose 2-3 to start)\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <h4 className=\"font-semibold text-green-800 mb-3\">Sleep Schedule & Routine</h4>\n                  <div className=\"space-y-2\">\n                    {[\n                      'Set consistent bedtime and wake time (even weekends)',\n                      'Create a 30-minute wind-down routine',\n                      'No screens 1 hour before bedtime',\n                      'If awake >20 minutes, get up and do quiet activity'\n                    ].map((goal, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox id={`week1-${index}`} />\n                        <Label htmlFor={`week1-${index}`} className=\"text-green-700 text-sm\">{goal}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-green-800 mb-3\">Anxiety Management</h4>\n                  <div className=\"space-y-2\">\n                    {[\n                      'Practice 4-7-8 breathing technique nightly',\n                      'Write down worries 2 hours before bed',\n                      'Try progressive muscle relaxation in bed',\n                      'Challenge catastrophic sleep thoughts'\n                    ].map((goal, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox id={`anxiety1-${index}`} />\n                        <Label htmlFor={`anxiety1-${index}`} className=\"text-green-700 text-sm\">{goal}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Week 3-4 Goals */}\n          <Card className=\"bg-purple-50 border-purple-200\">\n            <CardHeader>\n              <CardTitle className=\"text-purple-800 flex items-center gap-2\">\n                <Star className=\"w-5 h-5\" />\n                Week 3-4 Advanced Goals\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <h4 className=\"font-semibold text-purple-800 mb-3\">Environment & Habits</h4>\n                  <div className=\"space-y-2\">\n                    {[\n                      'Optimize bedroom temperature (60-67°F)',\n                      'Install blackout curtains or use eye mask',\n                      'Limit caffeine after 2 PM consistently',\n                      'Add white noise or earplugs if needed'\n                    ].map((goal, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox id={`week3-${index}`} />\n                        <Label htmlFor={`week3-${index}`} className=\"text-purple-700 text-sm\">{goal}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-purple-800 mb-3\">Advanced Techniques</h4>\n                  <div className=\"space-y-2\">\n                    {[\n                      'Practice mindful body scan meditation',\n                      'Implement sleep restriction if needed',\n                      'Keep a sleep diary for pattern recognition',\n                      'Try guided sleep meditations'\n                    ].map((goal, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Checkbox id={`advanced-${index}`} />\n                        <Label htmlFor={`advanced-${index}`} className=\"text-purple-700 text-sm\">{goal}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Emergency Sleep Plan */}\n          <Card className=\"bg-orange-50 border-orange-200\">\n            <CardHeader>\n              <CardTitle className=\"text-orange-800 flex items-center gap-2\">\n                <Shield className=\"w-5 h-5\" />\n                Emergency Sleep Plan (For High Anxiety Nights)\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <ol className=\"text-orange-700 space-y-3\">\n                <li className=\"p-3 bg-white rounded border border-orange-200\">\n                  <strong>1. Acknowledge & Accept:</strong> \"It's okay if I don't sleep perfectly tonight. One night won't harm me.\"\n                </li>\n                <li className=\"p-3 bg-white rounded border border-orange-200\">\n                  <strong>2. Get Out of Bed:</strong> If not asleep within 20 minutes, move to another room.\n                </li>\n                <li className=\"p-3 bg-white rounded border border-orange-200\">\n                  <strong>3. Calm Activity:</strong> Read something boring, do gentle stretches, or listen to calm music.\n                </li>\n                <li className=\"p-3 bg-white rounded border border-orange-200\">\n                  <strong>4. Breathing Reset:</strong> Do 4-7-8 breathing or box breathing until calm.\n                </li>\n                <li className=\"p-3 bg-white rounded border border-orange-200\">\n                  <strong>5. Return When Sleepy:</strong> Go back to bed only when you feel drowsy, not just tired.\n                </li>\n              </ol>\n            </CardContent>\n          </Card>\n\n          {/* Progress Tracking */}\n          <Card className=\"bg-yellow-50 border-yellow-200\">\n            <CardHeader>\n              <CardTitle className=\"text-yellow-800 flex items-center gap-2\">\n                <Clock className=\"w-5 h-5\" />\n                Sleep Progress Tracking\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-yellow-700 mb-4\">\n                Track these metrics daily for 2-4 weeks to measure improvement:\n              </p>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"p-4 bg-white rounded border border-yellow-200\">\n                  <h4 className=\"font-semibold text-yellow-800 mb-2\">Daily Tracking</h4>\n                  <ul className=\"text-yellow-700 text-sm space-y-1\">\n                    <li>• Bedtime and wake time</li>\n                    <li>• Time taken to fall asleep (estimated)</li>\n                    <li>• Number of night wakings</li>\n                    <li>• Sleep quality rating (1-10)</li>\n                    <li>• Morning energy level (1-10)</li>\n                    <li>• Anxiety techniques used</li>\n                  </ul>\n                </div>\n                <div className=\"p-4 bg-white rounded border border-yellow-200\">\n                  <h4 className=\"font-semibold text-yellow-800 mb-2\">Weekly Review</h4>\n                  <ul className=\"text-yellow-700 text-sm space-y-1\">\n                    <li>• Average sleep quality improvement</li>\n                    <li>• Which techniques work best</li>\n                    <li>• Patterns or triggers identified</li>\n                    <li>• Goals for upcoming week</li>\n                    <li>• Barriers to address</li>\n                    <li>• Celebration of progress made</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Your Personal Commitment & Next Steps</h3>\n            <Textarea\n              placeholder=\"Write your commitment to improving your sleep. What are your specific goals for the next 2 weeks? How will you remind yourself to practice these techniques?\"\n              value={personalNotes['section3'] || ''}\n              onChange={(e) => setPersonalNotes(prev => ({...prev, section3: e.target.value}))}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const markSectionComplete = (sectionId: number) => {\n    if (!completedSections.includes(sectionId)) {\n      setCompletedSections([...completedSections, sectionId]);\n    }\n  };\n\n  const progressPercentage = Math.round((completedSections.length / sections.length) * 100);\n\n  return (\n    <div className=\"max-w-5xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-indigo-600 to-blue-700 text-white\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center gap-3 text-3xl\">\n            <Moon className=\"w-10 h-10\" />\n            Sleep & Anxiety Guide\n          </CardTitle>\n          <p className=\"text-indigo-100 text-lg\">\n            Evidence-based sleep improvement strategies for anxiety management\n          </p>\n          <Badge variant=\"secondary\" className=\"bg-white/20 text-white w-fit mx-auto\">\n            CBT-I Techniques • Sleep Assessment • Personal Action Plan\n          </Badge>\n        </CardHeader>\n      </Card>\n\n      {/* Progress */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"font-semibold flex items-center gap-2\">\n              <Target className=\"w-5 h-5\" />\n              Learning Progress\n            </h3>\n            <Badge variant=\"outline\">{completedSections.length}/{sections.length} sections completed</Badge>\n          </div>\n          <Progress value={progressPercentage} className=\"mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">{progressPercentage}% complete • Estimated time: 20-25 minutes</p>\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"flex flex-wrap gap-2\">\n        {sections.map((section) => (\n          <Button\n            key={section.id}\n            variant={currentSection === section.id ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setCurrentSection(section.id)}\n            className=\"flex items-center gap-2\"\n          >\n            {completedSections.includes(section.id) && <CheckCircle className=\"w-4 h-4\" />}\n            {section.title}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"w-6 h-6\" />\n            {sections[currentSection].title}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {sections[currentSection].content}\n          \n          <div className=\"flex justify-between pt-6 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentSection(Math.max(0, currentSection - 1))}\n              disabled={currentSection === 0}\n            >\n              Previous Section\n            </Button>\n            \n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => markSectionComplete(currentSection)}\n                disabled={completedSections.includes(currentSection)}\n              >\n                {completedSections.includes(currentSection) ? (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Section Complete\n                  </>\n                ) : (\n                  <>\n                    <PenTool className=\"w-4 h-4 mr-2\" />\n                    Mark Complete\n                  </>\n                )}\n              </Button>\n              \n              <Button\n                onClick={() => setCurrentSection(Math.min(sections.length - 1, currentSection + 1))}\n                disabled={currentSection === sections.length - 1}\n              >\n                Next Section\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Completion Certificate */}\n      {completedSections.length === sections.length && (\n        <Card className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-300\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-10 h-10 text-white\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-blue-800 mb-3\">\n              🌙 Excellent work! You've completed the Sleep & Anxiety guide.\n            </h3>\n            <p className=\"text-blue-700 text-lg mb-4\">\n              You now have a comprehensive, evidence-based plan to improve your sleep and reduce anxiety.\n            </p>\n            <div className=\"bg-white p-4 rounded border border-blue-200 text-left\">\n              <h4 className=\"font-semibold text-blue-800 mb-2\">What You've Accomplished:</h4>\n              <ul className=\"text-blue-700 space-y-1 text-sm\">\n                <li>✓ Understood the bidirectional relationship between sleep and anxiety</li>\n                <li>✓ Completed a comprehensive sleep pattern assessment</li>\n                <li>✓ Learned evidence-based CBT-I and sleep hygiene techniques</li>\n                <li>✓ Created a personalized 4-week sleep improvement action plan</li>\n                <li>✓ Developed emergency strategies for high-anxiety nights</li>\n              </ul>\n            </div>\n            <p className=\"text-blue-600 text-sm mt-4\">\n              Remember: Sleep improvements typically take 2-4 weeks to show significant results. Be patient and consistent with your practice.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":50687},"client/src/components/SleepGuideSimple.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Moon, Clock, Shield, CheckCircle, ArrowRight, Lightbulb } from \"lucide-react\";\n\nexport function SleepGuideSimple() {\n  const [currentSection, setCurrentSection] = useState(0);\n  const [completedSections, setCompletedSections] = useState<number[]>([]);\n\n  const sections = [\n    {\n      id: 0,\n      title: \"Sleep & Anxiety Connection\",\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-lg\">\n            Sleep and anxiety have a complex relationship. Poor sleep can increase anxiety, \n            while anxiety can make it harder to fall asleep and stay asleep.\n          </p>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400\">\n              <h4 className=\"font-semibold text-blue-800 mb-2\">How Anxiety Affects Sleep</h4>\n              <ul className=\"text-blue-700 space-y-1\">\n                <li>• Racing thoughts at bedtime</li>\n                <li>• Difficulty falling asleep</li>\n                <li>• Frequent night waking</li>\n                <li>• Early morning awakening</li>\n                <li>• Restless, unrefreshing sleep</li>\n              </ul>\n            </div>\n            <div className=\"p-4 bg-purple-50 rounded-lg border-l-4 border-purple-400\">\n              <h4 className=\"font-semibold text-purple-800 mb-2\">How Poor Sleep Increases Anxiety</h4>\n              <ul className=\"text-purple-700 space-y-1\">\n                <li>• Reduces emotional regulation</li>\n                <li>• Increases stress hormones</li>\n                <li>• Impairs problem-solving</li>\n                <li>• Heightens worry and fear</li>\n                <li>• Decreases coping abilities</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"bg-green-50 p-4 rounded-lg border-l-4 border-green-400\">\n            <h4 className=\"font-semibold text-green-800 mb-2\">The Good News</h4>\n            <p className=\"text-green-700\">\n              Improving your sleep can significantly reduce anxiety levels, and managing anxiety \n              can lead to better sleep. Small changes can create a positive cycle.\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 1,\n      title: \"Sleep Hygiene Basics\",\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-lg\">\n            Good sleep hygiene involves creating conditions that promote consistent, quality sleep.\n          </p>\n          <div className=\"space-y-6\">\n            <div className=\"p-4 bg-indigo-50 rounded-lg\">\n              <h4 className=\"font-semibold text-indigo-800 mb-3 flex items-center gap-2\">\n                <Clock className=\"w-5 h-5\" />\n                Timing & Routine\n              </h4>\n              <ul className=\"text-indigo-700 space-y-2\">\n                <li>• Go to bed and wake up at the same time every day (even weekends)</li>\n                <li>• Create a relaxing 30-60 minute bedtime routine</li>\n                <li>• Avoid long daytime naps (especially after 3pm)</li>\n                <li>• Get natural sunlight in the morning</li>\n              </ul>\n            </div>\n            \n            <div className=\"p-4 bg-teal-50 rounded-lg\">\n              <h4 className=\"font-semibold text-teal-800 mb-3 flex items-center gap-2\">\n                <Moon className=\"w-5 h-5\" />\n                Sleep Environment\n              </h4>\n              <ul className=\"text-teal-700 space-y-2\">\n                <li>• Keep bedroom cool (60-67°F/15-19°C), dark, and quiet</li>\n                <li>• Use comfortable mattress and pillows</li>\n                <li>• Remove electronic devices or use blue light filters</li>\n                <li>• Consider blackout curtains or eye mask</li>\n              </ul>\n            </div>\n\n            <div className=\"p-4 bg-orange-50 rounded-lg\">\n              <h4 className=\"font-semibold text-orange-800 mb-3\">What to Avoid</h4>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <h5 className=\"font-medium text-orange-700 mb-2\">Before Bedtime</h5>\n                  <ul className=\"text-orange-600 space-y-1\">\n                    <li>• Large meals (2-3 hours before)</li>\n                    <li>• Caffeine (after 2pm)</li>\n                    <li>• Alcohol (disrupts sleep quality)</li>\n                    <li>• Intense exercise (3 hours before)</li>\n                  </ul>\n                </div>\n                <div>\n                  <h5 className=\"font-medium text-orange-700 mb-2\">In Bed</h5>\n                  <ul className=\"text-orange-600 space-y-1\">\n                    <li>• Using phones or tablets</li>\n                    <li>• Watching TV</li>\n                    <li>• Working or studying</li>\n                    <li>• Worrying or planning</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 2,\n      title: \"Relaxation Techniques\",\n      content: (\n        <div className=\"space-y-4\">\n          <p className=\"text-lg\">\n            These techniques can help calm your mind and body before sleep, reducing anxiety and promoting rest.\n          </p>\n          <div className=\"space-y-6\">\n            <Card className=\"bg-blue-50\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-blue-800\">Progressive Muscle Relaxation</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-blue-700\">\n                <ol className=\"space-y-2\">\n                  <li>1. Lie down comfortably and close your eyes</li>\n                  <li>2. Tense your toes for 5 seconds, then relax completely</li>\n                  <li>3. Move up to calves, thighs, abdomen, arms, and face</li>\n                  <li>4. Notice the contrast between tension and relaxation</li>\n                  <li>5. End with whole-body relaxation for 2-3 minutes</li>\n                </ol>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-green-50\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-green-800\">4-7-8 Breathing for Sleep</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-green-700\">\n                <ol className=\"space-y-2\">\n                  <li>1. Exhale completely through your mouth</li>\n                  <li>2. Inhale through nose for 4 counts</li>\n                  <li>3. Hold your breath for 7 counts</li>\n                  <li>4. Exhale through mouth for 8 counts</li>\n                  <li>5. Repeat 3-4 times</li>\n                </ol>\n                <p className=\"mt-3 text-sm text-green-600\">\n                  This technique naturally calms the nervous system and promotes drowsiness.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-purple-50\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-purple-800\">Mindfulness Body Scan</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-purple-700\">\n                <ol className=\"space-y-2\">\n                  <li>1. Start by focusing on your breathing</li>\n                  <li>2. Mentally scan from toes to head</li>\n                  <li>3. Notice sensations without judgment</li>\n                  <li>4. Breathe into areas of tension</li>\n                  <li>5. Let go of the need to control</li>\n                </ol>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const markSectionComplete = (sectionId: number) => {\n    if (!completedSections.includes(sectionId)) {\n      setCompletedSections([...completedSections, sectionId]);\n    }\n  };\n\n  const progressPercentage = Math.round((completedSections.length / sections.length) * 100);\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-indigo-500 to-purple-600 text-white\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-3 text-2xl\">\n            <Moon className=\"w-8 h-8\" />\n            Sleep & Anxiety Guide\n          </CardTitle>\n          <p className=\"text-indigo-100 text-lg\">\n            Understand the connection between sleep and anxiety, and learn techniques for better rest\n          </p>\n        </CardHeader>\n      </Card>\n\n      {/* Progress */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"font-semibold\">Your Progress</h3>\n            <Badge variant=\"secondary\">{completedSections.length}/{sections.length} completed</Badge>\n          </div>\n          <Progress value={progressPercentage} className=\"mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">{progressPercentage}% complete</p>\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"flex flex-wrap gap-2\">\n        {sections.map((section) => (\n          <Button\n            key={section.id}\n            variant={currentSection === section.id ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setCurrentSection(section.id)}\n            className=\"flex items-center gap-2\"\n          >\n            {completedSections.includes(section.id) && <CheckCircle className=\"w-4 h-4\" />}\n            {section.title}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5\" />\n            {sections[currentSection].title}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {sections[currentSection].content}\n          \n          <div className=\"flex justify-between pt-6 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentSection(Math.max(0, currentSection - 1))}\n              disabled={currentSection === 0}\n            >\n              Previous\n            </Button>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => markSectionComplete(currentSection)}\n                disabled={completedSections.includes(currentSection)}\n              >\n                {completedSections.includes(currentSection) ? (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Completed\n                  </>\n                ) : (\n                  \"Mark Complete\"\n                )}\n              </Button>\n              \n              <Button\n                onClick={() => setCurrentSection(Math.min(sections.length - 1, currentSection + 1))}\n                disabled={currentSection === sections.length - 1}\n              >\n                Next\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tips */}\n      <Card className=\"bg-yellow-50 border-yellow-200\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-start gap-3\">\n            <Lightbulb className=\"w-6 h-6 text-yellow-600 mt-0.5\" />\n            <div>\n              <h3 className=\"font-semibold text-yellow-800 mb-2\">Pro Tips</h3>\n              <ul className=\"text-yellow-700 space-y-1\">\n                <li>• Be patient - sleep improvements can take 2-4 weeks</li>\n                <li>• If you can't sleep within 20 minutes, get up and do a quiet activity</li>\n                <li>• Keep a sleep diary to identify patterns</li>\n                <li>• Consider speaking with a healthcare provider if problems persist</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Completion Message */}\n      {completedSections.length === sections.length && (\n        <Card className=\"bg-green-50 border-green-200\">\n          <CardContent className=\"p-6 text-center\">\n            <CheckCircle className=\"w-12 h-12 text-green-600 mx-auto mb-3\" />\n            <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\n              Excellent work! You've completed the Sleep & Anxiety guide.\n            </h3>\n            <p className=\"text-green-700\">\n              Start implementing these techniques tonight. Remember, consistency is key for lasting improvements.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":12916},"client/src/components/ThoughtRecord.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Brain, \n  Lightbulb, \n  Scale, \n  Download,\n  Plus,\n  X,\n  CheckCircle,\n  AlertCircle,\n  TrendingDown,\n  Save\n} from \"lucide-react\";\n\ninterface ThoughtRecord {\n  id: string;\n  date: Date;\n  situation: string;\n  emotion: string;\n  intensity: number;\n  physicalSensations: string;\n  automaticThought: string;\n  evidenceFor: string;\n  evidenceAgainst: string;\n  balancedThought: string;\n  newEmotion: string;\n  newIntensity: number;\n  actionPlan: string;\n}\n\ninterface CognitiveDistortion {\n  name: string;\n  description: string;\n  examples: string[];\n}\n\nexport function ThoughtRecord() {\n  const [currentRecord, setCurrentRecord] = useState<Partial<ThoughtRecord>>({\n    situation: \"\",\n    emotion: \"\",\n    intensity: 5,\n    physicalSensations: \"\",\n    automaticThought: \"\",\n    evidenceFor: \"\",\n    evidenceAgainst: \"\",\n    balancedThought: \"\",\n    newEmotion: \"\",\n    newIntensity: 3,\n    actionPlan: \"\"\n  });\n\n  const [savedRecords, setSavedRecords] = useState<ThoughtRecord[]>([]);\n  const [selectedDistortions, setSelectedDistortions] = useState<string[]>([]);\n  const [activeTab, setActiveTab] = useState(\"situation\");\n\n  const cognitiveDistortions: CognitiveDistortion[] = [\n    {\n      name: \"All-or-Nothing\",\n      description: \"Seeing things in black and white categories\",\n      examples: [\"I'm a complete failure\", \"Nothing ever goes right\", \"Everyone hates me\"]\n    },\n    {\n      name: \"Overgeneralization\", \n      description: \"Drawing broad conclusions from a single event\",\n      examples: [\"This always happens to me\", \"I never do anything right\", \"No one ever listens\"]\n    },\n    {\n      name: \"Mental Filter\",\n      description: \"Focusing only on negative details\",\n      examples: [\"Focusing on one criticism while ignoring praise\", \"Remembering only mistakes\"]\n    },\n    {\n      name: \"Mind Reading\",\n      description: \"Assuming you know what others are thinking\",\n      examples: [\"They think I'm boring\", \"She's judging me\", \"He doesn't like me\"]\n    },\n    {\n      name: \"Fortune Telling\",\n      description: \"Predicting negative outcomes without evidence\",\n      examples: [\"This will definitely go wrong\", \"I'll embarrass myself\", \"I'll never succeed\"]\n    },\n    {\n      name: \"Catastrophizing\",\n      description: \"Expecting the worst possible outcome\",\n      examples: [\"This is a disaster\", \"I can't handle this\", \"Everything is ruined\"]\n    },\n    {\n      name: \"Emotional Reasoning\",\n      description: \"Believing feelings reflect reality\",\n      examples: [\"I feel guilty, so I must be bad\", \"I feel hopeless, so things are hopeless\"]\n    },\n    {\n      name: \"Should Statements\",\n      description: \"Having rigid rules about how things should be\",\n      examples: [\"I should be perfect\", \"People should always be fair\", \"Life should be easy\"]\n    },\n    {\n      name: \"Labeling\",\n      description: \"Defining yourself or others by mistakes\",\n      examples: [\"I'm stupid\", \"He's a loser\", \"She's completely selfish\"]\n    },\n    {\n      name: \"Personalization\",\n      description: \"Blaming yourself for things beyond your control\",\n      examples: [\"It's my fault the meeting went badly\", \"If I was a better parent, this wouldn't happen\"]\n    }\n  ];\n\n  const challengingQuestions = [\n    \"What evidence supports this thought?\",\n    \"What evidence contradicts this thought?\",\n    \"What would I tell a friend having this thought?\",\n    \"What's the worst that could realistically happen?\",\n    \"What's the best that could happen?\",\n    \"What's most likely to happen?\",\n    \"How important will this be in 5 years?\",\n    \"What would someone who cares about me say?\",\n    \"Am I falling into a thinking trap?\",\n    \"What would I think if I had all the facts?\",\n    \"Is there another way to look at this situation?\",\n    \"What can I control in this situation?\"\n  ];\n\n  const emotionOptions = [\n    \"Anxious\", \"Worried\", \"Nervous\", \"Panicked\", \"Stressed\",\n    \"Sad\", \"Depressed\", \"Disappointed\", \"Hopeless\", \"Lonely\",\n    \"Angry\", \"Frustrated\", \"Irritated\", \"Annoyed\", \"Resentful\",\n    \"Scared\", \"Fearful\", \"Terrified\", \"Overwhelmed\", \"Ashamed\",\n    \"Guilty\", \"Embarrassed\", \"Confused\", \"Hurt\", \"Rejected\"\n  ];\n\n  const toggleDistortion = (distortionName: string) => {\n    setSelectedDistortions(prev => \n      prev.includes(distortionName) \n        ? prev.filter(d => d !== distortionName)\n        : [...prev, distortionName]\n    );\n  };\n\n  const saveRecord = () => {\n    const record: ThoughtRecord = {\n      id: Date.now().toString(),\n      date: new Date(),\n      situation: currentRecord.situation || \"\",\n      emotion: currentRecord.emotion || \"\",\n      intensity: currentRecord.intensity || 5,\n      physicalSensations: currentRecord.physicalSensations || \"\",\n      automaticThought: currentRecord.automaticThought || \"\",\n      evidenceFor: currentRecord.evidenceFor || \"\",\n      evidenceAgainst: currentRecord.evidenceAgainst || \"\",\n      balancedThought: currentRecord.balancedThought || \"\",\n      newEmotion: currentRecord.newEmotion || \"\",\n      newIntensity: currentRecord.newIntensity || 3,\n      actionPlan: currentRecord.actionPlan || \"\"\n    };\n\n    setSavedRecords(prev => [record, ...prev].slice(0, 10));\n    \n    // Reset form\n    setCurrentRecord({\n      situation: \"\",\n      emotion: \"\",\n      intensity: 5,\n      physicalSensations: \"\",\n      automaticThought: \"\",\n      evidenceFor: \"\",\n      evidenceAgainst: \"\",\n      balancedThought: \"\",\n      newEmotion: \"\",\n      newIntensity: 3,\n      actionPlan: \"\"\n    });\n    setSelectedDistortions([]);\n    setActiveTab(\"situation\");\n  };\n\n  const exportRecord = () => {\n    const exportData = {\n      currentRecord,\n      selectedDistortions,\n      savedRecords,\n      exportDate: new Date().toISOString()\n    };\n\n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `thought-records-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const getIntensityColor = (intensity: number) => {\n    if (intensity <= 3) return \"bg-green-500\";\n    if (intensity <= 6) return \"bg-yellow-500\";\n    if (intensity <= 8) return \"bg-orange-500\";\n    return \"bg-red-500\";\n  };\n\n  const getIntensityReduction = () => {\n    return Math.max(0, (currentRecord.intensity || 5) - (currentRecord.newIntensity || 5));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-gradient-to-br from-purple-50 to-blue-50 border-purple-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5 text-purple-600\" />\n            Interactive Thought Record\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Identify and challenge anxious thoughts using cognitive behavioral techniques\n          </p>\n        </CardHeader>\n      </Card>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"situation\">Situation</TabsTrigger>\n          <TabsTrigger value=\"thoughts\">Thoughts</TabsTrigger>\n          <TabsTrigger value=\"evidence\">Evidence</TabsTrigger>\n          <TabsTrigger value=\"balanced\">Balanced View</TabsTrigger>\n          <TabsTrigger value=\"action\">Action Plan</TabsTrigger>\n          <TabsTrigger value=\"history\">History</TabsTrigger>\n        </TabsList>\n\n        {/* Step 1: Situation & Emotions */}\n        <TabsContent value=\"situation\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertCircle className=\"w-5 h-5\" />\n                Step 1: Identify the Situation\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Describe the specific situation that triggered your emotions\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"situation\">What happened? (Be specific and factual)</Label>\n                <Textarea\n                  id=\"situation\"\n                  placeholder=\"Example: 'I was waiting for a response to an important email I sent 3 days ago...'\"\n                  value={currentRecord.situation}\n                  onChange={(e) => setCurrentRecord(prev => ({ ...prev, situation: e.target.value }))}\n                  className=\"mt-1\"\n                  rows={4}\n                  data-testid=\"textarea-situation\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"emotion\">Primary Emotion</Label>\n                  <div className=\"mt-2 grid grid-cols-2 gap-2\">\n                    {emotionOptions.map((emotion) => (\n                      <Button\n                        key={emotion}\n                        variant={currentRecord.emotion === emotion ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setCurrentRecord(prev => ({ ...prev, emotion }))}\n                        className=\"justify-start text-sm\"\n                        data-testid={`button-emotion-${emotion.toLowerCase()}`}\n                      >\n                        {emotion}\n                      </Button>\n                    ))}\n                  </div>\n                  <Input\n                    placeholder=\"Or type your own...\"\n                    value={currentRecord.emotion || \"\"}\n                    onChange={(e) => setCurrentRecord(prev => ({ ...prev, emotion: e.target.value }))}\n                    className=\"mt-2\"\n                    data-testid=\"input-custom-emotion\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Emotion Intensity (1-10)</Label>\n                  <div className=\"mt-3 space-y-4\">\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm w-8\">1</span>\n                      <Slider\n                        value={[currentRecord.intensity || 5]}\n                        onValueChange={([value]) => setCurrentRecord(prev => ({ ...prev, intensity: value }))}\n                        max={10}\n                        min={1}\n                        step={1}\n                        className=\"flex-1\"\n                        data-testid=\"slider-emotion-intensity\"\n                      />\n                      <span className=\"text-sm w-8\">10</span>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className={`inline-block w-8 h-8 rounded-full ${getIntensityColor(currentRecord.intensity || 5)} text-white font-bold flex items-center justify-center`}>\n                        {currentRecord.intensity}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {currentRecord.intensity <= 3 ? \"Mild\" : \n                         currentRecord.intensity <= 6 ? \"Moderate\" : \n                         currentRecord.intensity <= 8 ? \"Strong\" : \"Very Strong\"}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"physical\">Physical Sensations</Label>\n                <Textarea\n                  id=\"physical\"\n                  placeholder=\"What did you notice in your body? (tight chest, racing heart, tense shoulders, etc.)\"\n                  value={currentRecord.physicalSensations}\n                  onChange={(e) => setCurrentRecord(prev => ({ ...prev, physicalSensations: e.target.value }))}\n                  className=\"mt-1\"\n                  rows={3}\n                  data-testid=\"textarea-physical-sensations\"\n                />\n              </div>\n\n              <div className=\"flex justify-end\">\n                <Button \n                  onClick={() => setActiveTab(\"thoughts\")}\n                  disabled={!currentRecord.situation || !currentRecord.emotion}\n                  data-testid=\"button-next-to-thoughts\"\n                >\n                  Next: Identify Thoughts\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Step 2: Automatic Thoughts */}\n        <TabsContent value=\"thoughts\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"w-5 h-5\" />\n                Step 2: Capture Automatic Thoughts\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                What thoughts went through your mind in this situation?\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"automatic-thought\">Automatic Thought</Label>\n                <Textarea\n                  id=\"automatic-thought\"\n                  placeholder=\"What exactly went through your mind? Write it as you thought it, even if it seems irrational...\"\n                  value={currentRecord.automaticThought}\n                  onChange={(e) => setCurrentRecord(prev => ({ ...prev, automaticThought: e.target.value }))}\n                  className=\"mt-1\"\n                  rows={4}\n                  data-testid=\"textarea-automatic-thought\"\n                />\n              </div>\n\n              {/* Cognitive Distortions */}\n              <div>\n                <Label>Thinking Patterns (Cognitive Distortions)</Label>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  Select any thinking patterns that apply to your automatic thought\n                </p>\n                <div className=\"space-y-3\">\n                  {cognitiveDistortions.map((distortion) => (\n                    <Card \n                      key={distortion.name} \n                      className={`cursor-pointer transition-colors ${\n                        selectedDistortions.includes(distortion.name) \n                          ? 'border-purple-300 bg-purple-50' \n                          : 'hover:bg-secondary/50'\n                      }`}\n                      onClick={() => toggleDistortion(distortion.name)}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <h4 className=\"font-medium\">{distortion.name}</h4>\n                              {selectedDistortions.includes(distortion.name) && (\n                                <CheckCircle className=\"w-4 h-4 text-purple-600\" />\n                              )}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-2\">\n                              {distortion.description}\n                            </p>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {distortion.examples.map((example, idx) => (\n                                <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                                  \"{example}\"\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {selectedDistortions.length > 0 && (\n                <div className=\"bg-purple-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-purple-800 mb-2\">Selected Thinking Patterns:</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedDistortions.map((distortion) => (\n                      <Badge key={distortion} className=\"bg-purple-600\">\n                        {distortion}\n                        <X \n                          className=\"w-3 h-3 ml-1 cursor-pointer\" \n                          onClick={() => toggleDistortion(distortion)}\n                        />\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex justify-between\">\n                <Button variant=\"outline\" onClick={() => setActiveTab(\"situation\")}>\n                  Back: Situation\n                </Button>\n                <Button \n                  onClick={() => setActiveTab(\"evidence\")}\n                  disabled={!currentRecord.automaticThought}\n                  data-testid=\"button-next-to-evidence\"\n                >\n                  Next: Examine Evidence\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Step 3: Evidence */}\n        <TabsContent value=\"evidence\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Scale className=\"w-5 h-5\" />\n                Step 3: Examine the Evidence\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Look at the facts objectively - what supports and contradicts your thought?\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Challenging Questions Helper */}\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-blue-800 mb-3\">💡 Questions to Help You Think</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                  {challengingQuestions.map((question, idx) => (\n                    <div key={idx} className=\"flex items-start gap-2 text-blue-700\">\n                      <span className=\"text-blue-500\">•</span>\n                      <span>{question}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"evidence-for\">Evidence FOR the thought</Label>\n                  <Textarea\n                    id=\"evidence-for\"\n                    placeholder=\"What facts support this thought? What actually happened that makes this thought seem true?\"\n                    value={currentRecord.evidenceFor}\n                    onChange={(e) => setCurrentRecord(prev => ({ ...prev, evidenceFor: e.target.value }))}\n                    className=\"mt-1\"\n                    rows={6}\n                    data-testid=\"textarea-evidence-for\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"evidence-against\">Evidence AGAINST the thought</Label>\n                  <Textarea\n                    id=\"evidence-against\"\n                    placeholder=\"What facts contradict this thought? What evidence suggests this thought might not be completely true?\"\n                    value={currentRecord.evidenceAgainst}\n                    onChange={(e) => setCurrentRecord(prev => ({ ...prev, evidenceAgainst: e.target.value }))}\n                    className=\"mt-1\"\n                    rows={6}\n                    data-testid=\"textarea-evidence-against\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex justify-between\">\n                <Button variant=\"outline\" onClick={() => setActiveTab(\"thoughts\")}>\n                  Back: Thoughts\n                </Button>\n                <Button \n                  onClick={() => setActiveTab(\"balanced\")}\n                  disabled={!currentRecord.evidenceFor && !currentRecord.evidenceAgainst}\n                  data-testid=\"button-next-to-balanced\"\n                >\n                  Next: Create Balanced Thought\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Step 4: Balanced Thought */}\n        <TabsContent value=\"balanced\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Lightbulb className=\"w-5 h-5\" />\n                Step 4: Develop a Balanced Perspective\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Create a more balanced, realistic thought based on the evidence\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"balanced-thought\">Balanced/Alternative Thought</Label>\n                <Textarea\n                  id=\"balanced-thought\"\n                  placeholder=\"Based on the evidence, what's a more balanced way to think about this situation? What would you tell a friend?\"\n                  value={currentRecord.balancedThought}\n                  onChange={(e) => setCurrentRecord(prev => ({ ...prev, balancedThought: e.target.value }))}\n                  className=\"mt-1\"\n                  rows={4}\n                  data-testid=\"textarea-balanced-thought\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"new-emotion\">How do you feel now?</Label>\n                  <Input\n                    id=\"new-emotion\"\n                    placeholder=\"What's your primary emotion after this balanced thinking?\"\n                    value={currentRecord.newEmotion}\n                    onChange={(e) => setCurrentRecord(prev => ({ ...prev, newEmotion: e.target.value }))}\n                    className=\"mt-1\"\n                    data-testid=\"input-new-emotion\"\n                  />\n                </div>\n\n                <div>\n                  <Label>New Emotion Intensity (1-10)</Label>\n                  <div className=\"mt-3 space-y-4\">\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm w-8\">1</span>\n                      <Slider\n                        value={[currentRecord.newIntensity || 3]}\n                        onValueChange={([value]) => setCurrentRecord(prev => ({ ...prev, newIntensity: value }))}\n                        max={10}\n                        min={1}\n                        step={1}\n                        className=\"flex-1\"\n                        data-testid=\"slider-new-intensity\"\n                      />\n                      <span className=\"text-sm w-8\">10</span>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className={`inline-block w-8 h-8 rounded-full ${getIntensityColor(currentRecord.newIntensity || 3)} text-white font-bold flex items-center justify-center`}>\n                        {currentRecord.newIntensity}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Improvement Indicator */}\n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <TrendingDown className=\"w-5 h-5 text-green-600\" />\n                  <div>\n                    <h4 className=\"font-medium text-green-800\">Emotional Intensity Change</h4>\n                    <p className=\"text-sm text-green-700\">\n                      {getIntensityReduction() > 0 \n                        ? `Great! Your intensity decreased by ${getIntensityReduction()} points`\n                        : \"Continue working through the steps to find relief\"\n                      }\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between\">\n                <Button variant=\"outline\" onClick={() => setActiveTab(\"evidence\")}>\n                  Back: Evidence\n                </Button>\n                <Button \n                  onClick={() => setActiveTab(\"action\")}\n                  disabled={!currentRecord.balancedThought}\n                  data-testid=\"button-next-to-action\"\n                >\n                  Next: Action Plan\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Step 5: Action Plan */}\n        <TabsContent value=\"action\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-5 h-5\" />\n                Step 5: Create an Action Plan\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                What specific steps can you take based on your new understanding?\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"action-plan\">Action Steps</Label>\n                <Textarea\n                  id=\"action-plan\"\n                  placeholder=\"What can you do differently? What steps will you take? How will you handle similar situations in the future?\"\n                  value={currentRecord.actionPlan}\n                  onChange={(e) => setCurrentRecord(prev => ({ ...prev, actionPlan: e.target.value }))}\n                  className=\"mt-1\"\n                  rows={4}\n                  data-testid=\"textarea-action-plan\"\n                />\n              </div>\n\n              {/* Summary */}\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium mb-3\">📝 Thought Record Summary</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div><strong>Situation:</strong> {currentRecord.situation || \"Not specified\"}</div>\n                  <div><strong>Original Emotion:</strong> {currentRecord.emotion || \"Not specified\"} (Intensity: {currentRecord.intensity}/10)</div>\n                  <div><strong>Automatic Thought:</strong> {currentRecord.automaticThought || \"Not specified\"}</div>\n                  <div><strong>Balanced Thought:</strong> {currentRecord.balancedThought || \"Not specified\"}</div>\n                  <div><strong>New Emotion:</strong> {currentRecord.newEmotion || \"Not specified\"} (Intensity: {currentRecord.newIntensity}/10)</div>\n                  {selectedDistortions.length > 0 && (\n                    <div><strong>Thinking Patterns:</strong> {selectedDistortions.join(\", \")}</div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex justify-between\">\n                <Button variant=\"outline\" onClick={() => setActiveTab(\"balanced\")}>\n                  Back: Balanced Thought\n                </Button>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" onClick={exportRecord} className=\"gap-2\">\n                    <Download className=\"w-4 h-4\" />\n                    Export\n                  </Button>\n                  <Button \n                    onClick={saveRecord}\n                    className=\"gap-2\"\n                    data-testid=\"button-save-record\"\n                  >\n                    <Save className=\"w-4 h-4\" />\n                    Save Record\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* History Tab */}\n        <TabsContent value=\"history\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-5 h-5\" />\n                Saved Thought Records\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Review your previous thought records to track patterns and progress\n              </p>\n            </CardHeader>\n            <CardContent>\n              {savedRecords.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Brain className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground/50\" />\n                  <p>No saved thought records yet.</p>\n                  <p className=\"text-sm\">Complete a thought record to see it here.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {savedRecords.map((record) => (\n                    <Card key={record.id} className=\"border-l-4 border-l-blue-400\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h4 className=\"font-medium\">\n                            {record.emotion} → {record.newEmotion}\n                          </h4>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge \n                              variant=\"outline\" \n                              className={record.newIntensity < record.intensity ? \"border-green-500 text-green-700\" : \"\"}\n                            >\n                              {record.intensity} → {record.newIntensity}\n                            </Badge>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {record.date.toLocaleDateString()}\n                            </span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          <div><strong>Situation:</strong> {record.situation.substring(0, 100)}...</div>\n                          <div><strong>Automatic Thought:</strong> {record.automaticThought.substring(0, 100)}...</div>\n                          <div><strong>Balanced Thought:</strong> {record.balancedThought.substring(0, 100)}...</div>\n                          {record.actionPlan && (\n                            <div><strong>Action Plan:</strong> {record.actionPlan.substring(0, 100)}...</div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":31193},"client/src/components/ui/footer.tsx":{"content":"import { Heart, Shield, Phone, Mail, ExternalLink } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-muted/30 border-t mt-16\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {/* Emergency Banner */}\n        <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4 mb-8\">\n          <div className=\"flex items-center gap-3\">\n            <Phone className=\"w-5 h-5 text-destructive flex-shrink-0\" />\n            <div>\n              <h3 className=\"font-semibold text-destructive mb-1\">Emergency Support</h3>\n              <p className=\"text-sm text-destructive/80\">\n                If you're having thoughts of suicide or self-harm, please contact emergency services immediately:\n              </p>\n              <div className=\"flex flex-wrap gap-4 mt-2 text-sm\">\n                <span className=\"font-medium\">Emergency: 999</span>\n                <span className=\"font-medium\">Samaritans: 116 123</span>\n                <span className=\"font-medium\">Crisis Text Line: Text SHOUT to 85258</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Footer Content */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-8\">\n          {/* About Section */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Heart className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold text-foreground\">Waitlist Companion™</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Providing interim mental health support while you wait for NHS services. \n              Evidence-based tools and resources to help you manage anxiety and improve wellbeing.\n            </p>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Clinically informed support</span>\n            </div>\n          </div>\n\n          {/* Support Links */}\n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Support Resources</h3>\n            <div className=\"space-y-2 text-sm\">\n              <a \n                href=\"https://www.nhs.uk/mental-health/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2 text-muted-foreground hover:text-primary transition-colors\"\n              >\n                NHS Mental Health Services <ExternalLink className=\"w-3 h-3\" />\n              </a>\n              <a \n                href=\"https://www.samaritans.org/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2 text-muted-foreground hover:text-primary transition-colors\"\n              >\n                Samaritans <ExternalLink className=\"w-3 h-3\" />\n              </a>\n              <a \n                href=\"https://www.mind.org.uk/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2 text-muted-foreground hover:text-primary transition-colors\"\n              >\n                Mind UK <ExternalLink className=\"w-3 h-3\" />\n              </a>\n              <a \n                href=\"https://www.anxietyuk.org.uk/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2 text-muted-foreground hover:text-primary transition-colors\"\n              >\n                Anxiety UK <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Contact Info */}\n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Get Help</h3>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-center gap-2 text-muted-foreground\">\n                <Phone className=\"w-4 h-4\" />\n                <span>24/7 Crisis Line: 116 123</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-muted-foreground\">\n                <Mail className=\"w-4 h-4\" />\n                <span>support@waitlistcompanion.com</span>\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-4\">\n                For technical support or general inquiries about the platform.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Medical Disclaimer */}\n        <div className=\"border-t pt-8 space-y-4\">\n          <div className=\"bg-yellow-50 dark:bg-yellow-950/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n            <h4 className=\"font-semibold text-yellow-800 dark:text-yellow-200 mb-2\">Medical Disclaimer</h4>\n            <div className=\"text-xs text-yellow-700 dark:text-yellow-300 space-y-2\">\n              <p>\n                <strong>Important:</strong> Waitlist Companion™ is designed as interim support and does not replace professional medical care. \n                This platform provides educational content and self-help tools but is not a substitute for diagnosis, treatment, or medical advice from qualified healthcare professionals.\n              </p>\n              <p>\n                <strong>Emergency Situations:</strong> If you are experiencing a mental health emergency, suicidal thoughts, or are in immediate danger, \n                please contact emergency services (999) or go to your nearest emergency department immediately.\n              </p>\n              <p>\n                <strong>NHS Transition:</strong> Continue to pursue your NHS referral and attend all scheduled appointments. \n                This platform is intended to provide support while you wait for formal NHS mental health services.\n              </p>\n            </div>\n          </div>\n\n          {/* Legal Footer */}\n          <div className=\"flex flex-col sm:flex-row justify-between items-center pt-4 border-t text-xs text-muted-foreground\">\n            <div className=\"mb-2 sm:mb-0\">\n              © 2025 Waitlist Companion™. All rights reserved.\n            </div>\n            <div className=\"flex gap-4\">\n              <Link href=\"/privacy\" className=\"hover:text-primary transition-colors\">\n                Privacy Policy\n              </Link>\n              <Link href=\"/terms\" className=\"hover:text-primary transition-colors\">\n                Terms of Service\n              </Link>\n              <Link href=\"/accessibility\" className=\"hover:text-primary transition-colors\">\n                Accessibility\n              </Link>\n            </div>\n          </div>\n\n          {/* Regulatory Compliance */}\n          <div className=\"text-xs text-muted-foreground bg-muted/30 rounded-lg p-3\">\n            <p className=\"mb-1\">\n              <strong>Regulatory Information:</strong> This platform complies with UK healthcare data protection standards and GDPR requirements. \n              All user data is handled in accordance with NHS Digital guidance for digital health services.\n            </p>\n            <p>\n              Not regulated as a medical device. Content developed in consultation with mental health professionals and based on NICE guidelines for anxiety management.\n            </p>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":7370}},"version":1}